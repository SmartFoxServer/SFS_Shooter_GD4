<?xml version="1.0"?>
<doc>
    <assembly>
        <name>SmartFox2X</name>
    </assembly>
    <members>
        <member name="T:Sfs2X.SmartFox">
            <summary>
            SmartFox is the main class of the SmartFoxServer 2X API.
            </summary>
            <remarks>
            This class is responsible for connecting the client to a SmartFoxServer instance and for dispatching all asynchronous events. Developers always interact with SmartFoxServer through this class.
            <para/>
            <b>NOTE</b>: in the provided examples, <c>sfs</c> always indicates a SmartFox instance.
            <para/>
            Author: The gotoAndPlay() Team<br/>
            http://www.smartfoxserver.com
            </remarks>
        </member>
        <member name="P:Sfs2X.SmartFox.SocketClient">
            <exclude />
        </member>
        <member name="P:Sfs2X.SmartFox.Log">
            <exclude />
        </member>
        <member name="M:Sfs2X.SmartFox.#ctor">
            <summary>
            Creates a new SmartFox instance.
            </summary>
            
            <example>
            The following example instantiates the <b>SmartFox</b> class without enabling the debug messages:
            <code>
            SmartFox sfs = new SmartFox();
            </code>
            </example>
        </member>
        <member name="M:Sfs2X.SmartFox.#ctor(System.Boolean)">
            <summary>
            Creates a new SmartFox instance.
            </summary>
            
            <param name="debug">If <c>true</c>, the SmartFoxServer API debug messages are logged.</param>
            
            <example>
            The following example instantiates the <b>SmartFox</b> class enabling the debug messages:
            <code>
            SmartFox sfs = new SmartFox(true);
            </code>
            </example>
        </member>
        <member name="M:Sfs2X.SmartFox.#ctor(Sfs2X.Util.UseWebSocket)">
            <summary>
            Creates a new SmartFox instance enabling websocket communication instead of the default socket communication.
            </summary>
            
            <remarks>
            <b>IMPORTANT</b>: this constructor should be used in Unity only and when building for the web only (Unity WEBGL).
            In fact it is preferable to use the default socket communication, as websocket connection doesn't support BlueBox and HRC systems.<br/>
            This constructor has no effects if used in native .Net applications and is not available in the Universal Windows Platform DLL (websocket communication not supported, because redundant).
            <para/>
            Starting from API v1.7.3, websocket communication uses the default SFS2X binary protocol (see <c>UseWebSocket</c> class). Legacy text protocol is still available for backward compatibility with SmartFoxserver 2X versions prior to 2.13.
            </remarks>
            
            <param name="useWebSocket">If set to <c>UseWebSocket.WS_BIN</c>, non-secure websocket communication (WS) is used; if set to <c>UseWebSocket.WSS_BIN</c>, secure websocket communication (WSS) is used.</param>
            
            <example>
            The following example instantiates the <b>SmartFox</b> class enabling websocket communication:
            <code>
            SmartFox sfs = new SmartFox(UseWebSocket.WS_BIN);
            </code>
            </example>
        </member>
        <member name="M:Sfs2X.SmartFox.#ctor(Sfs2X.Util.UseWebSocket,System.Boolean)">
            <summary>
            Creates a new SmartFox instance enabling websocket communication instead of the default socket communication.
            </summary>
            
            <remarks>
            <b>IMPORTANT</b>: this constructor should be used in Unity only and when building for the web only (Unity WEBGL).
            In fact it is preferable to use the default socket communication, as websocket connection doesn't support BlueBox and HRC systems.<br/>
            This constructor has no effects if used in native .Net applications and is not available in the Universal Windows Platform DLL (websocket communication not supported, because redundant).
            <para/>
            Starting from API v1.7.3, websocket communication uses the default SFS2X binary protocol (see <c>UseWebSocket</c> class). Legacy text protocol is still available for backward compatibility with SmartFoxserver 2X versions prior to 2.13.
            </remarks>
            
            <param name="useWebSocket">If set to <c>UseWebSocket.WS_BIN</c>, non-secure websocket communication (WS) is used; if set to <c>UseWebSocket.WSS_BIN</c>, secure websocket communication (WSS) is used.</param>
            <param name="debug">If <c>true</c>, the SmartFoxServer API debug messages are logged.</param>
            
            <example>
            The following example instantiates the <b>SmartFox</b> class enabling secure websocket communication and debug messages:
            <code>
            SmartFox sfs = new SmartFox(UseWebSocket.WSS_BIN, true);
            </code>
            </example>
        </member>
        <member name="M:Sfs2X.SmartFox.SetClientDetails(System.String,System.String)">
            <summary>
            Allows to set custom client details used to gather statistics about the client platform in the SFS2X Analytics Module.
            </summary>
            
            <remarks>
            This method must be called before the connection is started. <br/>
            The length of the two strings combined must be &lt; 512 characters. 
            <para/>
            By default the generic "Unity / .Net" and "Universal Windows Platform" labels (depending on the used DLL) are set as platform, without specifying the version.
            </remarks>
            
            <param name="platformId">The id of the runtime platform: for example "Unity WebPlayer" or "iOS".</param>
            <param name="version">An optional version of the runtime platform: for example "2.0.0".</param>
            
        </member>
        <member name="M:Sfs2X.SmartFox.EnableLagMonitor(System.Boolean,System.Int32,System.Int32)">
            <summary>
            Enables the automatic realtime monitoring of the lag between the client and the server (round robin).
            </summary>
            
            <remarks>
            When turned on, the <see cref="F:Sfs2X.Core.SFSEvent.PING_PONG"/> event type is dispatched continuously, providing the average of the last ten measured lag values.
            The lag monitoring can be enabled after the login has been performed successfully only and it is automatically halted when the user logs out of a Zone or gets disconnected.
            </remarks>
            
            <param name='enabled'>The lag monitoring status: <c>true</c> to start the monitoring, <c>false</c> to stop it.</param>
            <param name='interval'>(default: 4) An optional amount of seconds to wait between each query (recommended 3-4s).</param>
            <param name='queueSize'>(default: 10) The amount of values stored temporarily and used to calculate the average lag.</param>
            
            <seealso cref="F:Sfs2X.Core.SFSEvent.PING_PONG"/>
        </member>
        <member name="M:Sfs2X.SmartFox.EnableLagMonitor(System.Boolean)">
            <summary>
            See <see cref="M:Sfs2X.SmartFox.EnableLagMonitor(System.Boolean,System.Int32,System.Int32)"/>.
            </summary>
        </member>
        <member name="M:Sfs2X.SmartFox.EnableLagMonitor(System.Boolean,System.Int32)">
            <summary>
            See <see cref="M:Sfs2X.SmartFox.EnableLagMonitor(System.Boolean,System.Int32,System.Int32)"/>.
            </summary>
        </member>
        <member name="P:Sfs2X.SmartFox.IsConnecting">
            <exclude/>
        </member>
        <member name="M:Sfs2X.SmartFox.GetSocketEngine">
            <exclude/>
        </member>
        <member name="P:Sfs2X.SmartFox.LagMonitor">
            <exclude/>
        </member>
        <member name="P:Sfs2X.SmartFox.IsConnected">
            <summary>
            Indicates whether the client is connected to the server or not.
            </summary>
            
            <example>
            The following example checks the connection status:
            <code>
            Console.WriteLine("Am I connected? " + sfs.IsConnected);                        // .Net / Unity
            System.Diagnostics.Debug.WriteLine("Am I connected? " + sfs.IsConnected);       // UWP
            </code>
            </example>
        </member>
        <member name="P:Sfs2X.SmartFox.Version">
            <summary>
            Returns the current version of the SmartFoxServer 2X C# API.
            </summary>
        </member>
        <member name="P:Sfs2X.SmartFox.HttpUploadURI">
            <summary>
            Returns the HTTP URI that can be used to upload files to SmartFoxServer 2X, using regular HTTP POST.
            </summary>
            
            <remarks>
            For more details on how to use this functionality, see the <see href="http://docs2x.smartfoxserver.com/AdvancedTopics/file-uploads">Upload File</see> tutorial.
            <para/>
            <b>NOTE</b>: this property returns <c>null</c> if no API configuration has been set or the current user is not already logged in the server.
            </remarks>
        </member>
        <member name="P:Sfs2X.SmartFox.Config">
            <summary>
            Returns the client configuration details.
            </summary>
            
            <seealso cref="M:Sfs2X.SmartFox.LoadConfig(System.String,System.Boolean)"/>
        </member>
        <member name="P:Sfs2X.SmartFox.ConnectionMode">
            <summary>
            Returns the current connection mode after a connection has been successfully established.
            </summary>
            
            <remarks>
            Possible values are:
            <ul>
            <li><b>HTTP</b>: a tunnelled http connection (through the BlueBox) was established between the client and the server</li>
            <li><b>Socket</b>: a regular socket connection was established between the client and the server</li>
            <li><b>WebSocket</b>: a websocket connection was established between the client and the server (not available under Universal Windows Platform)</li>
            <li><b>WebSocketSecure</b>: a secure websocket connection was established between the client and the server (not available under Universal Windows Platform)</li>
            </ul>
            </remarks>
            
            <example>
            The following example shows the current connection mode:
            <code>
            Console.WriteLine("Connection mode: " + sfs.ConnectionMode);                        // .Net / Unity
            System.Diagnostics.Debug.WriteLine("Connection mode: " + sfs.ConnectionMode);       // Universal Windows Platform
            </code>
            </example>
        </member>
        <member name="P:Sfs2X.SmartFox.CompressionThreshold">
            <summary>
            Returns the current compression threshold.
            </summary>
            
            <remarks>
            This value represents the maximum message size (in bytes) before the protocol compression is activated and it is determined by the server configuration.<br/>
            Compression threshold doesn't apply if websocket connection is used.
            </remarks>
        </member>
        <member name="P:Sfs2X.SmartFox.MaxMessageSize">
            <summary>
            Returns the maximum size of messages allowed by the server.
            </summary>
            
            <remarks>
            Any request exceeding this size will not be sent. The value is determined by the server-side configuration.
            </remarks>
        </member>
        <member name="M:Sfs2X.SmartFox.GetRoomById(System.Int32)">
            <summary>
            Retrieves a Room object from its id.
            </summary>
            
            <remarks>
            The same object is returned by the <b>IRoomManager.getRoomById()</b> method, accessible through the <see cref="P:Sfs2X.SmartFox.RoomManager"/> getter;
            this was replicated on the <em>SmartFox</em> class for handy access due to its usually frequent usage.
            </remarks>
            
            <param name="id">The id of the Room.</param>
            
            <returns>An object representing the requested Room; <c>null</c> if no <see cref="T:Sfs2X.Entities.Room"/> object with the passed id exists in the Rooms list.</returns>
            
            <example>
            The following example retrieves a <see cref="T:Sfs2X.Entities.Room"/> object and writes its name:
            <code>
            int roomId = 3;
            Room room = sfs.GetRoomById(roomId);
            Console.WriteLine("The name of Room " + roomId + " is " + room.Name);                       // .Net / Unity
            System.Diagnostics.Debug.WriteLine("The name of Room " + roomId + " is " + room.Name);      // UWP
            </code>
            </example>
            
            <seealso cref="M:Sfs2X.SmartFox.GetRoomByName(System.String)"/>
            <seealso cref="P:Sfs2X.SmartFox.RoomList"/>
            <seealso cref="T:Sfs2X.Entities.Managers.SFSRoomManager"/>
        </member>
        <member name="M:Sfs2X.SmartFox.GetRoomByName(System.String)">
            <summary>
            Retrieves a Room object from its name.
            </summary>
            
            <remarks>
            The same object is returned by the <b>IRoomManager.getRoomById()</b> method, accessible through the <see cref="P:Sfs2X.SmartFox.RoomManager"/> getter;
            this was replicated on the <em>SmartFox</em> class for handy access due to its usually frequent usage.
            </remarks>
            
            <param name="name">The name of the Room.</param>
            
            <returns>An object representing the requested Room; <c>null</c> if no <see cref="T:Sfs2X.Entities.Room"/> object with the passed name exists in the Rooms list.</returns>
            
            <example>
            The following example retrieves a <see cref="T:Sfs2X.Entities.Room"/> object and writes its id:
            <code>
            string roomName = "The Lobby";
            Room room = sfs.GetRoomByName(roomName);
            Console.WriteLine("The id of Room '" + roomName + "' is " + room.Id);                           // .Net / Unity
            System.Diagnostics.Debug.WriteLine("The id of Room '" + roomName + "' is " + room.Id);          // UWP
            </code>
            </example>
            
            <seealso cref="T:Sfs2X.Entities.Managers.SFSRoomManager"/>
            <seealso cref="P:Sfs2X.SmartFox.RoomList"/>
            <seealso cref="T:Sfs2X.Entities.SFSRoom"/>
        </member>
        <member name="M:Sfs2X.SmartFox.GetRoomListFromGroup(System.String)">
            <summary>
            Retrieves the list of Rooms which are part of the specified Room Group.
            </summary>
            
            <remarks>
            The same list is returned by the <b>IRoomManager.getRoomById()</b> method, accessible through the <see cref="P:Sfs2X.SmartFox.RoomManager"/> getter;
            this was replicated on the <em>SmartFox</em> class for handy access due to its usually frequent usage.
            </remarks>
            
            <param name="groupId">The name of the Group.</param>
            
            <returns>The list of <see cref="T:Sfs2X.Entities.Room"/> objects belonging to the passed Group.</returns>
            
            <seealso cref="T:Sfs2X.Entities.Managers.SFSRoomManager"/>
            <seealso cref="T:Sfs2X.Entities.Room"/>
        </member>
        <member name="M:Sfs2X.SmartFox.KillConnection">
            <summary>
            Simulates an abrupt disconnection from the server.
            </summary>
            
            <remarks>
            This method should be used for testing and simulations only, otherwise use the <see cref="M:Sfs2X.SmartFox.Disconnect"/> method.<br/>
            This method is not supported in case of websocket connection.
            </remarks>
            
            <seealso cref="M:Sfs2X.SmartFox.Disconnect"/>
        </member>
        <member name="M:Sfs2X.SmartFox.Connect(System.String,System.Int32)">
            <summary>
            Establishes a connection between the client and a SmartFoxServer 2X instance.
            </summary>
            
            <remarks>
            If no argument is passed, the client will use the settings loaded via <see cref="M:Sfs2X.SmartFox.LoadConfig(System.String,System.Boolean)"/> method.
            <para/>
            The client usually connects to a SmartFoxServer instance through a socket connection. In case a socket connection can't be established,
            and the <b>UseBlueBox</b> property is set to <c>true</c>, a tunnelled http connection through the BlueBox module is attempted as a fail-safe system.
            When a successful connection is established, the <b>ConnectionMode</b> property can be used to check the current connection mode.
            <para/>
            Tunnelled http connection is not available in case of websocket connection.
            <para/>
            When using a websocket connection to an IPv6 address, always wrap the <i>host</i> value in square brackets.
            </remarks>
            
            <param name="host">The address of the server to connect to.</param>
            <param name="port">The TCP port to connect to.</param>
            
            <exception cref="T:System.ArgumentException">If an invalid host/address or port is passed, and it can't be found in the loaded settings.</exception>
            
            <example>
            The following example connects to a local SmartFoxServer 2X instance:
            <code>
            void SomeMethod() {
            	SmartFox sfs = new SmartFox();
            	
            	sfs.AddEventListener(SFSEvent.CONNECTION, OnConnection);
            	sfs.Connect("127.0.0.1", 9933);
            }
            
            void OnConnection(BaseEvent evt) {
            	if ((bool)evt.Params["success"])
            	{
            		Console.WriteLine("Connection was established");                         // .Net / Unity
            	    System.Diagnostics.Debug.WriteLine("Connection was established");        // UWP
            	}
            	else
            	{
            		Console.WriteLine("Connection failed");                         // .Net / Unity
            	    System.Diagnostics.Debug.WriteLine("Connection failed");        // UWP
            	}
            }
            </code>
            </example>
            
            <seealso cref="M:Sfs2X.SmartFox.LoadConfig(System.String,System.Boolean)"/>
            <seealso cref="P:Sfs2X.SmartFox.ConnectionMode"/>
            <seealso cref="M:Sfs2X.SmartFox.Disconnect"/>
            <seealso cref="F:Sfs2X.Core.SFSEvent.CONNECTION"/>
        </member>
        <member name="M:Sfs2X.SmartFox.Connect">
            <summary>
            See <see cref="M:Sfs2X.SmartFox.Connect(System.String,System.Int32)"/>.
            </summary>
        </member>
        <member name="M:Sfs2X.SmartFox.Connect(System.String)">
            <summary>
            See <see cref="M:Sfs2X.SmartFox.Connect(System.String,System.Int32)"/>.
            </summary>
        </member>
        <member name="M:Sfs2X.SmartFox.Connect(Sfs2X.Util.ConfigData)">
            <summary>
            Establishes a connection between the client and a SmartFoxServer 2X instance using a configuration object.
            </summary>
            
            <remarks>
            The client usually connects to a SmartFoxServer instance through a socket connection. In case a socket connection can't be established,
            and the <b>UseBlueBox</b> property is set to <c>true</c>, a tunnelled http connection through the BlueBox module is attempted as a fail-safe system.
            When a successful connection is established, the <b>ConnectionMode</b> property can be used to check the current connection mode.
            <para/>
            Tunnelled http connection is not available in case of websocket connection.
            </remarks>
            
            <param name="cfg">The client configuration object.</param>
            
            <exception cref="T:System.ArgumentException">If an invalid host/address or port is passed, and it can't be found in the loaded settings.</exception>
            
            <example>
            The following example connects to a local SmartFoxServer 2X instance:
            <code>
            ConfigData cfg = new ConfigData();
            cfg.Host = "127.0.0.1";
            cfg.Port = 9933;
            cfg.Zone = "BasicExamples";
            
            sfs.Connect(cfg);
            </code>
            </example>
            
            <seealso cref="T:Sfs2X.Util.ConfigData"/>
            <seealso cref="P:Sfs2X.SmartFox.ConnectionMode"/>
            <seealso cref="M:Sfs2X.SmartFox.Disconnect"/>
            <seealso cref="F:Sfs2X.Core.SFSEvent.CONNECTION"/>
        </member>
        <member name="M:Sfs2X.SmartFox.Disconnect">
            <summary>
            Closes the connection between the client and the SmartFoxServer 2X instance.
            </summary>
            <seealso cref="M:Sfs2X.SmartFox.Connect"/>
            <seealso cref="F:Sfs2X.Core.SFSEvent.CONNECTION_LOST"/>
        </member>
        <member name="P:Sfs2X.SmartFox.Debug">
            <summary>
            Indicates whether the client-server messages debug is enabled or not.
            </summary>
            
            <remarks>
            If set to <c>true</c>, detailed debugging informations for all the incoming and outgoing messages are provided.<br/>
            Debugging can be enabled when instantiating the <em>SmartFox</em> class too.
            </remarks>
        </member>
        <member name="P:Sfs2X.SmartFox.CurrentIp">
            <summary>
            Returns the IP address or domain name of the SmartFoxServer 2X instance to which the client is connected.
            </summary>
            
            <seealso cref="M:Sfs2X.SmartFox.Connect(System.String,System.Int32)"/>
            <seealso cref="M:Sfs2X.SmartFox.LoadConfig(System.String,System.Boolean)"/>
        </member>
        <member name="P:Sfs2X.SmartFox.CurrentPort">
            <summary>
            Returns the TCP port of the SmartFoxServer 2X instance to which the client is connected.
            </summary>
            
            <seealso cref="M:Sfs2X.SmartFox.Connect(System.String,System.Int32)"/>
            <seealso cref="M:Sfs2X.SmartFox.LoadConfig(System.String,System.Boolean)"/>
        </member>
        <member name="P:Sfs2X.SmartFox.CurrentZone">
            <summary>
            Returns the Zone currently in use, if the user is already logged in.
            </summary>
            
            <seealso cref="M:Sfs2X.SmartFox.LoadConfig(System.String,System.Boolean)"/>
            <seealso cref="T:Sfs2X.Requests.LoginRequest"/>
        </member>
        <member name="P:Sfs2X.SmartFox.MySelf">
            <summary>
            Returns the <em>User</em> object representing the client when connected to a SmartFoxServer 2X instance.
            </summary>
            
            <remarks>
            This object is generated upon successful login only, so it is <c>null</c> if login was not performed yet.
            <para/>
            <b>NOTE</b>: setting this property manually can disrupt the API functioning.
            </remarks>
            
            <seealso cref="P:Sfs2X.Entities.User.IsItMe"/>
            <seealso cref="T:Sfs2X.Requests.LoginRequest"/>
        </member>
        <member name="P:Sfs2X.SmartFox.Logger">
            <summary>
            Returns a reference to the internal <em>Logger</em> instance used by SmartFoxServer 2X.
            </summary>
        </member>
        <member name="P:Sfs2X.SmartFox.LastJoinedRoom">
            <summary>
            Returns the object representing the last Room joined by the client, if any.
            </summary>
            
            <remarks>
            This property is <c>null</c> if no Room was joined.
            <para/>
            <b>NOTE</b>: setting this property manually can disrupt the API functioning.
            Use the <see cref="T:Sfs2X.Requests.JoinRoomRequest"/> request to join a new Room instead.
            </remarks>
            
            <seealso cref="T:Sfs2X.Requests.JoinRoomRequest"/>
            <seealso cref="P:Sfs2X.SmartFox.JoinedRooms"/>
        </member>
        <member name="P:Sfs2X.SmartFox.JoinedRooms">
            <summary>
            Returns a list of Room objects representing the Rooms currently joined by the client.
            </summary>
            
            <remarks>
            The same list is returned by the <b>IRoomManager.getRoomById()</b> method, accessible through the <see cref="P:Sfs2X.SmartFox.RoomManager"/> getter;
            this was replicated on the <em>SmartFox</em> class for handy access due to its usually frequent usage.
            </remarks>
            
            <seealso cref="T:Sfs2X.Requests.JoinRoomRequest"/>
            <seealso cref="P:Sfs2X.SmartFox.LastJoinedRoom"/>
            <seealso cref="P:Sfs2X.SmartFox.RoomManager"/>
            <seealso cref="T:Sfs2X.Entities.Room"/>
        </member>
        <member name="P:Sfs2X.SmartFox.RoomList">
            <summary>
            Returns a list of Room objects representing the Rooms currently "watched" by the client.
            </summary>
            
            <remarks>
            The list contains all the Rooms that are currently joined and all the Rooms belonging to the Room Groups that have been subscribed.<br/>
            At login time, the client automatically subscribes all the Room Groups specified in the Zone's <b>Default Room Groups</b> setting.
            <para/>
            The same list is returned by the <b>IRoomManager.getRoomById()</b> method, accessible through the <see cref="P:Sfs2X.SmartFox.RoomManager"/> getter;
            this was replicated on the <em>SmartFox</em> class for handy access due to its usually frequent usage.
            </remarks>
            
            <seealso cref="P:Sfs2X.SmartFox.RoomManager"/>
            <seealso cref="T:Sfs2X.Requests.JoinRoomRequest"/>
            <seealso cref="T:Sfs2X.Requests.SubscribeRoomGroupRequest"/>
            <seealso cref="T:Sfs2X.Requests.UnsubscribeRoomGroupRequest"/>
        </member>
        <member name="P:Sfs2X.SmartFox.RoomManager">
            <summary>
            Returns a reference to the Room Manager.
            </summary>
            
            <remarks>
            This manager is used internally by the SmartFoxServer 2X API; the reference returned by this property
            gives access to the Rooms list and Groups, allowing interaction with <see cref="T:Sfs2X.Entities.Room"/> objects.
            </remarks>
            
            <seealso cref="T:Sfs2X.Entities.Managers.IRoomManager"/>
        </member>
        <member name="P:Sfs2X.SmartFox.UserManager">
            <summary>
            Returns a reference to the User Manager.
            </summary>
            
            <remarks>
            This manager is used internally by the SmartFoxServer 2X API; the reference returned by this property
            gives access to the users list, allowing interaction with <see cref="T:Sfs2X.Entities.User"/> objects.
            </remarks>
            
            <seealso cref="T:Sfs2X.Entities.Managers.IUserManager"/>
        </member>
        <member name="P:Sfs2X.SmartFox.BuddyManager">
            <summary>
            Returns a reference to the Buddy Manager.
            </summary>
            
            <remarks>
            This manager is used internally by the SmartFoxServer 2X API; the reference returned by this property
            gives access to the buddies list, allowing interaction with <see cref="T:Sfs2X.Entities.Buddy"/> and <see cref="T:Sfs2X.Entities.Variables.BuddyVariable"/> objects and access to user properties in the <b>Buddy List</b> system.
            </remarks>
            
            <seealso cref="T:Sfs2X.Entities.Managers.IBuddyManager"/>
        </member>
        <member name="P:Sfs2X.SmartFox.UdpAvailable">
            <summary>
            Indicates whether the UPD protocol is available or not in the current runtime.
            </summary>
            
            <remarks>
            UPD protocol is always available, unless websocket connection is used or http fallback (BlueBox) is activated in case a regular socket connection can't be established.
            <para/>
            Using the UDP protocol in an application requires that a handshake is performed between the client and the server.
            By default this is NOT done by the SmartFoxServer 2X API, to avoid allocating resources that might never be used.<br/>
            In order to activate the UDP support, the initUDP() method must be invoked explicitly.
            </remarks>
            
            <seealso cref="M:Sfs2X.SmartFox.InitUDP(System.String,System.Int32)"/>
        </member>
        <member name="P:Sfs2X.SmartFox.UdpInited">
            <summary>
            Indicates whether the UDP handshake has been performed successfully or not.
            </summary>
            
            <seealso cref="M:Sfs2X.SmartFox.InitUDP(System.String,System.Int32)"/>
        </member>
        <member name="M:Sfs2X.SmartFox.InitUDP(System.String,System.Int32)">
            <summary>
            Initializes the UDP protocol by performing an handshake with the server.
            </summary>
            
            <remarks>
            This method needs to be called only once. It can be executed at any moment provided that a connection to the server has already been established.<br/>
            After a successful initialization, UDP requests can be sent to the server-side Extension at any moment.
            <para/>
            If <em>udpHost</em> or <em>udpPort</em> arguments are not passed, the client will use the settings loaded via <see cref="M:Sfs2X.SmartFox.LoadConfig(System.String,System.Boolean)"/> method.
            <para/>
            UDP protocol is not available in case of websocket connection.
            <para/>
            <b>MTU note</b>
            <para/>
            The <em>Maximum Transmission Unit</em> (MTU), represents the largest amount of bytes that can be sent at once before packet fragmentation occurs.
            Since the UDP protocol uses a "nothing-or-all" approach to the transmission, it is important to keep in mind that, on average, a message size of 1100-1200 bytes is probably the maximum you can reach.
            If you exceed the MTU size the data will be "lost in hyperspace" (the Internet).
            <para/>
            Another interesting matter is that there's no fixed size for the MTU, each operating system uses a slighlty different size.
            Because of this we suggest a conservative data size of 1000-1200 bytes per packet to avoid packet loss.
            <para/>
            The SFS2X protocol compression allows to send 2-3KBytes of uncompressed data which usually is squeezed down to a size of ~1000 bytes.
            If you have larger data to send we suggest to organize it in smaller chunks so that they don't exceed the suggested MTU size.
            <para/>
            More details about the MTU can be found here: <see href="http://en.wikipedia.org/wiki/Maximum_transmission_unit"/>.
            </remarks>
            
            <param name="udpHost">The IP address of the server to connect to.</param>
            <param name="udpPort">he UDP port to connect to.</param>
            
            <example>
            The following example initializes the UDP communication, sends a request to an Extension and handles the related events:
            <code>
            void SomeMethod() {
            	sfs.AddEventListener(SFSEvent.UPD_INIT, OnUDPInit);
            	sfs.InitUDP();
            }
            
            void OnUDPInit(BaseEvent evt) {
            	if ((bool)evt.Params["success"]) {
            		// Execute an extension call via UDP
            		sfs.Send( new ExtensionRequest("udpTest", new SFSObject(), null, true) ):
            	} else {
            		Console.WriteLine("UDP init failed!");                          // .Net / Unity
            	    System.Diagnostics.Debug.WriteLine("UDP init failed!");         // UWP
            	}
            }
            </code>
            </example>
            
            <seealso cref="P:Sfs2X.SmartFox.UdpAvailable"/>
            <seealso cref="F:Sfs2X.Core.SFSEvent.UDP_INIT"/>
            <seealso cref="M:Sfs2X.SmartFox.LoadConfig(System.String,System.Boolean)"/>
        </member>
        <member name="M:Sfs2X.SmartFox.InitUDP">
            <summary>
            See <see cref="M:Sfs2X.SmartFox.InitUDP(System.String,System.Int32)"/>.
            </summary>
        </member>
        <member name="M:Sfs2X.SmartFox.InitUDP(System.String)">
            <summary>
            See <see cref="M:Sfs2X.SmartFox.InitUDP(System.String,System.Int32)"/>.
            </summary>
        </member>
        <member name="M:Sfs2X.SmartFox.InitCrypto">
            <summary>
            Initializes the connection cryptography to protect all client-server communications with standard TLS protocol.
            </summary>
            
            <remarks>
            This method must be called right after a successful connection, before the login is performed.<br/>
            Once the encryption initialization process is successfully completed, all of the server's data will be encrypted using standard AES 128-bit algorithm, with a secure key served over HTTPS.
            <para/>
            <para/>
            <b>IMPORTANT UNITY REMARKS</b>
            <para/>
            This method is not available when building for WebGL: use WSS connection instead.
            <para/>
            When building for the Web Player, do not use Security.PrefetchSocketPolicy in your code. In fact this method accepts an IP address only, while you should connect to the domain name instead, since the SSL certificate is (typically) bound to that.
            Let the Web Player auto-fetch the cross-domain policy from the default TCP port 843. In order to do this, add a listener for such port in the SFS2X AdminTool's Server Configurator module.
            </remarks>
            
            <example>
            The following example initializes the encrypted communication:
            <code>
            void SomeMethod() {
            	SmartFox sfs = new SmartFox();
            	
            	sfs.AddEventListener(SFSEvent.CONNECTION, OnConnection);
            	sfs.AddEventListener(SFSEvent.CRYPTO_INIT, OnEncryptionInitialized);
            	
            	sfs.Connect("mysecuredomain.com", 9933);
            }
            
            void OnConnection(BaseEvent evt) {
            	if ((bool)evt.Params["success"])
            	{
            		Console.WriteLine("Connection was established");
            		
            		// Initialize encrypted connection
            		sfs.InitCrypto();
            	}
            	else
            	{
            		Console.WriteLine("Connection failed");
            	}
            }
            
            void OnEncryptionInitialized(BaseEvent evt) {
            	if ((bool)evt.Params["success"])
            	{
            		// Do login
            		sfs.Send( new LoginRequest("FozzieTheBear", "", "SimpleChat") );
            	}
            	else
            	{
            		Console.WriteLine("Encryption initialization failed. Caused by: " + (string)evt.Params["errorMsg"]);
            	}
            }
            </code>
            </example>
            
            <seealso cref="F:Sfs2X.Core.SFSEvent.CRYPTO_INIT"/>
        </member>
        <member name="P:Sfs2X.SmartFox.IsJoining">
            <exclude/>
        </member>
        <member name="P:Sfs2X.SmartFox.SessionToken">
            <summary>
            Returns the unique session token of the client.
            </summary>
            
            <remarks>
            The session token is a string sent by the server to the client after the initial handshake.
            It is required as mean of identification when uploading files to the server.
            </remarks>
            
            <seealso cref="P:Sfs2X.SmartFox.HttpUploadURI"/>
        </member>
        <member name="P:Sfs2X.SmartFox.Dispatcher">
            <exclude/>
        </member>
        <member name="P:Sfs2X.SmartFox.ThreadSafeMode">
            <summary>
            Sets the API to run with an event queue that needs to be processed by the client.
            </summary>
            
            <remarks>
            <b>IMPORTANT</b>: by default this property is set to <c>true</c>. When developing native applications/games for .Net or Universal Windows Platform, always remember to set this property to <c>false</c> explicitly!
            </remarks>
            
            <seealso cref="M:Sfs2X.SmartFox.ProcessEvents"/>
        </member>
        <member name="M:Sfs2X.SmartFox.GetReconnectionSeconds">
            <exclude/>
        </member>
        <member name="M:Sfs2X.SmartFox.SetReconnectionSeconds(System.Int32)">
            <exclude/>
        </member>
        <member name="M:Sfs2X.SmartFox.Send(Sfs2X.Requests.IRequest)">
            <summary>
            Sends a request to the server.  
            </summary>
            
            <remarks>
            All the available request objects can be found under the <see cref="N:Sfs2X.Requests"/> namespace. 
            </remarks>
            
            <param name="request">A request object.</param>
            
            <example>
            The following example sends a login request:
            <code>
            sfs.Send( new LoginRequest("KermitTheFrog", "KermitPass", "TheMuppetZone") );
            </code>
            </example>
            
            <example>
            The following example sends a login request:
            <code>
            sfs.Send( new JoinRoomRequest("Lobby") );
            </code>
            </example>
            
            <example>
            The following example creates an object containing some parameters and sends it to the server-side Extension.
            <code>
            ISFSObject parameters = SFSObject.NewInstance();
            parameters.SetInt("x", 10);
            parameters.SetInt("y", 37);
            sfs.Send( new ExtensionRequest("setPosition", parameters) );
            </code>
            </example>
        </member>
        <member name="M:Sfs2X.SmartFox.LoadConfig(System.String,System.Boolean)">
            <summary>
            Loads the client configuration file.
            </summary>
            
            <remarks>
            The SmartFox instance can be configured through an external xml configuration file loaded at run-time.
            By default, this method loads a file named "sfs-config.xml", placed in the same folder of the application file.<br/>
            If the <i>connectOnSuccess</i> parameter is set to <c>true</c>, on loading completion the <see cref="M:Sfs2X.SmartFox.Connect(System.String,System.Int32)"/> method is automatically called by the API, otherwise the <see cref="F:Sfs2X.Core.SFSEvent.CONFIG_LOAD_SUCCESS"/> event is dispatched.
            In case of loading error, the <see cref="F:Sfs2X.Core.SFSEvent.CONFIG_LOAD_FAILURE"/> event id fired.
            <para/>
            The external xml configuration file has the following structure:
            			<code>
                            &lt;SmartFoxConfig&gt;
                                
                                &lt;!-- required --&gt;
                                &lt;host&gt;localhost&lt;/host&gt;
                                
                                &lt;!-- required --&gt;
                                &lt;port&gt;9933&lt;/port&gt;
                                
                                &lt;udpHost&gt;localhost&lt;/udpHost&gt;
                                &lt;udpPort&gt;9933&lt;/udpPort&gt;
                                
                                &lt;zone&gt;BasicExamples&lt;/zone&gt;
                                &lt;debug&gt;true&lt;/debug&gt;
                                
                                &lt;httpPort&gt;8080&lt;/httpPort&gt;
                                &lt;httpsPort&gt;8443&lt;/httpsPort&gt;
                                
                                &lt;blueBox&gt;
                                    &lt;isActive&gt;true&lt;/isActive&gt;
                                    &lt;useHttps&gt;false&lt;/useHttps&gt;
                                    &lt;pollingRate&gt;500&lt;/pollingRate&gt;
                                    
                                    &lt;proxy&gt;
                                        &lt;host&gt;&lt;/host&gt;
                                        &lt;port&gt;&lt;/port&gt;
                                        &lt;userName&gt;&lt;/userName&gt;
                                        &lt;password&gt;&lt;/password&gt;
                                        &lt;bypassLocal&gt;true&lt;/bypassLocal&gt;
                                    &lt;/proxy&gt;
                                &lt;/blueBox&gt;    
                            &lt;/SmartFoxConfig&gt;
            			</code>
            </remarks>
            
            <param name="filePath">(default: sfs-config.xml) Filename of the external XML configuration, including its path relative to the folder of the application file.</param>
            <param name="connectOnSuccess">(default: true) A flag indicating if the connection to SmartFoxServer must be attempted upon configuration loading completion.</param>
            
            <example>
            The following example shows how to load an external configuration file:
            <code>
            void SomeMethod() {
            	sfs.AddEventListener(SFSEvent.CONFIG_LOAD_SUCCESS, OnConfigLoadSuccessHandler);
            	sfs.AddEventListener(SFSEvent.CONFIG_LOAD_FAILURE, OnConfigLoadFailureHandler);
            	
            	sfs.LoadConfig("testEnvironmentConfig.xml", false);
            }
            
            void OnConfigLoadSuccessHandler(BaseEvent evt) {
            	Console.WriteLine("Config file loaded, now connecting...");
            	sfs.Connect(sfs.IpAddress, sfs.Port);
            }
            		
            void OnConfigLoadFailureHandler(BaseEvent evt) {
            	Console.WriteLine("Failed loading config file: " + evt.Params["message"]);
            }
            </code>
            </example>
            
            <seealso cref="M:Sfs2X.SmartFox.Connect(System.String,System.Int32)"/>
            <seealso cref="F:Sfs2X.Core.SFSEvent.CONFIG_LOAD_SUCCESS"/>
            <seealso cref="F:Sfs2X.Core.SFSEvent.CONFIG_LOAD_FAILURE"/>
        </member>
        <member name="M:Sfs2X.SmartFox.LoadConfig(System.String)">
            <summary>
            See <see cref="M:Sfs2X.SmartFox.LoadConfig(System.String,System.Boolean)"/>.
            </summary>
        </member>
        <member name="M:Sfs2X.SmartFox.LoadConfig(System.Boolean)">
            <summary>
            See <see cref="M:Sfs2X.SmartFox.LoadConfig(System.String,System.Boolean)"/>.
            </summary>
        </member>
        <member name="M:Sfs2X.SmartFox.LoadConfig">
            <summary>
            See <see cref="M:Sfs2X.SmartFox.LoadConfig(System.String,System.Boolean)"/>.
            </summary>
        </member>
        <member name="M:Sfs2X.SmartFox.AddLogListener(Sfs2X.Logging.LogLevel,Sfs2X.Core.EventListenerDelegate)">
            <summary>
            Registers a delegate method for log messages callbacks.
            </summary>
            
            <remarks>
            Calling this method is just like calling the <see cref="M:Sfs2X.Logging.Logger.AddEventListener(Sfs2X.Logging.LogLevel,Sfs2X.Core.EventListenerDelegate)">Logger.AddEventListener</see> method directly,
            but in addition the <see cref="P:Sfs2X.Logging.Logger.EnableEventDispatching">Logger.EnableEventDispatching</see> property is automatically set to <c>true</c>. 
            </remarks>
            
            <param name="logLevel">The level of the log events to register a listener for.</param>
            <param name="eventListener">The event listener to register.</param>
            
            <example>
            <code>
            void SomeMethod() {
            	sfs.AddLogListener(LogLevel.INFO, OnInfoLogMessage);
            	sfs.AddLogListener(LogLevel.WARN, OnWarnLogMessage);
            }
            
            void OnInfoLogMessage(BaseEvent evt) {
            	string message = (string)evt.Params["message"];
            	Console.WriteLine("[SFS2X INFO] " + message);                       // .Net / Unity
            	System.Diagnostics.Debug.WriteLine("[SFS2X INFO] " + message);      // UWP
            }
            
            void OnWarnLogMessage(BaseEvent evt) {
            	string message = (string)evt.Params["message"];
            	Console.WriteLine("[SFS2X WARN] " + message);                       // .Net / Unity
            	System.Diagnostics.Debug.WriteLine("[SFS2X WARN] " + message);      // UWP
            }
            </code>
            </example>
            
            <seealso cref="M:Sfs2X.Logging.Logger.AddEventListener(Sfs2X.Logging.LogLevel,Sfs2X.Core.EventListenerDelegate)"/>
        </member>
        <member name="M:Sfs2X.SmartFox.RemoveLogListener(Sfs2X.Logging.LogLevel,Sfs2X.Core.EventListenerDelegate)">
            <summary>
            Removes a delegate method for log messages callbacks.
            </summary>
            
            <remarks>
            Calling this method is just like calling the <see cref="M:Sfs2X.Logging.Logger.RemoveEventListener(Sfs2X.Logging.LogLevel,Sfs2X.Core.EventListenerDelegate)">Logger.RemoveEventListener</see> method directly. 
            </remarks>
            
            <param name="logLevel">The level of the log events to remove the listener for.</param>
            <param name="eventListener">The event listener to remove.</param>
            
            <seealso cref="M:Sfs2X.Logging.Logger.RemoveEventListener(Sfs2X.Logging.LogLevel,Sfs2X.Core.EventListenerDelegate)"/>
        </member>
        <member name="M:Sfs2X.SmartFox.AddJoinedRoom(Sfs2X.Entities.Room)">
            <exclude/>
        </member>
        <member name="M:Sfs2X.SmartFox.RemoveJoinedRoom(Sfs2X.Entities.Room)">
            <exclude/>
        </member>
        <member name="P:Sfs2X.SmartFox.NodeId">
            <summary>
            <b>[CLUSTER]</b> The identifier of the cluster node which the current SmartFox instance is connected to. If the instance is not connected, a null value is returned.
            </summary>
        </member>
        <member name="M:Sfs2X.SmartFox.HandleHandShake(Sfs2X.Core.BaseEvent)">
            <exclude/>
        </member>
        <member name="M:Sfs2X.SmartFox.HandleLogin(Sfs2X.Core.BaseEvent)">
            <exclude/>
        </member>
        <member name="M:Sfs2X.SmartFox.HandleClientDisconnection(System.String,System.Boolean)">
            <exclude/>
        </member>
        <member name="M:Sfs2X.SmartFox.HandleLogout">
            <exclude/>
        </member>
        <member name="M:Sfs2X.SmartFox.HandleReconnectionFailure">
            <exclude/>
        </member>
        <member name="M:Sfs2X.SmartFox.ProcessEvents">
            <summary>
            Tells the API to process all event queues and execute the delegate callbacks.
            </summary>
            
            <remarks>
            This method must be called by the client application to maintain thread safety, in conjunction with the ThreadSafeMode property being set to <c>true</c>.<br/>
            Typically this method is called in Unity's MonoBehavior.Update method.
            </remarks>
            
            <example>
            <code>
            void FixedUpdate() {
            	sfs.ProcessEvents();
            }
            </code>
            </example>
            
            <seealso cref="P:Sfs2X.SmartFox.ThreadSafeMode"/>
        </member>
        <member name="M:Sfs2X.SmartFox.AddEventListener(System.String,Sfs2X.Core.EventListenerDelegate)">
            <summary>
            Adds a delegate to a given API event type that will be used for callbacks.
            </summary>
            
            <param name="eventType">The name of the <see cref="T:Sfs2X.Core.SFSEvent"/> to get callbacks on.</param>
            <param name="listener">The delegate method to register.</param>
            
            <example>
            <code>
            void SomeMethod() {
            	sfs.AddEventListener(SFSEvent.CONNECTION, OnConnection);
            }
            
            public void OnConnection(BaseEvent evt) {
            	bool success = (bool)evt.Params["success"];
            	string error = (string)evt.Params["error"];
            	Debug.Log("On Connection callback got: " + success + " (error : " + error + ")");
            }
            </code>
            </example>
            
            <seealso cref="T:Sfs2X.Core.SFSEvent"/>
            <seealso cref="M:Sfs2X.SmartFox.RemoveEventListener(System.String,Sfs2X.Core.EventListenerDelegate)"/>
        </member>
        <member name="M:Sfs2X.SmartFox.RemoveEventListener(System.String,Sfs2X.Core.EventListenerDelegate)">
            <summary>
            Removes a delegate registration for a given API event.
            </summary>
            
            <param name="eventType">The SFSEvent to remove callbacks on.</param>
            <param name="listener">The delegate method to unregister.</param>
            
            <seealso cref="M:Sfs2X.SmartFox.RemoveAllEventListeners"/>
            <seealso cref="M:Sfs2X.SmartFox.AddEventListener(System.String,Sfs2X.Core.EventListenerDelegate)"/>
        </member>
        <member name="M:Sfs2X.SmartFox.RemoveAllEventListeners">
            <summary>
            Removes all event listeners.
            </summary>
            
            <remarks>
            Please note that log delegates need to be removed separately using the <see cref="M:Sfs2X.SmartFox.RemoveEventListener(System.String,Sfs2X.Core.EventListenerDelegate)"/> method.
            </remarks>
            
            <seealso cref="M:Sfs2X.SmartFox.RemoveEventListener(System.String,Sfs2X.Core.EventListenerDelegate)"/>
        </member>
        <member name="T:Sfs2X.Controllers.ExtensionController">
            @private 
        </member>
        <member name="T:Sfs2X.Controllers.SystemController">
            @private 
        </member>
        <member name="T:Sfs2X.Core.BaseEvent">
            <summary>
            This is the base class of all the events dispatched by the SmartFoxServer 2X C# API.
            </summary>
            
            <seealso cref="T:Sfs2X.Core.SFSEvent"/>
            <seealso cref="T:Sfs2X.Core.SFSBuddyEvent"/>
        </member>
        <member name="F:Sfs2X.Core.BaseEvent.arguments">
            <exclude/>
        </member>
        <member name="F:Sfs2X.Core.BaseEvent.type">
            <exclude/>
        </member>
        <member name="F:Sfs2X.Core.BaseEvent.target">
            <exclude/>
        </member>
        <member name="P:Sfs2X.Core.BaseEvent.Type">
            <exclude/>
        </member>
        <member name="P:Sfs2X.Core.BaseEvent.Params">
            <summary>
            A Dictionary containing the event's parameters.
            </summary>
        </member>
        <member name="P:Sfs2X.Core.BaseEvent.Target">
            <exclude/>
        </member>
        <member name="M:Sfs2X.Core.BaseEvent.ToString">
            <exclude/>
        </member>
        <member name="M:Sfs2X.Core.BaseEvent.Clone">
            <exclude/>
        </member>
        <member name="M:Sfs2X.Core.BaseEvent.#ctor(System.String)">
            <exclude/>
        </member>
        <member name="M:Sfs2X.Core.BaseEvent.#ctor(System.String,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <exclude/>
        </member>
        <member name="T:Sfs2X.Core.EventListenerDelegate">
            <exclude/>
        </member>
        <member name="T:Sfs2X.Core.EventDispatcher">
            <exclude/>
        </member>
        <member name="T:Sfs2X.Core.SFSBuddyEvent">
            <summary>
            This class represents all the events related to the Buddy List system dispatched by the SmartFoxServer 2X C# API.
            </summary>
            
            <seealso cref="M:Sfs2X.SmartFox.AddEventListener(System.String,Sfs2X.Core.EventListenerDelegate)"/>
        </member>
        <member name="F:Sfs2X.Core.SFSBuddyEvent.BUDDY_LIST_INIT">
            <summary>
            Dispatched if the Buddy List system is successfully initialized.
            </summary>
            
            <remarks>
            This event is fired in response to the <see cref="T:Sfs2X.Requests.Buddylist.InitBuddyListRequest"/> request in case the operation is executed successfully.
            <para/>
            After the Buddy List system initialization, the user returns to his previous custom state (if any - see <see cref="P:Sfs2X.Entities.Managers.IBuddyManager.MyState">IBuddyManager.MyState</see> property).
            His online/offline state, his nickname and his persistent Buddy Variables are all loaded and broadcast in the system.
            In particular, the online state (see <see cref="P:Sfs2X.Entities.Managers.IBuddyManager.MyOnlineState">IBuddyManager.MyOnlineState</see> property) determines if the user will appear online or not to other users who have him in their buddies list.
            <para/>
            The <see cref="P:Sfs2X.Core.BaseEvent.Params"/> object contains the following parameters:
            <list type="table">
              <listheader>
                <term>Parameter</term>
                <description>Description</description>
              </listheader>
              <item>
                <term>buddyList</term>
                <description>(<b>List&lt;<see cref="T:Sfs2X.Entities.Buddy"/>&gt;</b>) A list of objects representing all the buddies in the current user's buddies list.</description>
              </item>
              <item>
                <term>myVariables</term>
                <description>(<b>List&lt;<see cref="T:Sfs2X.Entities.Variables.BuddyVariable"/>&gt;</b>) The list of all <see cref="T:Sfs2X.Entities.Variables.BuddyVariable"/> objects associated with the current user.</description>
              </item>
            </list>
            </remarks>
            
            <example>See the <see cref="T:Sfs2X.Requests.Buddylist.InitBuddyListRequest"/> example.</example>
            
            <seealso cref="T:Sfs2X.Entities.Buddy"/>
            <seealso cref="T:Sfs2X.Entities.Variables.BuddyVariable"/>
            <seealso cref="T:Sfs2X.Requests.Buddylist.InitBuddyListRequest"/>
        </member>
        <member name="F:Sfs2X.Core.SFSBuddyEvent.BUDDY_ADD">
            <summary>
            Dispatched when a buddy is added successfully to the current user's buddies list.
            </summary>
            
            <remarks>
            This event is fired in response to the <see cref="T:Sfs2X.Requests.Buddylist.AddBuddyRequest"/> request in case the operation is executed successfully.
            <para/>
            The <see cref="P:Sfs2X.Core.BaseEvent.Params"/> object contains the following parameters:
            <list type="table">
              <listheader>
                <term>Parameter</term>
                <description>Description</description>
              </listheader>
              <item>
                <term>buddy</term>
                <description>(<b><see cref="T:Sfs2X.Entities.Buddy"/></b>) The object corresponding to the buddy that was added.</description>
              </item>
            </list>
            </remarks>
            
            <example>See the <see cref="T:Sfs2X.Requests.Buddylist.AddBuddyRequest"/> example.</example>
            
            <seealso cref="T:Sfs2X.Entities.SFSBuddy"/>
            <seealso cref="T:Sfs2X.Requests.Buddylist.AddBuddyRequest"/>
        </member>
        <member name="F:Sfs2X.Core.SFSBuddyEvent.BUDDY_REMOVE">
            <summary>
            Dispatched when a buddy is removed successfully from the current user's buddies list.
            </summary>
            
            <remarks>
            This event is fired in response to the <see cref="T:Sfs2X.Requests.Buddylist.RemoveBuddyRequest"/> request in case the operation is executed successfully.
            <para/>
            The <see cref="P:Sfs2X.Core.BaseEvent.Params"/> object contains the following parameters:
            <list type="table">
              <listheader>
                <term>Parameter</term>
                <description>Description</description>
              </listheader>
              <item>
                <term>buddy</term>
                <description>(<b><see cref="T:Sfs2X.Entities.Buddy"/></b>) The object corresponding to the buddy that was removed.</description>
              </item>
            </list>
            </remarks>
            
            <example>See the <see cref="T:Sfs2X.Requests.Buddylist.RemoveBuddyRequest"/> example.</example>
            
            <seealso cref="T:Sfs2X.Entities.Buddy"/>
            <seealso cref="T:Sfs2X.Requests.Buddylist.RemoveBuddyRequest"/>
        </member>
        <member name="F:Sfs2X.Core.SFSBuddyEvent.BUDDY_BLOCK">
            <summary>
            Dispatched when a buddy is blocked or unblocked successfully by the current user.
            </summary>
            
            <remarks>
            This event is fired in response to the <see cref="T:Sfs2X.Requests.Buddylist.BlockBuddyRequest"/> request in case the operation is executed successfully.
            <para/>
            The <see cref="P:Sfs2X.Core.BaseEvent.Params"/> object contains the following parameters:
            <list type="table">
              <listheader>
                <term>Parameter</term>
                <description>Description</description>
              </listheader>
              <item>
                <term>buddy</term>
                <description>(<b><see cref="T:Sfs2X.Entities.Buddy"/></b>) The object corresponding to the buddy that was blocked/unblocked.</description>
              </item>
            </list>
            </remarks>
            
            <example>See the <see cref="T:Sfs2X.Requests.Buddylist.BlockBuddyRequest"/> example.</example>
            
            <seealso cref="T:Sfs2X.Entities.Buddy"/>
            <seealso cref="T:Sfs2X.Requests.Buddylist.BlockBuddyRequest"/>
        </member>
        <member name="F:Sfs2X.Core.SFSBuddyEvent.BUDDY_ERROR">
            <summary>
            Dispatched if an error occurs while executing a request related to the Buddy List system.
            </summary>
            
            <remarks>
            For example, this event is fired in response to the <see cref="T:Sfs2X.Requests.Buddylist.AddBuddyRequest"/> request, the <see cref="T:Sfs2X.Requests.Buddylist.BlockBuddyRequest"/>, etc.
            <para/>
            The <see cref="P:Sfs2X.Core.BaseEvent.Params"/> object contains the following parameters:
            <list type="table">
              <listheader>
                <term>Parameter</term>
                <description>Description</description>
              </listheader>
              <item>
                <term>errorMessage</term>
                <description>(<b>string</b>) The message which describes the error.</description>
              </item>
              <item>
                <term>errorCode</term>
                <description>(<b>short</b>) The error code.</description>
              </item>
            </list>
            </remarks>
            
            <example>See the <see cref="T:Sfs2X.Requests.Buddylist.InitBuddyListRequest"/> example.</example>
        </member>
        <member name="F:Sfs2X.Core.SFSBuddyEvent.BUDDY_ONLINE_STATE_UPDATE">
            <summary>
            Dispatched when a buddy in the current user's buddies list changes his online state in the Buddy List system.
            </summary>
            
            <remarks>
            This event is fired in response to the <see cref="T:Sfs2X.Requests.Buddylist.GoOnlineRequest"/> request to those who have the user as a buddy, but also to the user himself.
            As in this case the value of the <em>buddy</em> parameter is <c>null</c> (because the user is not buddy to himself of course),
            the <em>isItMe</em> parameter should be used to check if the current user is the one who changed his own online state.
            <para/>
            The <see cref="P:Sfs2X.Core.BaseEvent.Params"/> object contains the following parameters:
            <list type="table">
              <listheader>
                <term>Parameter</term>
                <description>Description</description>
              </listheader>
              <item>
                <term>buddy</term>
                <description>(<b><see cref="T:Sfs2X.Entities.Buddy"/></b>) The object representing the buddy who changed his own online state. If the <em>isItMe</em> parameter is <c>true</c>, the value of this parameter is <c>null</c> (because a user is not buddy to himself).</description>
              </item>
              <item>
                <term>isItMe</term>
                <description>(<b>bool</b>) <c>true</c> if the online state was changed by the current user himself (in this case this event is a sort of state change confirmation).</description>
              </item>
            </list>
            </remarks>
            
            <example>See the <see cref="T:Sfs2X.Requests.Buddylist.GoOnlineRequest"/> example.</example>
            
            <seealso cref="T:Sfs2X.Entities.Buddy"/>
            <seealso cref="T:Sfs2X.Requests.Buddylist.GoOnlineRequest"/>
        </member>
        <member name="F:Sfs2X.Core.SFSBuddyEvent.BUDDY_VARIABLES_UPDATE">
            <summary>
            Dispatched when a buddy in the current user's buddies list updates one or more Buddy Variables.
            </summary>
            
            <remarks>
            This event is fired in response to the <see cref="T:Sfs2X.Requests.Buddylist.SetBuddyVariablesRequest"/> request to those who have the user as a buddy, but also to the user himself.
            As in this case the value of the <em>buddy</em> parameter is <c>null</c> (because the user is not buddy to himself of course),
            the <em>isItMe</em> parameter should be used to check if the current user is the one who updated his own Buddy Variables.
            <para/>
            The <see cref="P:Sfs2X.Core.BaseEvent.Params"/> object contains the following parameters:
            <list type="table">
              <listheader>
                <term>Parameter</term>
                <description>Description</description>
              </listheader>
              <item>
                <term>buddy</term>
                <description>(<b><see cref="T:Sfs2X.Entities.Buddy"/></b>) The object representing the buddy who updated his own Buddy Variables. If the <em>isItMe</em> parameter is <c>true</c>, the value of this parameter is <c>null</c> (because a user is not buddy to himself).</description>
              </item>
              <item>
                <term>changedVars</term>
                <description>(<b>IList&lt;string&gt;</b>) The list of names of the Buddy Variables that were changed (or created for the first time).</description>
              </item>
              <item>
                <term>isItMe</term>
                <description>(<b>bool</b>) <c>true</c> if the Buddy Variables were updated by the current user himself (in this case this event is a sort of update confirmation).</description>
              </item>
            </list>
            </remarks>
            
            <example>See the <see cref="T:Sfs2X.Requests.Buddylist.SetBuddyVariablesRequest"/> example.</example>
            
            <seealso cref="T:Sfs2X.Entities.Buddy"/>
            <seealso cref="T:Sfs2X.Requests.Buddylist.SetBuddyVariablesRequest"/>
        </member>
        <member name="F:Sfs2X.Core.SFSBuddyEvent.BUDDY_MESSAGE">
            <summary>
            Dispatched when a message from a buddy is received by the current user.
            </summary>
            
            <remarks>
            This event is fired in response to the <see cref="T:Sfs2X.Requests.Buddylist.BuddyMessageRequest"/> request.
            <para/>
            The same event is fired by the sender's client too, so that the user is aware that the message was delivered successfully to the recipient, and it can be displayed in the chat area keeping the correct message ordering.
            As in this case the value of the buddy parameter is <c>null</c> (because, being the sender, the user is not buddy to himself of course), there is no default way to know who the message was originally sent to.
            As this information can be useful in scenarios where the sender is chatting with more than one buddy at the same time in separate windows or tabs (and we need to write his own message in the proper one),
            the data parameter can be used to store, for example, the id of the recipient buddy.
            <para/>
            The <see cref="P:Sfs2X.Core.BaseEvent.Params"/> object contains the following parameters:
            <list type="table">
              <listheader>
                <term>Parameter</term>
                <description>Description</description>
              </listheader>
              <item>
                <term>buddy</term>
                <description>(<b><see cref="T:Sfs2X.Entities.Buddy"/></b>) The object representing the message sender. If the <em>isItMe</em> parameter is <c>true</c>, the value of this parameter is <c>null</c> (because a user is not buddy to himself).</description>
              </item>
              <item>
                <term>isItMe</term>
                <description>(<b>bool</b>) <c>true</c> if the message sender is the current user himself (in this case this event is a sort of message delivery confirmation).</description>
              </item>
              <item>
                <term>message</term>
                <description>(<b>string</b>) The message text.</description>
              </item>
              <item>
                <term>data</term>
                <description>(<b><see cref="T:Sfs2X.Entities.Data.ISFSObject"/></b>) An object containing additional custom parameters (e.g. the message color, an emoticon id, etc).</description>
              </item>
            </list>
            </remarks>
            
            <example>See the <see cref="T:Sfs2X.Requests.Buddylist.BuddyMessageRequest"/> example.</example>
            
            <seealso cref="T:Sfs2X.Entities.SFSBuddy"/>
            <seealso cref="T:Sfs2X.Requests.Buddylist.BuddyMessageRequest"/>
        </member>
        <member name="M:Sfs2X.Core.SFSBuddyEvent.#ctor(System.String)">
            <exclude/>
        </member>
        <member name="M:Sfs2X.Core.SFSBuddyEvent.#ctor(System.String,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <exclude/>
        </member>
        <member name="T:Sfs2X.Core.SFSEvent">
            <summary>
            This class represents most of the events dispatched by the SmartFoxServer 2X C# API.
            </summary>
            
            <seealso cref="M:Sfs2X.SmartFox.AddEventListener(System.String,Sfs2X.Core.EventListenerDelegate)"/>
            <seealso cref="T:Sfs2X.Core.SFSBuddyEvent"/>
        </member>
        <member name="F:Sfs2X.Core.SFSEvent.HANDSHAKE">
            <exclude/>
        </member>
        <member name="F:Sfs2X.Core.SFSEvent.UDP_INIT">
            <summary>
            Dispatched when the result of the UDP handshake is notified.
            </summary>
            
            <remarks>
            This event is fired in response to a call to the <see cref="M:Sfs2X.SmartFox.InitUDP(System.String,System.Int32)">SmartFox.InitUDP()</see> method.
            <para/>
            The <see cref="P:Sfs2X.Core.BaseEvent.Params"/> object contains the following parameters:
            <list type="table">
              <listheader>
                <term>Parameter</term>
                <description>Description</description>
              </listheader>
              <item>
                <term>success</term>
                <description>(<b>bool</b>) <c>true</c> if UDP connection initialization is successful, <c>false</c> otherwise.</description>
              </item>
            </list>
            </remarks>
            
            <example>See the <see cref="M:Sfs2X.SmartFox.InitUDP(System.String,System.Int32)"/> example.</example>
            
            <seealso cref="M:Sfs2X.SmartFox.InitUDP(System.String,System.Int32)"/>
        </member>
        <member name="F:Sfs2X.Core.SFSEvent.CONNECTION">
            <summary>
            Dispatched when a connection between the client and a SmartFoxServer 2X instance is attempted.
            </summary>
            
            <remarks>
            This event is fired in response to a call to the <see cref="M:Sfs2X.SmartFox.Connect(System.String,System.Int32)"/> method.
            <para/>
            The <see cref="P:Sfs2X.Core.BaseEvent.Params"/> object contains the following parameters:
            <list type="table">
              <listheader>
                <term>Parameter</term>
                <description>Description</description>
              </listheader>
              <item>
                <term>success</term>
                <description>(<b>bool</b>) The connection result: <c>true</c> if a connection was established, <c>false</c> otherwise.</description>
              </item>
            </list>
            </remarks>
            
            <example>See the <see cref="M:Sfs2X.SmartFox.Connect(System.String,System.Int32)"/> example.</example>
            
            <seealso cref="F:Sfs2X.Core.SFSEvent.CONNECTION_RETRY"/>
            <seealso cref="F:Sfs2X.Core.SFSEvent.CONNECTION_RESUME"/>
            <seealso cref="F:Sfs2X.Core.SFSEvent.CONNECTION_LOST"/>
        </member>
        <member name="F:Sfs2X.Core.SFSEvent.PING_PONG">
            <summary>
            Dispatched when a new lag value measurement is available.
            </summary>
            
            <remarks>
            This event is fired when the automatic lag monitoring is turned on by passing true to the <see cref="M:Sfs2X.SmartFox.EnableLagMonitor(System.Boolean,System.Int32,System.Int32)">SmartFox.EnableLagMonitor</see> method.
            <para/>
            The <see cref="P:Sfs2X.Core.BaseEvent.Params"/> object contains the following parameters:
            <list type="table">
              <listheader>
                <term>Parameter</term>
                <description>Description</description>
              </listheader>
              <item>
                <term>lagValue</term>
                <description>(<b>int</b>) The average of the last ten measured lag values, expressed in milliseconds.</description>
              </item>
            </list>
            </remarks>
            
            <seealso cref="M:Sfs2X.SmartFox.EnableLagMonitor(System.Boolean,System.Int32,System.Int32)"/>
        </member>
        <member name="F:Sfs2X.Core.SFSEvent.SOCKET_ERROR">
            <summary>
            Dispatched when a low level socket error is detected, for example bad/inconsistent data.
            </summary>
            
            <remarks>
            The <see cref="P:Sfs2X.Core.BaseEvent.Params"/> object contains the following parameters:
            <list type="table">
              <listheader>
                <term>Parameter</term>
                <description>Description</description>
              </listheader>
              <item>
                <term>errorMessage</term>
                <description>(<b>string</b>) The description of the error.</description>
              </item>
            </list>
            </remarks>
        </member>
        <member name="F:Sfs2X.Core.SFSEvent.CONNECTION_LOST">
            <summary>
            Dispatched when the connection between the client and the SmartFoxServer 2X instance is interrupted.
            </summary>
            
            <remarks>
            This event is fired in response to a call to the <see cref="M:Sfs2X.SmartFox.Disconnect"/> method or when the connection between the client and the server is interrupted for other reasons.
            <para/>
            The <see cref="P:Sfs2X.Core.BaseEvent.Params"/> object contains the following parameters.
            <list type="table">
              <listheader>
                <term>Parameter</term>
                <description>Description</description>
              </listheader>
              <item>
                <term>reason</term>
                <description>(<b>string</b>) The reason of the disconnection, among those available in the <see cref="T:Sfs2X.Util.ClientDisconnectionReason"/> class.</description>
              </item>
            </list>
            </remarks>
            
            <example>
            The following example handles a disconnection event:
            <code>
            void SomeMethod() {
            	sfs.AddEventListener(SFSEvent.OnConnectionLost, OnConnectionLost);
            }
             
            void OnConnectionLost(BaseEvent evt) {
            	Console.WriteLine("Connection was lost, Reason: " + (string)evt.Params["reason"]);                      // .Net / Unity
            	System.Diagnostics.Debug.WriteLine("Connection was lost, Reason: " + (string)evt.Params["reason"]);     // UWP
            }
            </code>
            </example>
            
            <seealso cref="T:Sfs2X.Util.ClientDisconnectionReason"/>
            <seealso cref="F:Sfs2X.Core.SFSEvent.CONNECTION_RETRY"/>
            <seealso cref="F:Sfs2X.Core.SFSEvent.CONNECTION_RESUME"/>
            <seealso cref="F:Sfs2X.Core.SFSEvent.CONNECTION"/>
        </member>
        <member name="F:Sfs2X.Core.SFSEvent.CONNECTION_RETRY">
            <summary>
            Dispatched when the connection between the client and the SmartFoxServer 2X instance is interrupted abruptly while the SmartFoxServer 2X HRC system is available in the Zone.
            </summary>
            
            <remarks>
            The HRC system allows a broken connection to be re-established transparently within a certain amount of time, without losing any of the current application state.
            For example this allows any player to get back to a game without loosing the match because of a sloppy internet connection.<br/>
            When this event is dispatched the API enter a "freeze" mode where no new requests can be sent until the reconnection is successfully performed.
            It is highly recommended to handle this event and freeze the application interface accordingly until the <see cref="F:Sfs2X.Core.SFSEvent.CONNECTION_RESUME"/> event is fired,
            or the reconnection fails and the user is definitely disconnected and the <see cref="F:Sfs2X.Core.SFSEvent.CONNECTION_LOST"/> event is fired.
            <para/>
            No parameters are available for this event object.
            </remarks>
            
            <example>
            The following example shows how to handle a reconnection
            <code>
            void SomeMethod() {
            	sfs.AddEventListener(SFSEvent.CONNECTION_RETRY, OnConnectionRetry);
            	sfs.AddEventListener(SFSEvent.CONNECTION_RESUME, OnConnectionResume);
            	sfs.AddEventListener(SFSEvent.CONNECTION_LOST, OnConnectionLost);
            }
            
            void OnConnectionRetry(BaseEvent evt) {
            	// Freeze your GUI and provide some feedback to the Player
            	...
            }
            
            void OnConnectionResume(BaseEvent evt) {
            	// Unfreeze the GUI and let the player continue with the game
            	...
            }
            
            void OnConnectionLost(BaseEvent evt) {
            	Console.WriteLine("Ouch, connection was lost! Reason: " + (string)evt.Params["reason"]);                        // .Net / Unity
            	System.Diagnostics.Debug.WriteLine("Ouch, connection was lost! Reason: " + (string)evt.Params["reason"]);       // UWP
            }
            </code>
            </example>
            
            <seealso cref="F:Sfs2X.Core.SFSEvent.CONNECTION_LOST"/>
            <seealso cref="F:Sfs2X.Core.SFSEvent.CONNECTION_RESUME"/>
        </member>
        <member name="F:Sfs2X.Core.SFSEvent.CONNECTION_RESUME">
            <summary>
            Dispatched when the connection between the client and the SmartFoxServer 2X instance is re-established after a temporary disconnection,
            while the SmartFoxServer 2X HRC system is available in the Zone.
            </summary>
            
            <remarks>
            The HRC system allows a broken connection to be re-established transparently within a certain amount of time, without losing any of the current application state.
            For example this allows any player to get back to a game without loosing the match because of a sloppy internet connection.<br/>
            When this event is dispatched the application interface should be reverted to the state it had before the disconnection.
            In case the reconnection attempt fails, the <see cref="F:Sfs2X.Core.SFSEvent.CONNECTION_LOST"/> event is fired.
            <para/>
            No parameters are available for this event object.
            </remarks>
            
            <example>See the <see cref="F:Sfs2X.Core.SFSEvent.CONNECTION_RETRY"/> example.</example>
            
            <seealso cref="F:Sfs2X.Core.SFSEvent.CONNECTION_LOST"/>
            <seealso cref="F:Sfs2X.Core.SFSEvent.CONNECTION_RETRY"/>
        </member>
        <member name="F:Sfs2X.Core.SFSEvent.CONNECTION_ATTEMPT_HTTP">
            <summary>
            Dispatched when the client cannot establish a socket connection to the server and the useBlueBox parameter is active in the configuration.
            </summary>
            
            <remarks>
            The event can be used to notify the user that a second connection attempt is running, using the BlueBox (HTTP tunnelling).
            <para/>
            No parameters are available for this event object.
            </remarks>
            
            <seealso cref="F:Sfs2X.Core.SFSEvent.CONNECTION"/>
            <seealso cref="F:Sfs2X.Core.SFSEvent.CONNECTION_LOST"/>
        </member>
        <member name="F:Sfs2X.Core.SFSEvent.CONFIG_LOAD_SUCCESS">
            <summary>
            Dispatched when the external client configuration file is loaded successfully.
            </summary>
            
            <remarks>
            This event is fired in response to a call to the <see cref="M:Sfs2X.SmartFox.LoadConfig(System.String,System.Boolean)"/> method, but only if the <em>connectOnSuccess</em> argument of that method is set to <c>false</c>;
            otherwise the connection is attempted and the related <see cref="F:Sfs2X.Core.SFSEvent.CONNECTION"/> event type is fired.
            <para/>
            No parameters are available for this event object.
            </remarks>
            
            <example>See the <see cref="M:Sfs2X.SmartFox.LoadConfig(System.String,System.Boolean)"/> example.</example>
            
            <seealso cref="F:Sfs2X.Core.SFSEvent.CONFIG_LOAD_FAILURE"/>
            <seealso cref="M:Sfs2X.SmartFox.LoadConfig(System.String,System.Boolean)"/>
        </member>
        <member name="F:Sfs2X.Core.SFSEvent.CONFIG_LOAD_FAILURE">
            <summary>
            Dispatched when an error occurs while loading the external SmartFox configuration file.
            </summary>
            
            <remarks>
            This event is fired in response to a call to the <see cref="M:Sfs2X.SmartFox.LoadConfig(System.String,System.Boolean)"/> method, typically when the configuration file is not found or it isn't accessible (no read permissions).
            <para/>
            No parameters are available for this event object.
            </remarks>
            
            <example>See the <see cref="M:Sfs2X.SmartFox.LoadConfig(System.String,System.Boolean)"/> example.</example>
            
            <seealso cref="F:Sfs2X.Core.SFSEvent.CONFIG_LOAD_SUCCESS"/>
            <seealso cref="M:Sfs2X.SmartFox.LoadConfig(System.String,System.Boolean)"/>
        </member>
        <member name="F:Sfs2X.Core.SFSEvent.LOGIN">
            <summary>
            Dispatched when the current user performs a successful login in a server Zone.
            </summary>
            
            <remarks>
            This event is fired in response to the <see cref="T:Sfs2X.Requests.LoginRequest"/> request.
            <para/>
            The <see cref="P:Sfs2X.Core.BaseEvent.Params"/> object contains the following parameters:
            <list type="table">
              <listheader>
                <term>Parameter</term>
                <description>Description</description>
              </listheader>
              <item>
                <term>user</term>
                <description>(<b><see cref="T:Sfs2X.Entities.User"/></b>) An object representing the user who performed the login.</description>
              </item>
              <item>
                <term>data</term>
                <description>(<b><see cref="T:Sfs2X.Entities.Data.ISFSObject"/></b>) An object containing custom parameters returned by a custom login system, if any.</description>
              </item>
            </list>
            </remarks>
            
            <example>See the <see cref="T:Sfs2X.Requests.LoginRequest"/> example.</example>
            
            <seealso cref="T:Sfs2X.Requests.LoginRequest"/>
            <seealso cref="F:Sfs2X.Core.SFSEvent.LOGIN_ERROR"/>
        </member>
        <member name="F:Sfs2X.Core.SFSEvent.LOGIN_ERROR">
            <summary>
            Dispatched if an error occurs while the user login is being performed.
            </summary>
            
            <remarks>
            This event is fired in response to the <see cref="T:Sfs2X.Requests.LoginRequest"/> request in case the operation failed.
            <para/>
            The <see cref="P:Sfs2X.Core.BaseEvent.Params"/> object contains the following parameters:
            <list type="table">
              <listheader>
                <term>Parameter</term>
                <description>Description</description>
              </listheader>
              <item>
                <term>errorMessage</term>
                <description>(<b>string</b>) A message containing the description of the error.</description>
              </item>
              <item>
                <term>errorCode</term>
                <description>(<b>short</b>) The error code.</description>
              </item>
            </list>
            </remarks>
            
            <example>See the <see cref="T:Sfs2X.Requests.LoginRequest"/> example.</example>
            
            <seealso cref="F:Sfs2X.Core.SFSEvent.LOGIN"/>
            <seealso cref="T:Sfs2X.Requests.LoginRequest"/>
        </member>
        <member name="F:Sfs2X.Core.SFSEvent.LOGOUT">
            <summary>
            Dispatched when the current user performs logs out of the server Zone.
            </summary>
            
            <remarks>
            This event is fired in response to the <see cref="T:Sfs2X.Requests.LogoutRequest"/> request.
            <para/>
            No parameters are available for this event object.
            </remarks>
            
            <example>See the <see cref="T:Sfs2X.Requests.LogoutRequest"/> example.</example>
            
            <seealso cref="T:Sfs2X.Requests.LogoutRequest"/>
        </member>
        <member name="F:Sfs2X.Core.SFSEvent.ROOM_ADD">
            <summary>
            Dispatched when a new Room is created inside the Zone under any of the Room Groups that the client subscribed.
            </summary>
            
            <remarks>
            This event is fired in response to the <see cref="T:Sfs2X.Requests.CreateRoomRequest"/> and <see cref="T:Sfs2X.Requests.Game.CreateSFSGameRequest"/> requests in case the operation is executed successfully.
            <para/>
            The <see cref="P:Sfs2X.Core.BaseEvent.Params"/> object contains the following parameters:
            <list type="table">
              <listheader>
                <term>Parameter</term>
                <description>Description</description>
              </listheader>
              <item>
                <term>room</term>
                <description>(<b><see cref="T:Sfs2X.Entities.Room"/></b>) An object representing the Room that was created.</description>
              </item>
            </list>
            </remarks>
            
            <example>See the <see cref="T:Sfs2X.Requests.CreateRoomRequest"/> example.</example>
            
            <seealso cref="F:Sfs2X.Core.SFSEvent.ROOM_CREATION_ERROR"/>
            <seealso cref="T:Sfs2X.Requests.CreateRoomRequest"/>
            <seealso cref="T:Sfs2X.Requests.Game.CreateSFSGameRequest"/>
        </member>
        <member name="F:Sfs2X.Core.SFSEvent.ROOM_REMOVE">
            <summary>
            Dispatched when a Room belonging to one of the Groups subscribed by the client is removed from the Zone.
            </summary>
            
            <remarks>
            The <see cref="P:Sfs2X.Core.BaseEvent.Params"/> object contains the following parameters:
            <list type="table">
              <listheader>
                <term>Parameter</term>
                <description>Description</description>
              </listheader>
              <item>
                <term>room</term>
                <description>(<b><see cref="T:Sfs2X.Entities.Room"/></b>) An object representing the Room that was removed.</description>
              </item>
            </list>
            </remarks>
        </member>
        <member name="F:Sfs2X.Core.SFSEvent.ROOM_CREATION_ERROR">
            <summary>
            Dispatched if an error occurs while creating a new Room.
            </summary>
            
            <remarks>
            This event is fired in response to the <see cref="T:Sfs2X.Requests.CreateRoomRequest"/> and <see cref="T:Sfs2X.Requests.Game.CreateSFSGameRequest"/> requests in case the operation failed.
            <para/>
            The <see cref="P:Sfs2X.Core.BaseEvent.Params"/> object contains the following parameters:
            <list type="table">
              <listheader>
                <term>Parameter</term>
                <description>Description</description>
              </listheader>
              <item>
                <term>errorMessage</term>
                <description>(<b>string</b>) A message containing the description of the error.</description>
              </item>
              <item>
                <term>errorCode</term>
                <description>(<b>short</b>) The error code.</description>
              </item>
            </list>
            </remarks>
            
            <example>See the <see cref="T:Sfs2X.Requests.CreateRoomRequest"/> example.</example>
            
            <seealso cref="F:Sfs2X.Core.SFSEvent.ROOM_ADD"/>
            <seealso cref="T:Sfs2X.Requests.CreateRoomRequest"/>
            <seealso cref="T:Sfs2X.Requests.Game.CreateSFSGameRequest"/>
        </member>
        <member name="F:Sfs2X.Core.SFSEvent.ROOM_JOIN">
            <summary>
            Dispatched when a Room is joined by the current user.
            </summary>
            
            <remarks>
            This event is fired in response to the <see cref="T:Sfs2X.Requests.JoinRoomRequest"/> and <see cref="T:Sfs2X.Requests.Game.QuickJoinGameRequest"/> requests in case the operation is executed successfully.
            <para/>
            The <see cref="P:Sfs2X.Core.BaseEvent.Params"/> object contains the following parameters:
            <list type="table">
              <listheader>
                <term>Parameter</term>
                <description>Description</description>
              </listheader>
              <item>
                <term>room</term>
                <description>(<b><see cref="T:Sfs2X.Entities.Room"/></b>) An object representing the Room that was joined.</description>
              </item>
            </list>
            </remarks>
            
            <example>See the <see cref="T:Sfs2X.Requests.JoinRoomRequest"/> example.</example>
            
            <seealso cref="F:Sfs2X.Core.SFSEvent.ROOM_JOIN_ERROR"/>
            <seealso cref="T:Sfs2X.Requests.JoinRoomRequest"/>
            <seealso cref="T:Sfs2X.Requests.Game.QuickJoinGameRequest"/>
        </member>
        <member name="F:Sfs2X.Core.SFSEvent.ROOM_JOIN_ERROR">
            <summary>
            Dispatched when an error occurs while the current user is trying to join a Room.
            </summary>
            
            <remarks>
            This event is fired in response to the <see cref="T:Sfs2X.Requests.JoinRoomRequest"/> request in case the operation failed.
            <para/>
            The <see cref="P:Sfs2X.Core.BaseEvent.Params"/> object contains the following parameters:
            <list type="table">
              <listheader>
                <term>Parameter</term>
                <description>Description</description>
              </listheader>
              <item>
                <term>errorMessage</term>
                <description>(<b>string</b>) A message containing the description of the error.</description>
              </item>
              <item>
                <term>errorCode</term>
                <description>(<b>short</b>) The error code.</description>
              </item>
            </list>
            </remarks>
            
            <example>See the <see cref="T:Sfs2X.Requests.JoinRoomRequest"/> example.</example>
            
            <seealso cref="F:Sfs2X.Core.SFSEvent.ROOM_JOIN"/>
            <seealso cref="T:Sfs2X.Requests.JoinRoomRequest"/>
        </member>
        <member name="F:Sfs2X.Core.SFSEvent.USER_ENTER_ROOM">
            <summary>
            Dispatched when one of the Rooms joined by the current user is entered by another user.
            </summary>
            
            <remarks>
            This event is caused by a <see cref="T:Sfs2X.Requests.JoinRoomRequest"/> request;
            it might be fired or not depending on the Room configuration defined upon its creation (see the <see cref="P:Sfs2X.Requests.RoomSettings.Events">RoomSettings.Events</see> setting).
            <para/>
            <b>NOTE</b>: if the Room is of type <see cref="T:Sfs2X.Entities.MMORoom">MMORoom</see>, this event is never fired and it is substituted by the <see cref="F:Sfs2X.Core.SFSEvent.PROXIMITY_LIST_UPDATE"/> event.
            <para/>
            The <see cref="P:Sfs2X.Core.BaseEvent.Params"/> object contains the following parameters:
            <list type="table">
              <listheader>
                <term>Parameter</term>
                <description>Description</description>
              </listheader>
              <item>
                <term>user</term>
                <description>(<b><see cref="T:Sfs2X.Entities.User"/></b>) An object representing the user who joined the Room.</description>
              </item>
              <item>
                <term>room</term>
                <description>(<b><see cref="T:Sfs2X.Entities.Room"/></b>) An object representing the Room that was joined by a user.</description>
              </item>
            </list>
            </remarks>
            
            <example>
            The following example shows how to handle this event type:
            <code>
            void SomeMethod() {
            	sfs.AddEventListener(SFSEvent.USER_ENTER_ROOM, OnUserEnterRoom);
            }
            
            void OnUserEnterRoom(BaseEvent evt) {
            	Room room = (Room)evt.Params["room"];
            	User user = (User)evt.Params["user"];
            
            	Console.WriteLine("User: " + user.Name + " has just joined Room: " + room.Name);                        // .Net / Unity
            	System.Diagnostics.Debug.WriteLine("User: " + user.Name + " has just joined Room: " + room.Name);       // UWP
            }
            </code>
            </example>
            
            <seealso cref="F:Sfs2X.Core.SFSEvent.USER_EXIT_ROOM"/>
            <seealso cref="F:Sfs2X.Core.SFSEvent.ROOM_JOIN"/>
            <seealso cref="T:Sfs2X.Requests.JoinRoomRequest"/>
        </member>
        <member name="F:Sfs2X.Core.SFSEvent.USER_EXIT_ROOM">
            <summary>
            Dispatched when one of the Rooms joined by the current user is left by another user, or by the current user himself.
            </summary>
            
            <remarks>
            This event is caused by a <see cref="T:Sfs2X.Requests.LeaveRoomRequest"/> request;
            it might be fired or not depending on the Room configuration defined upon its creation (see the <see cref="P:Sfs2X.Requests.RoomSettings.Events">RoomSettings.Events</see> setting).
            <para/>
            <b>NOTE</b>: if the Room is of type <see cref="T:Sfs2X.Entities.MMORoom">MMORoom</see>, this event is never fired and it is substituted by the <see cref="F:Sfs2X.Core.SFSEvent.PROXIMITY_LIST_UPDATE"/> event.
            <para/>
            The <see cref="P:Sfs2X.Core.BaseEvent.Params"/> object contains the following parameters:
            <list type="table">
              <listheader>
                <term>Parameter</term>
                <description>Description</description>
              </listheader>
              <item>
                <term>user</term>
                <description>(<b><see cref="T:Sfs2X.Entities.User"/></b>) An object representing the user who left the Room.</description>
              </item>
              <item>
                <term>room</term>
                <description>(<b><see cref="T:Sfs2X.Entities.Room"/></b>) An object representing the Room that was left by the user.</description>
              </item>
            </list>
            </remarks>
            
            <example>
            The following example shows how to handle this event type:
            <code>
            void SomeMethod() {
            	smartFox.AddEventListener(SFSEvent.USER_EXIT_ROOM, OnUserExitRoom);
            }
            
            void OnUserExitRoom(BaseEvent evt) {
            	Room room = (Room)evt.Params["room"];
            	User user = (User)evt.Params["user"];
            	
            	Console.WriteLine("User: " + user.Name + " has just left Room: " + room.Name);                          // .Net / Unity
            	System.Diagnostics.Debug.WriteLine("User: " + user.Name + " has just left Room: " + room.Name);         // UWP
            }
            </code>
            </example>
            
            <seealso cref="F:Sfs2X.Core.SFSEvent.USER_ENTER_ROOM"/>
            <seealso cref="T:Sfs2X.Requests.LeaveRoomRequest"/> 
        </member>
        <member name="F:Sfs2X.Core.SFSEvent.USER_COUNT_CHANGE">
            <summary>
            Dispatched when the number of users/players or spectators inside a Room changes.
            </summary>
            
            <remarks>
            
            This event is caused by a <see cref="T:Sfs2X.Requests.JoinRoomRequest"/>  request or a <see cref="T:Sfs2X.Requests.LeaveRoomRequest"/> request.
            The Room must belong to one of the Groups subscribed by the current client; also this event might be fired or not depending on the
            Room configuration defined upon its creation (see the <see cref="P:Sfs2X.Requests.RoomSettings.Events">RoomSettings.Events</see> setting).
            <para/>
            The <see cref="P:Sfs2X.Core.BaseEvent.Params"/> object contains the following parameters:
            <list type="table">
              <listheader>
                <term>Parameter</term>
                <description>Description</description>
              </listheader>
              <item>
                <term>room</term>
                <description>(<b><see cref="T:Sfs2X.Entities.Room"/></b>) An object representing the Room in which the users count changed.</description>
              </item>
              <item>
                <term>uCount</term>
                <description>(<b>int</b>) The new users count (players in case of Game Room).</description>
              </item>
              <item>
                <term>sCount</term>
                <description>(<b>int</b>) The new spectators count (Game Rooms only).</description>
              </item>
            </list>
            </remarks>
            
            <example>
            The following example shows how to handle this event type:
            <code>
            void SomeMethod() {
            	sfs.AddEventListener(SFSEvent.USER_COUNT_CHANGE, OnUserCountChange);
            }
            
            void OnUserCountChange(BaseEvent evt) {
            	Room room = (Room)evt.Params["room"];
            	int uCount = (int)evt.Params["uCount"];
            	int sCount = (int)evt.Params["sCount"];
            
            	Console.WriteLine("Room: " + room.Name + " contains " + uCount + " users and " + sCount + " spectators");                           // .Net / Unity
            	System.Diagnostics.Debug.WriteLine("Room: " + room.Name + " contains " + uCount + " users and " + sCount + " spectators");          // UWP
            }
            </code>
            </example>
            
            <seealso cref="T:Sfs2X.Requests.JoinRoomRequest"/> 
            <seealso cref="T:Sfs2X.Requests.LeaveRoomRequest"/> 
        </member>
        <member name="F:Sfs2X.Core.SFSEvent.PUBLIC_MESSAGE">
            <summary>
            Dispatched when a public message is received by the current user.
            </summary>
            
            <remarks>
            This event is caused by a <see cref="T:Sfs2X.Requests.PublicMessageRequest"/> request sent by any user in the target Room, including the current user himself.
            <para/>
            The <see cref="P:Sfs2X.Core.BaseEvent.Params"/> object contains the following parameters:
            <list type="table">
              <listheader>
                <term>Parameter</term>
                <description>Description</description>
              </listheader>
              <item>
                <term>room</term>
                <description>(<b><see cref="T:Sfs2X.Entities.Room"/></b>) An object representing the Room at which the message is targeted.</description>
              </item>
              <item>
                <term>sender</term>
                <description>(<b><see cref="T:Sfs2X.Entities.User"/></b>) An object representing the user who sent the message.</description>
              </item>
              <item>
                <term>message</term>
                <description>(<b>string</b>) The message sent by the user.</description>
              </item>
              <item>
                <term>data</term>
                <description>(<b><see cref="T:Sfs2X.Entities.Data.ISFSObject"/></b>) An object containing custom parameters which might accompany the message.</description>
              </item>
            </list>
            </remarks>
            
            <example>See the <see cref="T:Sfs2X.Requests.PublicMessageRequest"/> example.</example>
            
            <seealso cref="T:Sfs2X.Requests.PublicMessageRequest"/>
        </member>
        <member name="F:Sfs2X.Core.SFSEvent.PRIVATE_MESSAGE">
            <summary>
            Dispatched when a private message is received by the current user.
            </summary>
            
            <remarks>
            This event is caused by a PrivateMessageRequest request sent by any user in the Zone.
            <para/>
            The same event is fired by the sender's client too, so that the user is aware that the message was delivered successfully to the recipient,
            and it can be displayed in the private chat area keeping the correct message ordering.
            In this case there is no default way to know who the message was originally sent to.
            As this information can be useful in scenarios where the sender is chatting privately with more than one user at the same time in separate windows or tabs
            (and we need to write his own message in the proper one), the data parameter can be used to store, for example, the id of the recipient user.
            <para/>
            The <see cref="P:Sfs2X.Core.BaseEvent.Params"/> object contains the following parameters:
            <list type="table">
              <listheader>
                <term>Parameter</term>
                <description>Description</description>
              </listheader>
              <item>
                <term>sender</term>
                <description>(<b><see cref="T:Sfs2X.Entities.User"/></b>) An object representing the user who sent the message.</description>
              </item>
              <item>
                <term>message</term>
                <description>(<b>string</b>) The message sent by the user.</description>
              </item>
              <item>
                <term>data</term>
                <description>(<b><see cref="T:Sfs2X.Entities.Data.ISFSObject"/></b>) An object containing custom parameters which might accompany the message.</description>
              </item>
            </list>
            </remarks>
            
            <example>See the <see cref="T:Sfs2X.Requests.PrivateMessageRequest"/> example.</example>
            
            <seealso cref="T:Sfs2X.Requests.PrivateMessageRequest"/>
        </member>
        <member name="F:Sfs2X.Core.SFSEvent.MODERATOR_MESSAGE">
            <summary>
            Dispatched when the current user receives a message from a moderator user.
            </summary>
            
            <remarks>
            This event can be caused by the <see cref="T:Sfs2X.Requests.ModeratorMessageRequest"/>, <see cref="T:Sfs2X.Requests.KickUserRequest"/> or <see cref="T:Sfs2X.Requests.BanUserRequest"/> requests sent by a user with at least moderation privileges.
            Also, this event can be caused by a kick/ban action performed through the SmartFoxServer 2X Administration Tool.
            <para/>
            The <see cref="P:Sfs2X.Core.BaseEvent.Params"/> object contains the following parameters:
            <list type="table">
              <listheader>
                <term>Parameter</term>
                <description>Description</description>
              </listheader>
              <item>
                <term>sender</term>
                <description>(<b><see cref="T:Sfs2X.Entities.User"/></b>) An object representing the moderator user who sent the message.</description>
              </item>
              <item>
                <term>message</term>
                <description>(<b>string</b>) The message sent by the moderator.</description>
              </item>
              <item>
                <term>data</term>
                <description>(<b><see cref="T:Sfs2X.Entities.Data.ISFSObject"/></b>) An object containing custom parameters which might accompany the message.</description>
              </item>
            </list>
            </remarks>
            
            <example>See the <see cref="T:Sfs2X.Requests.ModeratorMessageRequest"/> example.</example>
            
            <seealso cref="T:Sfs2X.Requests.ModeratorMessageRequest"/>
        </member>
        <member name="F:Sfs2X.Core.SFSEvent.ADMIN_MESSAGE">
            <summary>
            Dispatched when the current user receives a message from an administrator user.
            </summary>
            
            <remarks>
            This event is caused by the <see cref="T:Sfs2X.Requests.AdminMessageRequest"/> request sent by a user with administration privileges.
            <para/>
            The <see cref="P:Sfs2X.Core.BaseEvent.Params"/> object contains the following parameters:
            <list type="table">
              <listheader>
                <term>Parameter</term>
                <description>Description</description>
              </listheader>
              <item>
                <term>sender</term>
                <description>(<b><see cref="T:Sfs2X.Entities.User"/></b>) An object representing the administrator user who sent the message.</description>
              </item>
              <item>
                <term>message</term>
                <description>(<b>string</b>) The message sent by the administrator.</description>
              </item>
              <item>
                <term>data</term>
                <description>(<b><see cref="T:Sfs2X.Entities.Data.ISFSObject"/></b>) An object containing custom parameters which might accompany the message.</description>
              </item>
            </list>
            </remarks>
            
            <example>See the <see cref="T:Sfs2X.Requests.AdminMessageRequest"/> example.</example>
            
            <seealso cref="T:Sfs2X.Requests.AdminMessageRequest"/>
        </member>
        <member name="F:Sfs2X.Core.SFSEvent.OBJECT_MESSAGE">
            <summary>
            Dispatched when an object containing custom data is received by the current user.
            </summary>
            
            <remarks>
            This event is caused by an <see cref="T:Sfs2X.Requests.ObjectMessageRequest"/> request sent by any user in the target Room.
            <para/>
            The <see cref="P:Sfs2X.Core.BaseEvent.Params"/> object contains the following parameters:
            <list type="table">
              <listheader>
                <term>Parameter</term>
                <description>Description</description>
              </listheader>
              <item>
                <term>sender</term>
                <description>(<b><see cref="T:Sfs2X.Entities.User"/></b>) An object representing the user who sent the message.</description>
              </item>
              <item>
                <term>message</term>
                <description>(<b><see cref="T:Sfs2X.Entities.Data.ISFSObject"/></b>) The content of the message: an object containing the custom parameters sent by the sender.</description>
              </item>
            </list>
            </remarks>
            
            <example>See the <see cref="T:Sfs2X.Requests.ObjectMessageRequest"/> example.</example>
            
            <seealso cref="T:Sfs2X.Requests.ObjectMessageRequest"/>
        </member>
        <member name="F:Sfs2X.Core.SFSEvent.EXTENSION_RESPONSE">
            <summary>
            Dispatched when data coming from a server-side Extension is received by the current user.
            </summary>
            
            <remarks>
            Data is usually sent by the server to one or more clients in response to an ExtensionRequest request, but not necessarily.
            <para/>
            The <see cref="P:Sfs2X.Core.BaseEvent.Params"/> object contains the following parameters:
            <list type="table">
              <listheader>
                <term>Parameter</term>
                <description>Description</description>
              </listheader>
              <item>
                <term>cmd</term>
                <description>(<b>string</b>) The name of the command which identifies an action that should be executed by the client. If this event is fired in response to a request sent by the client, it is a common practice to use the same command name passed to the request also in the response.</description>
              </item>
              <item>
                <term>sourceRoom</term>
                <description>(<b>int</b>) <b>[DEPRECATED - Use <em>room</em> property]</b>  The id of the Room which the Extension is attached to (for Room Extensions only).</description>
              </item>
              <item>
                <term>room</term>
                <description>(<b><see cref="T:Sfs2X.Entities.Room"/></b>) An object representing the Room which the Extension is attached to (for Room Extensions only).</description>
              </item>
              <item>
                <term>params</term>
                <description>(<b><see cref="T:Sfs2X.Entities.Data.ISFSObject"/></b>) An object containing custom data sent by the Extension.</description>
              </item>
              <item>
                <term>packetId</term>
                <description>(<b>long</b>) The id of the packet when the UDP protocol is used. As this is an auto-increment value generated by the server, it can be useful to detect UDP packets received in the wrong order (for UDP communication only).</description>
              </item>
            </list>
            </remarks>
            
            <example>See the <see cref="T:Sfs2X.Requests.ExtensionRequest"/> example.</example>
            
            <seealso cref="T:Sfs2X.Requests.ExtensionRequest"/>
            <seealso cref="T:Sfs2X.Entities.Data.SFSObject"/>
        </member>
        <member name="F:Sfs2X.Core.SFSEvent.ROOM_VARIABLES_UPDATE">
            <summary>
            Dispatched when a Room Variable is updated.
            </summary>
            
            <remarks>
            This event is caused by the <see cref="T:Sfs2X.Requests.SetRoomVariablesRequest"/> request. The request could have been sent by a user in the same Room of the current user or,
            in case of a global Room Variable, by a user in a Room belonging to one of the Groups subscribed by the current client.
            <para/>
            The <see cref="P:Sfs2X.Core.BaseEvent.Params"/> object contains the following parameters:
            <list type="table">
              <listheader>
                <term>Parameter</term>
                <description>Description</description>
              </listheader>
              <item>
                <term>room</term>
                <description>(<b><see cref="T:Sfs2X.Entities.Room"/></b>) An object representing the Room where the Room Variable update occurred.</description>
              </item>
              <item>
                <term>changedVars</term>
                <description>(<b>List&lt;string&gt;</b>) the list of variable names that where modified or created</description>
              </item>
            </list>
            </remarks>
            
            <example>See the <see cref="T:Sfs2X.Requests.SetRoomVariablesRequest"/> example.</example>
            
            <seealso cref="T:Sfs2X.Requests.SetRoomVariablesRequest"/>
            <seealso cref="T:Sfs2X.Entities.Variables.RoomVariable"/>
        </member>
        <member name="F:Sfs2X.Core.SFSEvent.USER_VARIABLES_UPDATE">
            <summary>
            Dispatched when a User Variable is updated.
            </summary>
            
            <remarks>
            This event is caused by the <see cref="T:Sfs2X.Requests.SetUserVariablesRequest"/> request sent by a user in one of the Rooms joined by the current user.
            <para/>
            The <see cref="P:Sfs2X.Core.BaseEvent.Params"/> object contains the following parameters:
            <list type="table">
              <listheader>
                <term>Parameter</term>
                <description>Description</description>
              </listheader>
              <item>
                <term>user</term>
                <description>(<b><see cref="T:Sfs2X.Entities.User"/></b>) An object representing the user who updated his own User Variables.</description>
              </item>
              <item>
                <term>changedVars</term>
                <description>(<b>List&lt;string&gt;</b>) The list of names of the User Variables that were changed (or created for the first time).</description>
              </item>
            </list>
            </remarks>
            
            <example>See the <see cref="T:Sfs2X.Requests.SetUserVariablesRequest"/> example.</example>
            
            <seealso cref="T:Sfs2X.Requests.SetUserVariablesRequest"/>
            <seealso cref="T:Sfs2X.Entities.Variables.UserVariable"/>
        </member>
        <member name="F:Sfs2X.Core.SFSEvent.ROOM_GROUP_SUBSCRIBE">
            <summary>
            Dispatched when a Group is subscribed by the current user.
            </summary>
            
            <remarks>
            This event is fired in response to the <see cref="T:Sfs2X.Requests.SubscribeRoomGroupRequest"/> request if the operation is executed successfully.
            <para/>
            The <see cref="P:Sfs2X.Core.BaseEvent.Params"/> object contains the following parameters:
            <list type="table">
              <listheader>
                <term>Parameter</term>
                <description>Description</description>
              </listheader>
              <item>
                <term>groupId</term>
                <description>(<b>string</b>) The name of the Group that was subscribed.</description>
              </item>
              <item>
                <term>newRooms</term>
                <description>(<b>List&lt;<see cref="T:Sfs2X.Entities.Room"/>&gt;</b>) A list of objects representing the Rooms belonging to the subscribed Group.</description>
              </item>
            </list>
            </remarks>
            
            <example>See the <see cref="T:Sfs2X.Requests.SubscribeRoomGroupRequest"/> example.</example>
            
            <seealso cref="T:Sfs2X.Requests.SubscribeRoomGroupRequest"/>
            <seealso cref="F:Sfs2X.Core.SFSEvent.ROOM_GROUP_SUBSCRIBE_ERROR"/>
            <seealso cref="F:Sfs2X.Core.SFSEvent.ROOM_GROUP_UNSUBSCRIBE"/>
        </member>
        <member name="F:Sfs2X.Core.SFSEvent.ROOM_GROUP_UNSUBSCRIBE">
            <summary>
            Dispatched when a Group is unsubscribed by the current user.
            </summary>
            
            <remarks>
            This event is fired in response to the <see cref="T:Sfs2X.Requests.UnsubscribeRoomGroupRequest"/> request if the operation is executed successfully.
            <para/>
            The <see cref="P:Sfs2X.Core.BaseEvent.Params"/> object contains the following parameters:
            <list type="table">
              <listheader>
                <term>Parameter</term>
                <description>Description</description>
              </listheader>
              <item>
                <term>groupId</term>
                <description>(<b>string</b>) The name of the Group that was unsubscribed.</description>
              </item>
            </list>
            </remarks>
            
            <example>See the <see cref="T:Sfs2X.Requests.UnsubscribeRoomGroupRequest"/> example.</example>
            
            <seealso cref="T:Sfs2X.Requests.UnsubscribeRoomGroupRequest"/>
            <seealso cref="F:Sfs2X.Core.SFSEvent.ROOM_GROUP_UNSUBSCRIBE_ERROR"/>
            <seealso cref="F:Sfs2X.Core.SFSEvent.ROOM_GROUP_SUBSCRIBE"/>
        </member>
        <member name="F:Sfs2X.Core.SFSEvent.ROOM_GROUP_SUBSCRIBE_ERROR">
            <summary>
            Dispatched when an error occurs while a Room Group is being subscribed.
            </summary>
            
            <remarks>
            This event is fired in response to the <see cref="T:Sfs2X.Requests.SubscribeRoomGroupRequest"/> request in case the operation failed.
            <para/>
            The <see cref="P:Sfs2X.Core.BaseEvent.Params"/> object contains the following parameters:
            <list type="table">
              <listheader>
                <term>Parameter</term>
                <description>Description</description>
              </listheader>
              <item>
                <term>errorMessage</term>
                <description>(<b>string</b>) A message containing the description of the error.</description>
              </item>
              <item>
                <term>errorCode</term>
                <description>(<b>short</b>) The error code.</description>
              </item>
            </list>
            </remarks>
            
            <example>See the <see cref="T:Sfs2X.Requests.SubscribeRoomGroupRequest"/> example.</example>
            
            <seealso cref="T:Sfs2X.Requests.SubscribeRoomGroupRequest"/>
            <seealso cref="F:Sfs2X.Core.SFSEvent.ROOM_GROUP_SUBSCRIBE"/>
        </member>
        <member name="F:Sfs2X.Core.SFSEvent.ROOM_GROUP_UNSUBSCRIBE_ERROR">
            <summary>
            Dispatched when an error occurs while a Room Group is being unsubscribed.
            </summary>
            
            <remarks>
            This event is fired in response to the <see cref="T:Sfs2X.Requests.UnsubscribeRoomGroupRequest"/> request in case the operation failed.
            <para/>
            The <see cref="P:Sfs2X.Core.BaseEvent.Params"/> object contains the following parameters:
            <list type="table">
              <listheader>
                <term>Parameter</term>
                <description>Description</description>
              </listheader>
              <item>
                <term>errorMessage</term>
                <description>(<b>string</b>) A message containing the description of the error.</description>
              </item>
              <item>
                <term>errorCode</term>
                <description>(<b>short</b>) The error code.</description>
              </item>
            </list>
            </remarks>
            
            <example>See the <see cref="T:Sfs2X.Requests.UnsubscribeRoomGroupRequest"/> example.</example>
            
            <seealso cref="T:Sfs2X.Requests.UnsubscribeRoomGroupRequest"/>
            <seealso cref="F:Sfs2X.Core.SFSEvent.ROOM_GROUP_UNSUBSCRIBE"/>
        </member>
        <member name="F:Sfs2X.Core.SFSEvent.SPECTATOR_TO_PLAYER">
            <summary>
            Dispatched when a spectator is turned to a player inside a Game Room.
            </summary>
            
            <remarks>
            This event is fired in response to the <see cref="T:Sfs2X.Requests.SpectatorToPlayerRequest"/> request if the operation is executed successfully.
            <para/>
            The <see cref="P:Sfs2X.Core.BaseEvent.Params"/> object contains the following parameters:
            <list type="table">
              <listheader>
                <term>Parameter</term>
                <description>Description</description>
              </listheader>
              <item>
                <term>room</term>
                <description>(<b><see cref="T:Sfs2X.Entities.Room"/></b>) An object representing the Room in which the spectator is turned to player.</description>
              </item>
              <item>
                <term>user</term>
                <description>(<b><see cref="T:Sfs2X.Entities.User"/></b>) An object representing the spectator who was turned to player.</description>
              </item>
              <item>
                <term>playerId</term>
                <description>(<b>int</b>) The player id of the user.</description>
              </item>
            </list>
            </remarks>
            
            <example>See the <see cref="T:Sfs2X.Requests.SpectatorToPlayerRequest"/> example.</example>
            
            <seealso cref="T:Sfs2X.Requests.SpectatorToPlayerRequest"/>
            <seealso cref="F:Sfs2X.Core.SFSEvent.SPECTATOR_TO_PLAYER_ERROR"/>
        </member>
        <member name="F:Sfs2X.Core.SFSEvent.PLAYER_TO_SPECTATOR">
            <summary>
            Dispatched when a player is turned to a spectator inside a Game Room.
            </summary>
            
            <remarks>
            This event is fired in response to the <see cref="T:Sfs2X.Requests.PlayerToSpectatorRequest"/> request if the operation is executed successfully.
            <para/>
            The <see cref="P:Sfs2X.Core.BaseEvent.Params"/> object contains the following parameters:
            <list type="table">
              <listheader>
                <term>Parameter</term>
                <description>Description</description>
              </listheader>
              <item>
                <term>room</term>
                <description>(<b><see cref="T:Sfs2X.Entities.Room"/></b>) An object representing the Room in which the player is turned to spectator.</description>
              </item>
              <item>
                <term>user</term>
                <description>(<b><see cref="T:Sfs2X.Entities.User"/></b>) An object representing the player who was turned to spectator.</description>
              </item>
            </list>
            </remarks>
            
            <example>See the <see cref="T:Sfs2X.Requests.PlayerToSpectatorRequest"/> example.</example>
            
            <seealso cref="T:Sfs2X.Requests.PlayerToSpectatorRequest"/>
            <seealso cref="F:Sfs2X.Core.SFSEvent.PLAYER_TO_SPECTATOR_ERROR"/>
        </member>
        <member name="F:Sfs2X.Core.SFSEvent.SPECTATOR_TO_PLAYER_ERROR">
            <summary>
            Dispatched when an error occurs while the current user is being turned from spectator to player in a Game Room.
            </summary>
            
            <remarks>
            This event is fired in response to the <see cref="T:Sfs2X.Requests.SpectatorToPlayerRequest"/> request in case the operation failed.
            <para/>
            The <see cref="P:Sfs2X.Core.BaseEvent.Params"/> object contains the following parameters:
            <list type="table">
              <listheader>
                <term>Parameter</term>
                <description>Description</description>
              </listheader>
              <item>
                <term>errorMessage</term>
                <description>(<b>string</b>) A message containing the description of the error.</description>
              </item>
              <item>
                <term>errorCode</term>
                <description>(<b>short</b>) The error code.</description>
              </item>
            </list>
            </remarks>
            
            <example>See the <see cref="T:Sfs2X.Requests.SpectatorToPlayerRequest"/> example.</example>
            
            <seealso cref="T:Sfs2X.Requests.SpectatorToPlayerRequest"/>
            <seealso cref="F:Sfs2X.Core.SFSEvent.SPECTATOR_TO_PLAYER"/>
        </member>
        <member name="F:Sfs2X.Core.SFSEvent.PLAYER_TO_SPECTATOR_ERROR">
            <summary>
            Dispatched when an error occurs while the current user is being turned from player to spectator in a Game Room.
            </summary>
            
            <remarks>
            This event is fired in response to the <see cref="T:Sfs2X.Requests.PlayerToSpectatorRequest"/> request in case the operation failed.
            <para/>
            The <see cref="P:Sfs2X.Core.BaseEvent.Params"/> object contains the following parameters:
            <list type="table">
              <listheader>
                <term>Parameter</term>
                <description>Description</description>
              </listheader>
              <item>
                <term>errorMessage</term>
                <description>(<b>string</b>) A message containing the description of the error.</description>
              </item>
              <item>
                <term>errorCode</term>
                <description>(<b>short</b>) The error code.</description>
              </item>
            </list>
            </remarks>
            
            <example>See the <see cref="T:Sfs2X.Requests.PlayerToSpectatorRequest"/> example.</example>
            
            <seealso cref="T:Sfs2X.Requests.PlayerToSpectatorRequest"/>
            <seealso cref="F:Sfs2X.Core.SFSEvent.PLAYER_TO_SPECTATOR"/>
        </member>
        <member name="F:Sfs2X.Core.SFSEvent.ROOM_NAME_CHANGE">
            <summary>
            Dispatched when the name of a Room is changed.
            </summary>
            
            <remarks>
            This event is fired in response to the <see cref="T:Sfs2X.Requests.ChangeRoomNameRequest"/> request if the operation is executed successfully.
            <para/>
            The <see cref="P:Sfs2X.Core.BaseEvent.Params"/> object contains the following parameters:
            <list type="table">
              <listheader>
                <term>Parameter</term>
                <description>Description</description>
              </listheader>
              <item>
                <term>room</term>
                <description>(<b><see cref="T:Sfs2X.Entities.Room"/></b>) An object representing the Room which was renamed.</description>
              </item>
              <item>
                <term>oldName</term>
                <description>(<b>string</b>) The previous name of the Room.</description>
              </item>
            </list>
            </remarks>
            
            <example>See the <see cref="T:Sfs2X.Requests.ChangeRoomNameRequest"/> example.</example>
            
            <seealso cref="F:Sfs2X.Core.SFSEvent.ROOM_NAME_CHANGE_ERROR"/>
            <seealso cref="T:Sfs2X.Requests.ChangeRoomNameRequest"/>
        </member>
        <member name="F:Sfs2X.Core.SFSEvent.ROOM_NAME_CHANGE_ERROR">
            <summary>
            Dispatched when an error occurs while attempting to change the name of a Room.
            </summary>
            
            <remarks>
            This event is fired in response to the <see cref="T:Sfs2X.Requests.ChangeRoomNameRequest"/> request in case the operation failed.
            <para/>
            The <see cref="P:Sfs2X.Core.BaseEvent.Params"/> object contains the following parameters:
            <list type="table">
              <listheader>
                <term>Parameter</term>
                <description>Description</description>
              </listheader>
              <item>
                <term>errorMessage</term>
                <description>(<b>string</b>) A message containing the description of the error.</description>
              </item>
              <item>
                <term>errorCode</term>
                <description>(<b>short</b>) The error code.</description>
              </item>
            </list>
            </remarks>
            
            <example>See the <see cref="T:Sfs2X.Requests.ChangeRoomNameRequest"/> example.</example>
            
            <seealso cref="F:Sfs2X.Core.SFSEvent.ROOM_NAME_CHANGE"/>
            <seealso cref="T:Sfs2X.Requests.ChangeRoomNameRequest"/>
        </member>
        <member name="F:Sfs2X.Core.SFSEvent.ROOM_PASSWORD_STATE_CHANGE">
            <summary>
            Dispatched when the password of a Room is set, changed or removed.
            </summary>
            
            <remarks>
            This event is fired in response to the <see cref="T:Sfs2X.Requests.ChangeRoomPasswordStateRequest"/> request if the operation is executed successfully.
            <para/>
            The <see cref="P:Sfs2X.Core.BaseEvent.Params"/> object contains the following parameters:
            <list type="table">
              <listheader>
                <term>Parameter</term>
                <description>Description</description>
              </listheader>
              <item>
                <term>room</term>
                <description>(<b><see cref="T:Sfs2X.Entities.Room"/></b>) An object representing the Room whose password was changed.</description>
              </item>
            </list>
            </remarks>
            
            <example>See the <see cref="T:Sfs2X.Requests.ChangeRoomPasswordStateRequest"/> example.</example>
            
            <seealso cref="F:Sfs2X.Core.SFSEvent.ROOM_PASSWORD_STATE_CHANGE_ERROR"/>
            <seealso cref="T:Sfs2X.Requests.ChangeRoomPasswordStateRequest"/>
        </member>
        <member name="F:Sfs2X.Core.SFSEvent.ROOM_PASSWORD_STATE_CHANGE_ERROR">
            <summary>
            Dispatched when an error occurs while attempting to set, change or remove the password of a Room.
            </summary>
            
            <remarks>
            This event is fired in response to the <see cref="T:Sfs2X.Requests.ChangeRoomPasswordStateRequest"/> request in case the operation failed.
            <para/>
            The <see cref="P:Sfs2X.Core.BaseEvent.Params"/> object contains the following parameters:
            <list type="table">
              <listheader>
                <term>Parameter</term>
                <description>Description</description>
              </listheader>
              <item>
                <term>errorMessage</term>
                <description>(<b>string</b>) A message containing the description of the error.</description>
              </item>
              <item>
                <term>errorCode</term>
                <description>(<b>short</b>) The error code.</description>
              </item>
            </list>
            </remarks>
            
            <example>See the <see cref="T:Sfs2X.Requests.ChangeRoomPasswordStateRequest"/> example.</example>
            
            <seealso cref="F:Sfs2X.Core.SFSEvent.ROOM_PASSWORD_STATE_CHANGE"/>
            <seealso cref="T:Sfs2X.Requests.ChangeRoomPasswordStateRequest"/>
        </member>
        <member name="F:Sfs2X.Core.SFSEvent.ROOM_CAPACITY_CHANGE">
            <summary>
            Dispatched when the capacity of a Room is changed.
            </summary>
            
            <remarks>
            This event is fired in response to the <see cref="T:Sfs2X.Requests.ChangeRoomCapacityRequest"/> request if the operation is executed successfully.
            <para/>
            The <see cref="P:Sfs2X.Core.BaseEvent.Params"/> object contains the following parameters:
            <list type="table">
              <listheader>
                <term>Parameter</term>
                <description>Description</description>
              </listheader>
              <item>
                <term>room</term>
                <description>(<b><see cref="T:Sfs2X.Entities.Room"/></b>) An object representing the Room whose capacity was changed.</description>
              </item>
            </list>
            </remarks>
            
            <example>See the <see cref="T:Sfs2X.Requests.ChangeRoomCapacityRequest"/> example.</example>
            
            <seealso cref="T:Sfs2X.Requests.ChangeRoomCapacityRequest"/>
        </member>
        <member name="F:Sfs2X.Core.SFSEvent.ROOM_CAPACITY_CHANGE_ERROR">
            <summary>
            Dispatched when an error occurs while attempting to change the capacity of a Room.
            </summary>
            
            <remarks>
            This event is fired in response to the <see cref="T:Sfs2X.Requests.ChangeRoomCapacityRequest"/> request in case the operation failed.
            <para/>
            The <see cref="P:Sfs2X.Core.BaseEvent.Params"/> object contains the following parameters:
            <list type="table">
              <listheader>
                <term>Parameter</term>
                <description>Description</description>
              </listheader>
              <item>
                <term>errorMessage</term>
                <description>(<b>string</b>) A message containing the description of the error.</description>
              </item>
              <item>
                <term>errorCode</term>
                <description>(<b>short</b>) The error code.</description>
              </item>
            </list>
            </remarks>
            
            <example>See the <see cref="T:Sfs2X.Requests.ChangeRoomCapacityRequest"/> example.</example>
            
            <seealso cref="T:Sfs2X.Requests.ChangeRoomCapacityRequest"/>
        </member>
        <member name="F:Sfs2X.Core.SFSEvent.ROOM_FIND_RESULT">
            <summary>
            Dispatched when a Rooms search is completed.
            </summary>
            
            <remarks>
            This event is fired in response to the <see cref="T:Sfs2X.Requests.FindRoomsRequest"/> request to return the search result.
            <para/>
            The <see cref="P:Sfs2X.Core.BaseEvent.Params"/> object contains the following parameters:
            <list type="table">
              <listheader>
                <term>Parameter</term>
                <description>Description</description>
              </listheader>
              <item>
                <term>rooms</term>
                <description>(<b>List&lt;<see cref="T:Sfs2X.Entities.Room"/>&gt;</b>) A list of Room objects representing the Rooms matching the search criteria. If no Room is found, the list is empty.</description>
              </item>
            </list>
            </remarks>
            
            <example>See the <see cref="T:Sfs2X.Requests.FindRoomsRequest"/> example.</example>
            
            <seealso cref="T:Sfs2X.Requests.FindRoomsRequest"/>
        </member>
        <member name="F:Sfs2X.Core.SFSEvent.USER_FIND_RESULT">
            <summary>
            Dispatched when a users search is completed
            </summary>
            
            <remarks>
            This event is fired in response to the <see cref="T:Sfs2X.Requests.FindUsersRequest"/> request to return the search result.
            <para/>
            The <see cref="P:Sfs2X.Core.BaseEvent.Params"/> object contains the following parameters:
            <list type="table">
              <listheader>
                <term>Parameter</term>
                <description>Description</description>
              </listheader>
              <item>
                <term>rooms</term>
                <description>(<b>List&lt;<see cref="T:Sfs2X.Entities.User"/>&gt;</b>) A list of objects representing the users matching the search criteria. If no user is found, the list is empty.</description>
              </item>
            </list>
            </remarks>
            
            <example>See the <see cref="T:Sfs2X.Requests.FindUsersRequest"/> example.</example>
            
            <seealso cref="T:Sfs2X.Requests.FindUsersRequest"/>
        </member>
        <member name="F:Sfs2X.Core.SFSEvent.INVITATION">
            <summary>
            Dispatched when the current user receives an invitation from another user.
            </summary>
            
            <remarks>
            This event is caused by the <see cref="T:Sfs2X.Requests.Game.InviteUsersRequest"/> request; the user is supposed to reply using the <see cref="T:Sfs2X.Requests.Game.InvitationReplyRequest"/> request.
            <para/>
            The <see cref="P:Sfs2X.Core.BaseEvent.Params"/> object contains the following parameters:
            <list type="table">
              <listheader>
                <term>Parameter</term>
                <description>Description</description>
              </listheader>
              <item>
                <term>invitation</term>
                <description>(<b><see cref="T:Sfs2X.Entities.Invitation.Invitation"/></b>) An object representing the invitation received by the current user.</description>
              </item>
            </list>
            </remarks>
            
            <example>See the <see cref="T:Sfs2X.Requests.Game.InvitationReplyRequest"/> example.</example>
            
            <seealso cref="T:Sfs2X.Requests.Game.InviteUsersRequest"/>
            <seealso cref="T:Sfs2X.Requests.Game.InvitationReplyRequest"/>
            <seealso cref="T:Sfs2X.Entities.Invitation.Invitation"/>
        </member>
        <member name="F:Sfs2X.Core.SFSEvent.INVITATION_REPLY">
            <summary>
            Dispatched when the current user receives a reply to an invitation he sent previously.
            </summary>
            
            <remarks>
            This event is caused by the <see cref="T:Sfs2X.Requests.Game.InvitationReplyRequest"/> request sent by the invitee.
            <para/>
            The <see cref="P:Sfs2X.Core.BaseEvent.Params"/> object contains the following parameters:
            <list type="table">
              <listheader>
                <term>Parameter</term>
                <description>Description</description>
              </listheader>
              <item>
                <term>invitee</term>
                <description>(<b><see cref="T:Sfs2X.Entities.User"/></b>) An object representing the user who replied to the invitation.</description>
              </item>
              <item>
                <term>reply</term>
                <description>(<b>int</b>) The answer to the invitation among those available as constants in the <see cref="T:Sfs2X.Entities.Invitation.InvitationReply"/> class.</description>
              </item>
              <item>
                <term>data</term>
                <description>(<b><see cref="T:Sfs2X.Entities.Data.ISFSObject"/></b>) An object containing custom parameters, for example a message describing the reason of refusal.</description>
              </item>
            </list>
            </remarks>
            
            <example>See the <see cref="T:Sfs2X.Requests.Game.InviteUsersRequest"/> example.</example>
            
            <seealso cref="T:Sfs2X.Entities.Invitation.InvitationReply"/>
            <seealso cref="T:Sfs2X.Requests.Game.InviteUsersRequest"/>
            <seealso cref="T:Sfs2X.Requests.Game.InvitationReplyRequest"/>
        </member>
        <member name="F:Sfs2X.Core.SFSEvent.INVITATION_REPLY_ERROR">
            <summary>
            Dispatched when an error occurs while the current user is sending a reply to an invitation he received.
            </summary>
            <remarks>
            This event is fired in response to the <see cref="T:Sfs2X.Requests.Game.InvitationReplyRequest"/> request in case the operation failed.
            <para/>
            The <see cref="P:Sfs2X.Core.BaseEvent.Params"/> object contains the following parameters:
            <list type="table">
              <listheader>
                <term>Parameter</term>
                <description>Description</description>
              </listheader>
              <item>
                <term>errorMessage</term>
                <description>(<b>string</b>) A message containing the description of the error.</description>
              </item>
              <item>
                <term>errorCode</term>
                <description>(<b>short</b>) The error code.</description>
              </item>
            </list>
            </remarks>
            
            <example>See the <see cref="T:Sfs2X.Requests.Game.InvitationReplyRequest"/> example.</example>
            
            <seealso cref="T:Sfs2X.Requests.Game.InvitationReplyRequest"/>
        </member>
        <member name="F:Sfs2X.Core.SFSEvent.PROXIMITY_LIST_UPDATE">
            <summary>
            Dispatched when one more users or one or more MMOItem objects enter/leave the current user's Area of Interest in MMORooms.
            </summary>
            <remarks>
            This event is fired after an MMORoom is joined and the <see cref="T:Sfs2X.Requests.MMO.SetUserPositionRequest"/> request is sent at least one time.
            <para/>
            <b>NOTE</b>: this event substitutes the default <see cref="F:Sfs2X.Core.SFSEvent.USER_ENTER_ROOM"/> and <see cref="F:Sfs2X.Core.SFSEvent.USER_EXIT_ROOM"/> events available in regular Rooms.
            <para/>
            The <see cref="P:Sfs2X.Core.BaseEvent.Params"/> object contains the following parameters:
            <list type="table">
              <listheader>
                <term>Parameter</term>
                <description>Description</description>
              </listheader>
             <item>
                <term>room</term>
                <description>(<b>Room</b>) The Room where the event occurred</description>
              </item>
              <item>
                <term>addedUsers</term>
                <description>(<b>List&lt;User&gt;</b>) A list of User objects representing the users who entered the current user's Area of Interest.</description>
              </item>
              <item>
                <term>removedUsers</term>
                <description>(<b>List&lt;User&gt;</b>) A list of User objects representing the users who left the current user's Area of Interest.</description>
              </item>
              <item>
                <term>addedItems</term>
                <description>(<b>List&lt;IMMOItem&gt;</b>) A list of MMOItem objects which entered the current user's Area of Interest.</description>
              </item>
              <item>
                <term>removedItems</term>
                <description>(<b>List&lt;IMMOItem&gt;</b>) A list of MMOItem objects which left the current user's Area of Interest.</description>
              </item>
            </list>
            </remarks>
            
            <example>See the <see cref="T:Sfs2X.Requests.MMO.SetUserPositionRequest"/> example.</example>
            
            <seealso cref="T:Sfs2X.Requests.MMO.SetUserPositionRequest"/>
            <seealso cref="T:Sfs2X.Entities.MMORoom"/>
            <seealso cref="T:Sfs2X.Entities.MMOItem"/>
        </member>
        <member name="F:Sfs2X.Core.SFSEvent.MMOITEM_VARIABLES_UPDATE">
            <summary>
            Dispatched when an MMOItem Variable is updated in an MMORoom.
            </summary>
            <remarks>
            This event is caused by an MMOItem Variable being set, updated or deleted in a server side Extension, and it is received only if the current user has the related MMOItem in his Area of Interest.
            <para/>
            The <see cref="P:Sfs2X.Core.BaseEvent.Params"/> object contains the following parameters:
            <list type="table">
              <listheader>
                <term>Parameter</term>
                <description>Description</description>
              </listheader>
              <item>
                <term>room</term>
                <description>(<b><see cref="T:Sfs2X.Entities.MMORoom"/></b>) The MMORoom where the MMOItem whose Variables have been updated is located.</description>
              </item>
              <item>
                <term>mmoItem</term>
                <description>(<b><see cref="T:Sfs2X.Entities.MMOItem"/></b>) The MMOItem whose variables have been updated.</description>
              </item>
              <item>
                <term>changedVars</term>
                <description>(<b>List&lt;string&gt;</b>) The list of names of the MMOItem Variables that were changed (or created for the first time).</description>
              </item>
            </list>
            </remarks>
            
            <example>
            The following example shows how to handle the MMOItem Variable update:
            <code>
            void SomeMethod() {
            	sfs.AddEventListener(SFSEvent.MMOITEM_VARIABLES_UPDATE, OnMMOItemVarsUpdate);
            }
            
            void OnMMOItemVarsUpdate(BaseEvent evt) {
            	var changedVars = (List&lt;String&gt;)evt.Params["changedVars"];
            	var item = (IMMOItem) evt.Params["mmoItem"];
            	
            	// Check if the MMOItem was moved
            	if (changedVars.Contains("x") || changedVars.Contains("y"))
            	{
            		// Move the sprite representing the MMOItem
            		...
            	}
            }
            </code>
            </example>
            
            <seealso cref="T:Sfs2X.Entities.Variables.MMOItemVariable"/>
            <seealso cref="T:Sfs2X.Entities.MMOItem"/>
            <seealso cref="T:Sfs2X.Entities.MMORoom"/>
        </member>
        <member name="F:Sfs2X.Core.SFSEvent.CRYPTO_INIT">
            <summary>
            Dispatched in return to the initialization of an encrypted connection.
            </summary>
            
            <remarks>
            This event is fired in response to a call to the <see cref="M:Sfs2X.SmartFox.InitCrypto">SmartFox.InitCrypto()</see> method.
            <para/>
            The <see cref="P:Sfs2X.Core.BaseEvent.Params"/> object contains the following parameters:
            <list type="table">
              <listheader>
                <term>Parameter</term>
                <description>Description</description>
              </listheader>
              <item>
                <term>success</term>
                <description>(<b>bool</b>) <c>true</c> if a unique encryption key was successfully retrieved via HTTPS, <c>false</c> if the transaction failed.</description>
              </item>
              <item>
                <term>errorMessage</term>
                <description>(<b>string</b>) If <em>success</em> is <c>false</c>, provides additional details on the occurred error.</description>
              </item>
            </list>
            </remarks>
            
            <example>See the <see cref="M:Sfs2X.SmartFox.InitCrypto"/> example.</example>
            
            <seealso cref="M:Sfs2X.SmartFox.InitCrypto"/>
        </member>
        <member name="M:Sfs2X.Core.SFSEvent.#ctor(System.String,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <exclude/>
        </member>
        <member name="M:Sfs2X.Core.SFSEvent.#ctor(System.String)">
            <exclude/>
        </member>
        <member name="M:Sfs2X.Core.Sockets.WebSocketLayer.ProcessState">
            <summary>
            This method is called whenever the SmartFox.ProcessEvents is called, to run the logic processing the errors and queues in the WebSocketHelper class.
            </summary>
        </member>
        <member name="T:Sfs2X.Core.SFSClusterEvent">
            <summary>
            This class represents all the cluster-related events dispatched by the SmartFoxServer 2X C# API.
            </summary>
            
            <seealso cref="M:Sfs2X.SmartFox.AddEventListener(System.String,Sfs2X.Core.EventListenerDelegate)"/>
        </member>
        <member name="F:Sfs2X.Core.SFSClusterEvent.CONNECTION_REQUIRED">
            <summary>
            Dispatched when the Lobby has found a Game Node for the client to join in a SmartFoxServer 2X Cluster.
            </summary>
            
            <remarks>
            This event is fired when the Lobby signals the client should join a given Game Node.
            <para/>
            The <see cref="P:Sfs2X.Core.BaseEvent.Params"/> object contains the following parameters:
            <list type="table">
              <listheader>
                <term>Parameter</term>
                <description>Description</description>
              </listheader>
             <item>
                <term>configData</term>
                <description>(<b>ConfigData</b>) The pre-populated ConfigData object to start a new connection towards the designated Game Node.</description>
              </item>
              <item>
                <term>userName</term>
                <description>(<b>String</b>) The user name to access the Game Node.</description>
              </item>
              <item>
                <term>password</term>
                <description>(<b>String</b>) A temporary and unique password to access the Game Node.</description>
              </item>
            </list>
            </remarks>
            
            <seealso cref="T:Sfs2X.Util.ConfigData"/>
        </member>
        <member name="F:Sfs2X.Core.SFSClusterEvent.LOAD_BALANCER_ERROR">
            <summary>
            Dispatched when a cluster-related request cannot be satisfied, typically creating or joining a game in a SmartFoxServer 2X Cluster.
            </summary>
            
            <remarks>
            The event does not provide further details as the Load Balancer simply queries the available servers and if none is found matching the contextual criteria, the cluster request cannot be completed.
            </remarks>
            
            <seealso cref="T:Sfs2X.Util.ConfigData"/>
        </member>
        <member name="M:Sfs2X.Core.SFSClusterEvent.#ctor(System.String,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <exclude/>
        </member>
        <member name="M:Sfs2X.Core.SFSClusterEvent.#ctor(System.String)">
            <exclude/>
        </member>
        <member name="T:Sfs2X.Entities.Buddy">
            <summary>
            The Buddy interface defines all the methods and properties that an object representing a SmartFoxServer Buddy entity exposes.
            </summary>
            
            <remarks>
            In the SmartFoxServer 2X client API this interface is implemented by the <see cref="T:Sfs2X.Entities.SFSBuddy"/> class. Read the class description for additional informations.
            </remarks>
            
            <seealso cref="T:Sfs2X.Entities.SFSBuddy"/>
        </member>
        <member name="P:Sfs2X.Entities.Buddy.Id">
            <summary>
            Indicates the id of this buddy.
            </summary>
            
            <remarks>
            This is equal to the id assigned by SmartFoxServer to the corresponding user.
            </remarks>
            
            <seealso cref="P:Sfs2X.Entities.User.Id"/>
        </member>
        <member name="P:Sfs2X.Entities.Buddy.Name">
            <summary>
            Indicates the name of this buddy.
            </summary>
            
            <remarks>
            This is equal to the name of the corresponding user.
            </remarks>
            
            <seealso cref="P:Sfs2X.Entities.User.Name"/>
        </member>
        <member name="P:Sfs2X.Entities.Buddy.IsBlocked">
            <summary>
            Indicates whether this buddy is blocked in the current user's buddies list or not.
            </summary>
            
            <remarks>
            A buddy can be blocked by means of a <see cref="T:Sfs2X.Requests.Buddylist.BlockBuddyRequest"/> request.
            </remarks>
            
            <seealso cref="T:Sfs2X.Requests.Buddylist.BlockBuddyRequest"/>
        </member>
        <member name="P:Sfs2X.Entities.Buddy.IsOnline">
            <summary>
            Indicates whether this buddy is online in the Buddy List system or not.
            </summary>
            
            <seealso cref="T:Sfs2X.Requests.Buddylist.GoOnlineRequest"/>
        </member>
        <member name="P:Sfs2X.Entities.Buddy.IsTemp">
            <summary>
            Indicates whether this buddy is temporary (non-persistent) in the current user's buddies list or not.
            </summary>
        </member>
        <member name="P:Sfs2X.Entities.Buddy.State">
            <summary>
            Returns the custom state of this buddy.
            </summary>
            
            <remarks>
            Examples of custom states are "Available", "Busy", "Be right back", etc. If the custom state is not set, <c>null</c> is returned.<br/>
            The list of available custom states is returned by the <see cref="P:Sfs2X.Entities.Managers.IBuddyManager.BuddyStates">IBuddyManager.BuddyStates</see> property.
            </remarks>
            
            <seealso cref="P:Sfs2X.Entities.Managers.IBuddyManager.BuddyStates"/>
        </member>
        <member name="P:Sfs2X.Entities.Buddy.NickName">
            <summary>
            Returns the nickname of this buddy.
            </summary>
            
            <remarks>
            If the nickname is not set, <c>null</c> is returned.
            </remarks>
        </member>
        <member name="P:Sfs2X.Entities.Buddy.Variables">
            <summary>
            Returns a list of BuddyVariable objects associated with the buddy.
            </summary>
            
            <seealso cref="T:Sfs2X.Requests.Buddylist.SetBuddyVariablesRequest"/>
        </member>
        <member name="M:Sfs2X.Entities.Buddy.GetVariable(System.String)">
            <summary>
            Retrieves a Buddy Variable from its name.
            </summary>
            
            <param name="varName">The name of the Buddy Variable to be retrieved.</param>
            
            <returns>The object representing the Buddy Variable, or <c>null</c> if no Buddy Variable with the passed name is associated with this buddy.</returns>
            
            <seealso cref="T:Sfs2X.Requests.Buddylist.SetBuddyVariablesRequest"/>
        </member>
        <member name="M:Sfs2X.Entities.Buddy.ContainsVariable(System.String)">
            <summary>
            Indicates whether this buddy has the specified Buddy Variable set or not.
            </summary>
            
            <param name="varName">The name of the Buddy Variable whose existance must be checked.</param>
            
            <returns><c>true</c> if a Buddy Variable with the passed name is set for this buddy.</returns>
        </member>
        <member name="M:Sfs2X.Entities.Buddy.GetOfflineVariables">
            <summary>
            Retrieves the list of persistent Buddy Variables of this buddy.
            </summary>
            
            <returns>A list of objects representing the offline Buddy Variables.</returns>
            
            <seealso cref="P:Sfs2X.Entities.Variables.BuddyVariable.IsOffline"/>
            <seealso cref="T:Sfs2X.Requests.Buddylist.SetBuddyVariablesRequest"/>
        </member>
        <member name="M:Sfs2X.Entities.Buddy.GetOnlineVariables">
            <summary>
            Retrieves the list of non-persistent Buddy Variables of this buddy.
            </summary>
            
            <returns>A list of objects representing the online Buddy Variables.</returns>
            
            <seealso cref="P:Sfs2X.Entities.Variables.BuddyVariable.IsOffline"/>
            <seealso cref="T:Sfs2X.Requests.Buddylist.SetBuddyVariablesRequest"/>
        </member>
        <member name="M:Sfs2X.Entities.Buddy.SetVariable(Sfs2X.Entities.Variables.BuddyVariable)">
            <exclude/>
        </member>
        <member name="M:Sfs2X.Entities.Buddy.SetVariables(System.Collections.Generic.ICollection{Sfs2X.Entities.Variables.BuddyVariable})">
            <exclude/>
        </member>
        <member name="M:Sfs2X.Entities.Buddy.RemoveVariable(System.String)">
            <exclude/>
        </member>
        <member name="M:Sfs2X.Entities.Buddy.ClearVolatileVariables">
            <exclude/>
        </member>
        <member name="T:Sfs2X.Entities.IMMOItem">
            <summary>
            The IMMOItem interface defines all the methods and properties that an object representing a SmartFoxServer MMOItem entity exposes.
            </summary>
            
            <remarks>
            In the SmartFoxServer 2X client API this interface is implemented by the <see cref="T:Sfs2X.Entities.MMOItem"/> class. Read the class description for additional informations.
            </remarks>
            
            <seealso cref="T:Sfs2X.Entities.MMOItem"/>
        </member>
        <member name="P:Sfs2X.Entities.IMMOItem.Id">
            <summary>
            Indicates the id of this item.
            </summary>
            
            <remarks>
            The id is unique and it is generated by the server when the item is created.
            </remarks>
        </member>
        <member name="M:Sfs2X.Entities.IMMOItem.GetVariables">
            <summary>
            Retrieves all the MMOItem Variables of this item.
            </summary>
            
            <returns>A list of objects representing the MMOItem Variables associated to this item.</returns>
        </member>
        <member name="M:Sfs2X.Entities.IMMOItem.GetVariable(System.String)">
            <summary>
            Retrieves an MMOItem Variable from its name.
            </summary>
            
            <param name="name">The name of the MMOItem Variable to be retrieved.</param>
            
            <returns> The object representing the MMOItem Variable, or <c>null</c> if no MMOItem Variable with the passed name is associated to this item.</returns>
        </member>
        <member name="M:Sfs2X.Entities.IMMOItem.SetVariable(Sfs2X.Entities.Variables.IMMOItemVariable)">
            <exclude/>
        </member>
        <member name="M:Sfs2X.Entities.IMMOItem.SetVariables(System.Collections.Generic.List{Sfs2X.Entities.Variables.IMMOItemVariable})">
            <exclude/>
        </member>
        <member name="M:Sfs2X.Entities.IMMOItem.ContainsVariable(System.String)">
            <summary>
            Indicates whether this item has the specified MMOItem Variable set or not.
            </summary>
            
            <param name="name"> The name of the MMOItem Variable whose existance must be checked.</param>
            
            <returns><c>true</c> if a MMOItem Variable with the passed name is set for this item.</returns>
            
            <seealso cref="T:Sfs2X.Entities.Variables.MMOItemVariable"/>
        </member>
        <member name="P:Sfs2X.Entities.IMMOItem.AOIEntryPoint">
             <summary>
             Returns the entry point of this item in the current user's AoI.
             </summary>
             
             <remarks>
             The returned coordinates are those that the item had when its presence in the current user's Area of Interest was last notified by a <see cref="F:Sfs2X.Core.SFSEvent.PROXIMITY_LIST_UPDATE">PROXIMITY_LIST_UPDATE</see> event.
             This field is populated only if the MMORoom in which the item exists is configured to receive such data.
             </remarks>
            
             <seealso cref="P:Sfs2X.Requests.MMO.MMORoomSettings.SendAOIEntryPoint"/>
             <seealso cref="F:Sfs2X.Core.SFSEvent.PROXIMITY_LIST_UPDATE"/>
        </member>
        <member name="T:Sfs2X.Entities.MMOItem">
            <summary>
            An MMOItem object represents an active non-player entity inside an MMORoom.
            </summary>
            
            <remarks>
            MMOItems can be used to represent bonuses, triggers, bullets, etc, or any other non-player entity that will be handled using the MMORoom's rules of visibility.
            This means that whenever one or more MMOItems fall within the Area of Interest of a user, their presence will be notified to that user by means of the
            <see cref="F:Sfs2X.Core.SFSEvent.PROXIMITY_LIST_UPDATE">PROXIMITY_LIST_UPDATE</see> event.
            <para/>
            MMOItems are identified by a unique ID and can have one or more MMOItem Variables associated to store custom data.
            <para/>
            <b>NOTE:</b> MMOItems can be created in a server side Extension only; client side creation is not allowed.
            </remarks>
            
            <seealso cref="T:Sfs2X.Entities.MMORoom"/>
            <seealso cref="T:Sfs2X.Entities.Variables.MMOItemVariable"/>
        </member>
        <member name="M:Sfs2X.Entities.MMOItem.FromSFSArray(Sfs2X.Entities.Data.ISFSArray)">
            <exclude/>
        </member>
        <member name="M:Sfs2X.Entities.MMOItem.#ctor(System.Int32)">
            <exclude/>
        </member>
        <member name="P:Sfs2X.Entities.MMOItem.Id">
            <inheritdoc />
        </member>
        <member name="P:Sfs2X.Entities.MMOItem.AOIEntryPoint">
            <inheritdoc />
        </member>
        <member name="M:Sfs2X.Entities.MMOItem.GetVariables">
            <inheritdoc />
        </member>
        <member name="M:Sfs2X.Entities.MMOItem.GetVariable(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Sfs2X.Entities.MMOItem.SetVariable(Sfs2X.Entities.Variables.IMMOItemVariable)">
            <exclude/>
        </member>
        <member name="M:Sfs2X.Entities.MMOItem.SetVariables(System.Collections.Generic.List{Sfs2X.Entities.Variables.IMMOItemVariable})">
            <exclude/>
        </member>
        <member name="M:Sfs2X.Entities.MMOItem.ContainsVariable(System.String)">
            <inheritdoc />
        </member>
        <member name="T:Sfs2X.Entities.MMORoom">
             <summary>
             The MMORoom object represents a specialized type of Room entity on the client.
             </summary>
            
             <remarks>
             The MMORoom is ideal for huge virtual worlds and MMO games because it works with proximity lists instead of "regular" users lists.
             This allows thousands of users to interact with each other based on their Area of Interest (AoI). The AoI represents a range around the user
             that is affected by server and user events, outside which no other events are received.
             <para/>
             The size of the AoI is set at Room creation time and it is the same for all users who joined it.
             Supposing that the MMORoom hosts a 3D virtual world, setting an AoI of (x=100, y=100, z=40) for the Room tells the server to transmit updates and broadcast
             events to and from those users that fall within the AoI range around the current user; this means the area within +/- 100 units on the X axis, +/- 100 units on the Y axis and +/- 40 units on the Z axis.
             <para/>
             As the user moves around in the virtual environment, he can update his position in the corresponding MMORoom and thus continuously receive events
             about other users (and items - see below) entering and leaving his AoI.
             The player will be able to update his position via the <em>SetUserPositionRequest</em> request and receive updates on his current proximity list by means of the
             <see cref="F:Sfs2X.Core.SFSEvent.PROXIMITY_LIST_UPDATE">PROXIMITY_LIST_UPDATE</see> event.
             <para/>
             Finally, MMORooms can also host any number of "MMOItems" which represent dynamic non-player objects that users can interact with.
             They are handled by the MMORoom using the same rules of visibility described before.
             </remarks>
             
             <seealso cref="T:Sfs2X.Requests.CreateRoomRequest"/>
             <seealso cref="T:Sfs2X.Requests.MMO.MMORoomSettings"/>
             <seealso cref="T:Sfs2X.Requests.MMO.SetUserPositionRequest"/>
             <seealso cref="F:Sfs2X.Core.SFSEvent.PROXIMITY_LIST_UPDATE"/>
             <seealso cref="T:Sfs2X.Entities.MMOItem"/>
        </member>
        <member name="M:Sfs2X.Entities.MMORoom.#ctor(System.Int32,System.String,System.String)">
            <exclude/>
        </member>
        <member name="M:Sfs2X.Entities.MMORoom.#ctor(System.Int32,System.String)">
            <exclude/>
        </member>
        <member name="P:Sfs2X.Entities.MMORoom.DefaultAOI">
            <summary>
            Returns the default Area of Interest (AoI) of this MMORoom.
            </summary>
            
            <seealso cref="P:Sfs2X.Requests.MMO.MMORoomSettings.DefaultAOI"/>
        </member>
        <member name="P:Sfs2X.Entities.MMORoom.LowerMapLimit">
            <summary>
            Returns the lower coordinates limit of the virtual environment represented by the MMORoom along the X,Y,Z axes.
            </summary>
            
            <remarks>
            If <c>null</c> is returned, then no limits were set at Room creation time.
            </remarks>
            
            <seealso cref="P:Sfs2X.Requests.MMO.MMORoomSettings.MapLimits"/>
        </member>
        <member name="P:Sfs2X.Entities.MMORoom.HigherMapLimit">
            <summary>
            Returns the higher coordinates limit of the virtual environment represented by the MMORoom along the X,Y,Z axes.
            </summary>
            
            <remarks>
            If <c>null</c> is returned, then no limits were set at Room creation time.
            </remarks>
            
            <seealso cref="P:Sfs2X.Requests.MMO.MMORoomSettings.MapLimits"/>
        </member>
        <member name="M:Sfs2X.Entities.MMORoom.GetMMOItem(System.Int32)">
            <summary>
            Retrieves an <em>MMOItem</em> object from its <em>id</em> property.
            </summary>
            
            <remarks>
            The item is available to the current user if it falls within his Area of Interest only.
            </remarks>
            
            <param name="id">The id of the item to be retrieved.</param>
            
            <returns>An <em>MMOItem</em> object, or <c>null</c> if the item with the passed id is not in proximity of the current user.</returns>
        </member>
        <member name="M:Sfs2X.Entities.MMORoom.GetMMOItems">
            <summary>
            Retrieves all <em>MMOItem</em> object in the MMORoom that fall within the current user's Area of Interest.
            </summary>
            
            <returns>A list of <em>MMOItem</em> objects, or an empty list if no item is in proximity of the current user.</returns>
        </member>
        <member name="M:Sfs2X.Entities.MMORoom.AddMMOItem(Sfs2X.Entities.IMMOItem)">
            <exclude/>
        </member>
        <member name="M:Sfs2X.Entities.MMORoom.RemoveItem(System.Int32)">
            <exclude/>
        </member>
        <member name="T:Sfs2X.Entities.Room">
            <summary>
            The Room interface defines all the methods and properties that an object representing a SmartFoxServer Room entity exposes.
            </summary>
            
            <remarks>
            In the SmartFoxServer 2X client API this interface is implemented by the <see cref="T:Sfs2X.Entities.SFSRoom"/> class. Read the class description for additional informations.
            </remarks>
            
            <seealso cref="T:Sfs2X.Entities.SFSRoom"/>
        </member>
        <member name="P:Sfs2X.Entities.Room.Id">
            <summary>
            Indicates the id of this Room.
            </summary>
            
            <remarks>
            The id is unique and it is generated by the server when the Room is created.
            </remarks>
        </member>
        <member name="P:Sfs2X.Entities.Room.Name">
            <summary>
            Indicates the name of this Room.
            </summary>
            
            <remarks>
            Two Rooms in the same Zone can't have the same name.
            <para/>
            <b>NOTE</b>: setting this property manually has no effect on the server and can disrupt the API functioning. Use the <see cref="T:Sfs2X.Requests.ChangeRoomNameRequest"/> request instead.
            </remarks>
            
            <seealso cref="T:Sfs2X.Requests.ChangeRoomNameRequest"/>
        </member>
        <member name="P:Sfs2X.Entities.Room.GroupId">
            <summary>
            Returns the Room Group name.
            </summary>
            
            <remarks>
            Each Group is identified by a unique string (its name or id) and it represents a different "container" for Rooms.
            <para/>
            Room Groups enable developers to organize Rooms under different types or categories and let clients select only those Groups they are interested in,
            in order to receive their events only. This is done via the <see cref="T:Sfs2X.Requests.SubscribeRoomGroupRequest"/> and <see cref="T:Sfs2X.Requests.UnsubscribeRoomGroupRequest"/> requests.
            <para/>
            The default value is <c>default</c>.
            </remarks>
            
            <seealso cref="T:Sfs2X.Requests.SubscribeRoomGroupRequest"/>
            <seealso cref="T:Sfs2X.Requests.UnsubscribeRoomGroupRequest"/>
        </member>
        <member name="P:Sfs2X.Entities.Room.IsJoined">
            <summary>
            Indicates whether the client joined this Room or not.
            </summary>
            
            <remarks>
            <b>NOTE</b>: setting this property manually has no effect on the server and can disrupt the API functioning. Use the <see cref="T:Sfs2X.Requests.JoinRoomRequest"/> request to join a new Room instead.
            </remarks>
            
            <seealso cref="T:Sfs2X.Requests.JoinRoomRequest"/>
        </member>
        <member name="P:Sfs2X.Entities.Room.IsGame">
            <summary>
            Indicates whether this is a Game Room or not.
            </summary>
            
            <remarks>
            <b>NOTE</b>: setting this property manually has no effect on the server and can disrupt the API functioning. This flag must be set when creating the Room.
            </remarks>
        </member>
        <member name="P:Sfs2X.Entities.Room.IsHidden">
            <summary>
            Indicates whether this Room is hidden or not.
            </summary>
            
            <remarks>
            This is a utility flag that can be used by developers to hide certain Rooms from the interface of their application.
            <para/>
            <b>NOTE</b>: setting this property manually has no effect on the server and can disrupt the API functioning. This flag must be set when creating the Room.
            </remarks>
        </member>
        <member name="P:Sfs2X.Entities.Room.IsPasswordProtected">
            <summary>
            Indicates whether this Room requires a password to be joined or not.
            </summary>
            
            <remarks>
            <b>NOTE</b>: setting this property manually has no effect on the server and can disrupt the API functioning.
            This flag depends on the Room's password set when the Room is created or by means of the <seealso cref="T:Sfs2X.Requests.ChangeRoomPasswordStateRequest"/> request.
            </remarks>
            
            <seealso cref="T:Sfs2X.Requests.ChangeRoomPasswordStateRequest"/>
        </member>
        <member name="P:Sfs2X.Entities.Room.IsManaged">
            <exclude/>
        </member>
        <member name="P:Sfs2X.Entities.Room.UserCount">
            <summary>
            Returns the current number of users in this Room.
            </summary>
            
            <remarks>
            In case of Game Rooms, this is the number of players.
            <para/>
            <b>NOTE</b>: setting this property manually has no effect on the server and can disrupt the API functioning. This flag depends on the Room state.
            </remarks>
        </member>
        <member name="P:Sfs2X.Entities.Room.MaxUsers">
            <summary>
            Returns the maximum number of users allowed in this Room.
            </summary>
            
            <remarks>
            In case of Game Rooms, this is the maximum number of players.
            <para/>
            <b>NOTE</b>: setting this property manually has no effect on the server and can disrupt the API functioning. This flag must be set when creating the Room.
            </remarks>
        </member>
        <member name="P:Sfs2X.Entities.Room.SpectatorCount">
            <summary>
            Returns the current number of spectators in this Room (Game Rooms only).
            </summary>
            
            <remarks>
            <b>NOTE</b>: setting this property manually has no effect on the server and can disrupt the API functioning. This flag depends on the Room state.
            </remarks>
        </member>
        <member name="P:Sfs2X.Entities.Room.MaxSpectators">
            <summary>
            Returns the maximum number of spectators allowed in this Room (Game Rooms only).
            </summary>
            
            <remarks>
            <b>NOTE</b>: setting this property manually has no effect on the server and can disrupt the API functioning. This flag must be set when creating the Game Room.
            </remarks>
        </member>
        <member name="P:Sfs2X.Entities.Room.Capacity">
            <summary>
            Returns the maximum amount of users, including spectators, that can be contained in this Room.
            </summary> 
        </member>
        <member name="M:Sfs2X.Entities.Room.AddUser(Sfs2X.Entities.User)">
            <exclude/>
        </member>
        <member name="M:Sfs2X.Entities.Room.RemoveUser(Sfs2X.Entities.User)">
            <exclude/>
        </member>
        <member name="M:Sfs2X.Entities.Room.ContainsUser(Sfs2X.Entities.User)">
            <summary>
            Indicates whether the specified user is currently inside this Room or not.
            </summary>
            
            <param name="user">The object representing the user whose presence in this Room must be checked.</param>
            
            <returns><c>true</c> if the user is inside this Room; false otherwise.</returns>
        </member>
        <member name="M:Sfs2X.Entities.Room.GetUserByName(System.String)">
            <summary>
            Retrieves a User object from its name property.
            </summary>
            
            <param name="name">The name of the user to be found.</param>
            
            <returns>The object representing the user, or <c>null</c> if no user with the passed name exists in this Room.</returns>
        </member>
        <member name="M:Sfs2X.Entities.Room.GetUserById(System.Int32)">
            <summary>
            Retrieves a User object from its id property.
            </summary>
            
            <param name="id">The id of the user to be found.</param>
            
            <returns>The object representing the user, or <c>null</c> if no user with the passed id exists in this Room.</returns>
        </member>
        <member name="P:Sfs2X.Entities.Room.UserList">
            <summary>
            Returns a list of User objects representing all the users currently inside this Room.
            </summary>
        </member>
        <member name="P:Sfs2X.Entities.Room.PlayerList">
            <summary>
            Returns a list of User objects representing the players currently inside this Room (Game Rooms only).
            </summary>
        </member>
        <member name="P:Sfs2X.Entities.Room.SpectatorList">
            <summary>
            Returns a list of User objects representing the spectators currently inside this Room (Game Rooms only).
            </summary>
        </member>
        <member name="M:Sfs2X.Entities.Room.GetVariable(System.String)">
            <summary>
            Retrieves a Room Variable from its name.
            </summary>
            
            <param name="name">The name of the Room Variable to be retrieved.</param>
            
            <returns>The object representing the Room Variable, or <c>null</c> if no Room Variable with the passed name exists in this Room.</returns>
            
            <seealso cref="T:Sfs2X.Requests.SetRoomVariablesRequest"/>
        </member>
        <member name="M:Sfs2X.Entities.Room.GetVariables">
            <summary>
            Retrieves all the Room Variables of this Room.
            </summary>
            
            <returns>A list of objects representing the Room Variables associated with this Room.</returns>
            
            <seealso cref="T:Sfs2X.Requests.SetRoomVariablesRequest"/>
        </member>
        <member name="M:Sfs2X.Entities.Room.SetVariable(Sfs2X.Entities.Variables.RoomVariable)">
            <exclude/>
        </member>
        <member name="M:Sfs2X.Entities.Room.SetVariables(System.Collections.Generic.ICollection{Sfs2X.Entities.Variables.RoomVariable})">
            <exclude/>
        </member>
        <member name="M:Sfs2X.Entities.Room.ContainsVariable(System.String)">
            <summary>
            Indicates whether this Room has the specified Room Variable set or not.
            </summary>
            
            <param name="name"> The name of the Room Variable whose existance in this Room must be checked.</param>
            
            <returns><c>true</c> if a Room Variable with the passed name exists in this Room.</returns>
            
            <seealso cref="T:Sfs2X.Entities.Variables.RoomVariable"/>
        </member>
        <member name="P:Sfs2X.Entities.Room.Properties">
            <summary>
            Defines a generic utility object that can be used to store custom Room data.
            </summary>
            
            <remarks>
            The values added to this object are for client-side use only and are never transmitted to the server or to the other clients.
            </remarks>
        </member>
        <member name="P:Sfs2X.Entities.Room.RoomManager">
            <summary>
            Returns a reference to the Room Manager which manages this Room.
            </summary>
            
            <remarks>
            <b>NOTE</b>: setting this property manually has no effect on the server and can disrupt the API functioning.
            </remarks>
        </member>
        <member name="M:Sfs2X.Entities.Room.Merge(Sfs2X.Entities.Room)">
            <exclude/>
        </member>
        <member name="T:Sfs2X.Entities.SFSBuddy">
            <summary>
            The SFSBuddy object represents a buddy in the current user's buddies list.
            </summary>
            
            <remarks>
            A buddy is marked out by the following characteristics.
            <ul>
            	<li><b>Nickname</b>: a buddy can have an optional nickname, which differs from the username used during the login process.</li>
            	<li><b>Online/offline state</b>: users can be online or offline as buddies in the Buddy List system. By default a buddy is online every time he joins a Zone, but the user can also switch the state to offline at runtime, and disappear from other user's buddies list. This state is persistent and it is based on a reserved Buddy Variable.</li>
            	<li><b>Custom state</b>: each user can have a typical IM state such as "Available", "Away", "Occupied", etc. State can be selected among the custom ones defined in the Zone configuration, which can be changed or enriched at any time. This state is persistent and it is based on a reserved Buddy Variable.</li>
            	<li><b>Blocked buddy</b>: buddies that are blocked in a user's buddies list won't be able to send messages to that user; also they won't be able to see if the user is online or offline in the Buddy List system.</li>
            	<li><b>Temporary buddy</b>: a temporary buddy is added to the current user's buddies list whenever another user adds him to his own buddies list. In this way users can "see" each other and exchange messages. If the current user doesn't add that temporary buddy to his buddies list voluntarily, that buddy won't be persisted and will be lost upon disconnection.</li>
            	<li><b>Variables</b>: Buddy Variables enable each user to show (and send updates on) specific custom informations to each user to whom he is a buddy. For example one could send realtime updates on his last activity, or post the title of the song he's listening right now, or scores, rankings and whatnot.</li>
            </ul>
            </remarks>
            
            <seealso cref="P:Sfs2X.SmartFox.BuddyManager"/>
            <seealso cref="T:Sfs2X.Entities.Variables.BuddyVariable"/>
        </member>
        <member name="F:Sfs2X.Entities.SFSBuddy.name">
            <exclude/>
        </member>
        <member name="F:Sfs2X.Entities.SFSBuddy.id">
            <exclude/>
        </member>
        <member name="F:Sfs2X.Entities.SFSBuddy.isBlocked">
            <exclude/>
        </member>
        <member name="F:Sfs2X.Entities.SFSBuddy.variables">
            <exclude/>
        </member>
        <member name="F:Sfs2X.Entities.SFSBuddy.isTemp">
            <exclude/>
        </member>
        <member name="M:Sfs2X.Entities.SFSBuddy.FromSFSArray(Sfs2X.Entities.Data.ISFSArray)">
            <exclude/>
        </member>
        <member name="M:Sfs2X.Entities.SFSBuddy.#ctor(System.Int32,System.String)">
            <exclude/>
        </member>
        <member name="M:Sfs2X.Entities.SFSBuddy.#ctor(System.Int32,System.String,System.Boolean)">
            <exclude/>
        </member>
        <member name="M:Sfs2X.Entities.SFSBuddy.#ctor(System.Int32,System.String,System.Boolean,System.Boolean)">
            <exclude/>
        </member>
        <member name="P:Sfs2X.Entities.SFSBuddy.Id">
            <inheritdoc />
        </member>
        <member name="P:Sfs2X.Entities.SFSBuddy.IsBlocked">
            <inheritdoc />
        </member>
        <member name="P:Sfs2X.Entities.SFSBuddy.IsTemp">
            <inheritdoc />
        </member>
        <member name="P:Sfs2X.Entities.SFSBuddy.Name">
            <inheritdoc />
        </member>
        <member name="P:Sfs2X.Entities.SFSBuddy.IsOnline">
            <inheritdoc />
        </member>
        <member name="P:Sfs2X.Entities.SFSBuddy.State">
            <inheritdoc />
        </member>
        <member name="P:Sfs2X.Entities.SFSBuddy.NickName">
            <inheritdoc />
        </member>
        <member name="P:Sfs2X.Entities.SFSBuddy.Variables">
            <inheritdoc />
        </member>
        <member name="M:Sfs2X.Entities.SFSBuddy.GetVariable(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Sfs2X.Entities.SFSBuddy.GetOfflineVariables">
            <inheritdoc />
        </member>
        <member name="M:Sfs2X.Entities.SFSBuddy.GetOnlineVariables">
            <inheritdoc />
        </member>
        <member name="M:Sfs2X.Entities.SFSBuddy.ContainsVariable(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Sfs2X.Entities.SFSBuddy.SetVariable(Sfs2X.Entities.Variables.BuddyVariable)">
            <exclude/>
        </member>
        <member name="M:Sfs2X.Entities.SFSBuddy.SetVariables(System.Collections.Generic.ICollection{Sfs2X.Entities.Variables.BuddyVariable})">
            <exclude/>
        </member>
        <member name="M:Sfs2X.Entities.SFSBuddy.RemoveVariable(System.String)">
            <exclude/>
        </member>
        <member name="M:Sfs2X.Entities.SFSBuddy.ClearVolatileVariables">
            <exclude/>
        </member>
        <member name="M:Sfs2X.Entities.SFSBuddy.ToString">
            <summary>
            Returns a string that contains the buddy name and id.
            </summary>
            
            <returns>
            The string representation of the <see cref="T:Sfs2X.Entities.SFSBuddy"/> object.
            </returns>
        </member>
        <member name="T:Sfs2X.Entities.SFSConstants">
            <exclude/>
        </member>
        <member name="F:Sfs2X.Entities.SFSConstants.DEFAULT_GROUP_ID">
            <exclude/>
        </member>
        <member name="F:Sfs2X.Entities.SFSConstants.REQUEST_UDP_PACKET_ID">
            <exclude/>
        </member>
        <member name="T:Sfs2X.Entities.SFSRoom">
            <summary>
            The SFSRoom object represents a SmartFoxServer Room entity on the client.
            </summary>
            
            <remarks>
            The SmartFoxServer 2X client API are not aware of all the Rooms which exist on the server side, but only of those that are joined by the user
            and those in the Room Groups that have been subscribed. Subscribing to one or more Groups allows the client to listen to Room events in specific "areas" of the Zone,
            without having to retrieve and keep synchronized the details of all available Rooms, thus reducing the traffic between the client and the server considerably.
            <para/>
            The list of available Rooms is created after a successful login and it is kept updated continuously by the server.
            </remarks>
            
            <seealso cref="P:Sfs2X.SmartFox.RoomManager"/>
            <seealso cref="T:Sfs2X.Requests.CreateRoomRequest"/>
            <seealso cref="T:Sfs2X.Requests.JoinRoomRequest"/>
            <seealso cref="T:Sfs2X.Requests.SubscribeRoomGroupRequest"/>
            <seealso cref="T:Sfs2X.Requests.UnsubscribeRoomGroupRequest"/>
            <seealso cref="T:Sfs2X.Requests.ChangeRoomNameRequest"/>
            <seealso cref="T:Sfs2X.Requests.ChangeRoomPasswordStateRequest"/>
            <seealso cref="T:Sfs2X.Requests.ChangeRoomCapacityRequest"/>
        </member>
        <member name="F:Sfs2X.Entities.SFSRoom.id">
            <exclude/>
        </member>
        <member name="F:Sfs2X.Entities.SFSRoom.name">
            <exclude/>
        </member>
        <member name="F:Sfs2X.Entities.SFSRoom.groupId">
            <exclude/>
        </member>
        <member name="F:Sfs2X.Entities.SFSRoom.isGame">
            <exclude/>
        </member>
        <member name="F:Sfs2X.Entities.SFSRoom.isHidden">
            <exclude/>
        </member>
        <member name="F:Sfs2X.Entities.SFSRoom.isJoined">
            <exclude/>
        </member>
        <member name="F:Sfs2X.Entities.SFSRoom.isPasswordProtected">
            <exclude/>
        </member>
        <member name="F:Sfs2X.Entities.SFSRoom.isManaged">
            <exclude/>
        </member>
        <member name="F:Sfs2X.Entities.SFSRoom.variables">
            <exclude/>
        </member>
        <member name="F:Sfs2X.Entities.SFSRoom.properties">
            <exclude/>
        </member>
        <member name="F:Sfs2X.Entities.SFSRoom.userManager">
            <exclude/>
        </member>
        <member name="F:Sfs2X.Entities.SFSRoom.maxUsers">
            <exclude/>
        </member>
        <member name="F:Sfs2X.Entities.SFSRoom.maxSpectators">
            <exclude/>
        </member>
        <member name="F:Sfs2X.Entities.SFSRoom.userCount">
            <exclude/>
        </member>
        <member name="F:Sfs2X.Entities.SFSRoom.specCount">
            <exclude/>
        </member>
        <member name="F:Sfs2X.Entities.SFSRoom.roomManager">
            <exclude/>
        </member>
        <member name="M:Sfs2X.Entities.SFSRoom.FromSFSArray(Sfs2X.Entities.Data.ISFSArray)">
            <exclude/>
        </member>
        <member name="M:Sfs2X.Entities.SFSRoom.#ctor(System.Int32,System.String)">
            <exclude/>
        </member>
        <member name="M:Sfs2X.Entities.SFSRoom.#ctor(System.Int32,System.String,System.String)">
            <exclude/>
        </member>
        <member name="P:Sfs2X.Entities.SFSRoom.Id">
            <inheritdoc />
        </member>
        <member name="P:Sfs2X.Entities.SFSRoom.Name">
            <inheritdoc />
        </member>
        <member name="P:Sfs2X.Entities.SFSRoom.GroupId">
            <inheritdoc />
        </member>
        <member name="P:Sfs2X.Entities.SFSRoom.IsGame">
            <inheritdoc />
        </member>
        <member name="P:Sfs2X.Entities.SFSRoom.IsHidden">
            <inheritdoc />
        </member>
        <member name="P:Sfs2X.Entities.SFSRoom.IsJoined">
            <inheritdoc />
        </member>
        <member name="P:Sfs2X.Entities.SFSRoom.IsPasswordProtected">
            <inheritdoc />
        </member>
        <member name="P:Sfs2X.Entities.SFSRoom.IsManaged">
            <exclude/>
        </member>
        <member name="P:Sfs2X.Entities.SFSRoom.MaxSpectators">
            <inheritdoc />
        </member>
        <member name="P:Sfs2X.Entities.SFSRoom.Properties">
            <inheritdoc />
        </member>
        <member name="M:Sfs2X.Entities.SFSRoom.GetVariables">
            <inheritdoc />
        </member>
        <member name="M:Sfs2X.Entities.SFSRoom.GetVariable(System.String)">
            <inheritdoc />
        </member>
        <member name="P:Sfs2X.Entities.SFSRoom.UserCount">
            <inheritdoc />
        </member>
        <member name="P:Sfs2X.Entities.SFSRoom.MaxUsers">
            <inheritdoc />
        </member>
        <member name="P:Sfs2X.Entities.SFSRoom.Capacity">
            <inheritdoc />
        </member>
        <member name="P:Sfs2X.Entities.SFSRoom.SpectatorCount">
            <inheritdoc />
        </member>
        <member name="M:Sfs2X.Entities.SFSRoom.GetUserByName(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Sfs2X.Entities.SFSRoom.GetUserById(System.Int32)">
            <inheritdoc />
        </member>
        <member name="P:Sfs2X.Entities.SFSRoom.UserList">
            <inheritdoc />
        </member>
        <member name="P:Sfs2X.Entities.SFSRoom.PlayerList">
            <inheritdoc />
        </member>
        <member name="P:Sfs2X.Entities.SFSRoom.SpectatorList">
            <inheritdoc />
        </member>
        <member name="M:Sfs2X.Entities.SFSRoom.RemoveUser(Sfs2X.Entities.User)">
            <exclude/>
        </member>
        <member name="M:Sfs2X.Entities.SFSRoom.SetVariable(Sfs2X.Entities.Variables.RoomVariable)">
            <exclude/>
        </member>
        <member name="M:Sfs2X.Entities.SFSRoom.SetVariables(System.Collections.Generic.ICollection{Sfs2X.Entities.Variables.RoomVariable})">
            <exclude/>
        </member>
        <member name="M:Sfs2X.Entities.SFSRoom.ContainsVariable(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Sfs2X.Entities.SFSRoom.AddUser(Sfs2X.Entities.User)">
            <exclude/>
        </member>
        <member name="M:Sfs2X.Entities.SFSRoom.ContainsUser(Sfs2X.Entities.User)">
            <inheritdoc />
        </member>
        <member name="P:Sfs2X.Entities.SFSRoom.RoomManager">
            <exclude/>
        </member>
        <member name="M:Sfs2X.Entities.SFSRoom.ToString">
            <summary>
            Returns a string that contains the Room id, name and id of the Group to which it belongs.
            </summary>
            
            <returns>
            The string representation of the <see cref="T:Sfs2X.Entities.SFSRoom"/> object.
            </returns>
        </member>
        <member name="M:Sfs2X.Entities.SFSRoom.Merge(Sfs2X.Entities.Room)">
            <exclude/>
        </member>
        <member name="T:Sfs2X.Entities.SFSUser">
            <summary>
            The SFSUser object represents a client logged in SmartFoxServer.
            </summary>
            
            <remarks>
            The SmartFoxServer 2X client API are not aware of all the clients (users) connected to the server, but only of those that are in the same Rooms joined by the current client;
            this reduces the traffic between the client and the server considerably. In order to interact with other users the client should join other Rooms
            or use the Buddy List system to keep track of and interact with friends.
            </remarks>
            
            <seealso cref="P:Sfs2X.SmartFox.UserManager"/>
        </member>
        <member name="F:Sfs2X.Entities.SFSUser.id">
            <exclude/>
        </member>
        <member name="F:Sfs2X.Entities.SFSUser.privilegeId">
            <exclude/>
        </member>
        <member name="F:Sfs2X.Entities.SFSUser.name">
            <exclude/>
        </member>
        <member name="F:Sfs2X.Entities.SFSUser.isItMe">
            <exclude/>
        </member>
        <member name="F:Sfs2X.Entities.SFSUser.variables">
            <exclude/>
        </member>
        <member name="F:Sfs2X.Entities.SFSUser.properties">
            <exclude/>
        </member>
        <member name="F:Sfs2X.Entities.SFSUser.isModerator">
            <exclude/>
        </member>
        <member name="F:Sfs2X.Entities.SFSUser.playerIdByRoomId">
            <exclude/>
        </member>
        <member name="F:Sfs2X.Entities.SFSUser.userManager">
            <exclude/>
        </member>
        <member name="F:Sfs2X.Entities.SFSUser.aoiEntryPoint">
            <exclude/>
        </member>
        <member name="M:Sfs2X.Entities.SFSUser.FromSFSArray(Sfs2X.Entities.Data.ISFSArray,Sfs2X.Entities.Room)">
            <exclude/>
        </member>
        <member name="M:Sfs2X.Entities.SFSUser.FromSFSArray(Sfs2X.Entities.Data.ISFSArray)">
            <exclude/>
        </member>
        <member name="M:Sfs2X.Entities.SFSUser.#ctor(System.Int32,System.String)">
            <exclude/>
        </member>
        <member name="M:Sfs2X.Entities.SFSUser.#ctor(System.Int32,System.String,System.Boolean)">
            <exclude/>
        </member>
        <member name="M:Sfs2X.Entities.SFSUser.Init(System.Int32,System.String,System.Boolean)">
            <exclude/>
        </member>
        <member name="P:Sfs2X.Entities.SFSUser.Id">
            <inheritdoc />
        </member>
        <member name="P:Sfs2X.Entities.SFSUser.Name">
            <inheritdoc />
        </member>
        <member name="P:Sfs2X.Entities.SFSUser.PlayerId">
            <inheritdoc />
        </member>
        <member name="M:Sfs2X.Entities.SFSUser.IsJoinedInRoom(Sfs2X.Entities.Room)">
            <inheritdoc />
        </member>
        <member name="P:Sfs2X.Entities.SFSUser.PrivilegeId">
            <inheritdoc />
        </member>
        <member name="M:Sfs2X.Entities.SFSUser.IsGuest">
            <inheritdoc />
        </member>
        <member name="M:Sfs2X.Entities.SFSUser.IsStandardUser">
            <inheritdoc />
        </member>
        <member name="M:Sfs2X.Entities.SFSUser.IsModerator">
            <inheritdoc />
        </member>
        <member name="M:Sfs2X.Entities.SFSUser.IsAdmin">
            <inheritdoc />
        </member>
        <member name="P:Sfs2X.Entities.SFSUser.IsPlayer">
            <inheritdoc />
        </member>
        <member name="P:Sfs2X.Entities.SFSUser.IsSpectator">
            <inheritdoc />
        </member>
        <member name="M:Sfs2X.Entities.SFSUser.GetPlayerId(Sfs2X.Entities.Room)">
            <inheritdoc />
        </member>
        <member name="M:Sfs2X.Entities.SFSUser.SetPlayerId(System.Int32,Sfs2X.Entities.Room)">
            <exclude/>
        </member>
        <member name="M:Sfs2X.Entities.SFSUser.RemovePlayerId(Sfs2X.Entities.Room)">
            <exclude/>
        </member>
        <member name="M:Sfs2X.Entities.SFSUser.IsPlayerInRoom(Sfs2X.Entities.Room)">
            <inheritdoc />
        </member>
        <member name="M:Sfs2X.Entities.SFSUser.IsSpectatorInRoom(Sfs2X.Entities.Room)">
            <inheritdoc />
        </member>
        <member name="P:Sfs2X.Entities.SFSUser.IsItMe">
            <inheritdoc />
        </member>
        <member name="P:Sfs2X.Entities.SFSUser.UserManager">
            <exclude/>
        </member>
        <member name="M:Sfs2X.Entities.SFSUser.GetVariables">
            <inheritdoc />
        </member>
        <member name="M:Sfs2X.Entities.SFSUser.GetVariable(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Sfs2X.Entities.SFSUser.SetVariable(Sfs2X.Entities.Variables.UserVariable)">
            <exclude/>
        </member>
        <member name="M:Sfs2X.Entities.SFSUser.SetVariables(System.Collections.Generic.ICollection{Sfs2X.Entities.Variables.UserVariable})">
            <exclude/>
        </member>
        <member name="M:Sfs2X.Entities.SFSUser.ContainsVariable(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Sfs2X.Entities.SFSUser.ReplaceVariables(System.Collections.Generic.ICollection{Sfs2X.Entities.Variables.UserVariable})">
            <exclude/>
        </member>
        <member name="P:Sfs2X.Entities.SFSUser.Properties">
            <inheritdoc />
        </member>
        <member name="P:Sfs2X.Entities.SFSUser.AOIEntryPoint">
            <inheritdoc />
        </member>
        <member name="M:Sfs2X.Entities.SFSUser.ToString">
            <summary>
            Returns a string that contains the user id, name and a boolean indicating if the this object represents the current client.
            </summary>
            
            <returns>
            The string representation of the <see cref="T:Sfs2X.Entities.SFSUser"/> object.
            </returns>
        </member>
        <member name="T:Sfs2X.Entities.User">
            <summary>
            The User interface defines all the methods and properties that an object representing a SmartFoxServer User entity exposes.
            </summary>
            
            <remarks>
            In the SmartFoxServer 2X client API this interface is implemented by the <see cref="T:Sfs2X.Entities.SFSUser"/> class. Read the class description for additional informations.
            </remarks>
            
            <seealso cref="T:Sfs2X.Entities.SFSUser"/>
        </member>
        <member name="P:Sfs2X.Entities.User.Id">
            <summary>
            Indicates the id of this user.
            </summary>
            
            <remarks>
            The id is unique and it is generated by the server when the user is created.
            </remarks>
        </member>
        <member name="P:Sfs2X.Entities.User.Name">
            <summary>
            Indicates the name of this user.
            </summary>
            
            <remarks>
            Two users in the same Zone can't have the same name.
            </remarks>
        </member>
        <member name="P:Sfs2X.Entities.User.PlayerId">
            <summary>
            Returns the id of this user as a player in a Game Room.
            </summary>
            
            <remarks>
            This property differs from <see cref="P:Sfs2X.Entities.User.Id"/> property and it used to indicate which player number is assigned to a user inside a Game Room.
            For example, in a Game Room for 5 players the first client joining it will have its <em>playerId</em> equal to 1, the second will have it equal to 2 and so forth.
            When a user leaves the Room the player slot is freed up and the next user joining the Room will take it.
            <para/>
            This property applies to Game Rooms only; in standard Rooms it is always 0. Also, in Game Rooms a <em>playerId</em> value lower than 0 indicates that the user is a spectator.
            <para/>
            If the user is inside multiple Game Rooms at the same time, a different <em>playerId</em> value will be assigned to him in each Room.
            In this case this property returns the value corresponding to the last joined Room; in order to obtain the <em>playerId</em> value in a specific Room, use the <see cref="M:Sfs2X.Entities.User.GetPlayerId(Sfs2X.Entities.Room)"/> method.
            </remarks>
            
            <seealso cref="M:Sfs2X.Entities.User.GetPlayerId(Sfs2X.Entities.Room)"/>
        </member>
        <member name="P:Sfs2X.Entities.User.IsPlayer">
            <summary>
            Indicates whether this user is a player (playerId greater than 0) in the last joined Room or not.
            </summary>
            
            <remarks>
            Non-Game Rooms always return <c>false</c>.
            <para/>
            If the user is inside multiple Game Rooms at the same time, use the <see cref="M:Sfs2X.Entities.User.IsPlayerInRoom(Sfs2X.Entities.Room)"/> method.
            </remarks>
            
            <seealso cref="M:Sfs2X.Entities.User.IsPlayerInRoom(Sfs2X.Entities.Room)"/>
            <seealso cref="P:Sfs2X.Entities.User.PlayerId"/>
            <seealso cref="P:Sfs2X.Entities.User.IsSpectator"/>
        </member>
        <member name="P:Sfs2X.Entities.User.IsSpectator">
            <summary>
            Indicates whether this user is a spectator (playerId lower than 0) in the last joined Room or not.
            </summary>
            
            <remarks>
            Non-Game Rooms always return <c>false</c>.
            <para/>
            If the user is inside multiple Game Rooms at the same time, use the <see cref="M:Sfs2X.Entities.User.IsSpectatorInRoom(Sfs2X.Entities.Room)"/> method.
            </remarks>
            
            <seealso cref="M:Sfs2X.Entities.User.IsSpectatorInRoom(Sfs2X.Entities.Room)"/>
            <seealso cref="P:Sfs2X.Entities.User.IsPlayer"/>
        </member>
        <member name="M:Sfs2X.Entities.User.GetPlayerId(Sfs2X.Entities.Room)">
            <summary>
            Returns the playerId value of this user in the passed Room.
            </summary>
            
            <remarks>
            See the <see cref="P:Sfs2X.Entities.User.PlayerId"/> property description for more informations.
            </remarks>
            
            <param name="room">The object representing the Room to retrieve the player id from.</param>
            
            <returns>The player id of this user in the passed Room.</returns>
            
            <seealso cref="P:Sfs2X.Entities.User.PlayerId"/>
        </member>
        <member name="M:Sfs2X.Entities.User.SetPlayerId(System.Int32,Sfs2X.Entities.Room)">
            <exclude/>
        </member>
        <member name="M:Sfs2X.Entities.User.RemovePlayerId(Sfs2X.Entities.Room)">
            <exclude/>
        </member>
        <member name="P:Sfs2X.Entities.User.PrivilegeId">
            <summary>
            Returns the id which identifies the privilege level of this user.
            </summary>
            
            <remarks>
            <b>NOTE</b>: setting this property manually has no effect on the server and can disrupt the API functioning. Privileges are assigned to the user by the server when the user logs in.
            </remarks>
            
            <seealso cref="T:Sfs2X.Entities.UserPrivileges"/>
        </member>
        <member name="P:Sfs2X.Entities.User.UserManager">
            <summary>
            Returns a reference to the User Manager which manages this user.
            </summary>
            
            <remarks>
            <b>NOTE</b>: setting this property manually has no effect on the server and can disrupt the API functioning.
            </remarks>
        </member>
        <member name="M:Sfs2X.Entities.User.IsGuest">
            <summary>
            Indicates whether this user logged in as a guest or not.
            </summary>
            
            <remarks>
            Guest users have this property set to <see cref="F:Sfs2X.Entities.UserPrivileges.GUEST"/>.
            </remarks>
            
            <returns><c>true</c> if this user is a guest.</returns>
            
            <seealso cref="P:Sfs2X.Entities.User.PrivilegeId"/>
        </member>
        <member name="M:Sfs2X.Entities.User.IsStandardUser">
            <summary>
            Indicates whether this user logged in as a standard user or not.
            </summary>
            
            <remarks>
            Standard users have this property set to <see cref="F:Sfs2X.Entities.UserPrivileges.STANDARD"/>.
            </remarks>
            
            <returns><c>true</c> if this user is a standard user.</returns>
            
            <seealso cref="P:Sfs2X.Entities.User.PrivilegeId"/>
        </member>
        <member name="M:Sfs2X.Entities.User.IsModerator">
            <summary>
            Indicates whether this user logged in as a moderator or not.
            </summary>
            
            <remarks>
            Moderator users have this property set to <see cref="F:Sfs2X.Entities.UserPrivileges.MODERATOR"/>.
            </remarks>
            
            <returns><c>true</c> if this user is a moderator.</returns>
            
            <seealso cref="P:Sfs2X.Entities.User.PrivilegeId"/>
        </member>
        <member name="M:Sfs2X.Entities.User.IsAdmin">
            <summary>
            Indicates whether this user logged in as an administrator or not.
            </summary>
            
            <remarks>
            Administrator users have this property set to <see cref="F:Sfs2X.Entities.UserPrivileges.ADMINISTRATOR"/>.
            </remarks>
            
            <returns><c>true</c> if this user is an administrator.</returns>
            
            <seealso cref="P:Sfs2X.Entities.User.PrivilegeId"/>
        </member>
        <member name="M:Sfs2X.Entities.User.IsPlayerInRoom(Sfs2X.Entities.Room)">
            <summary>
            Indicates whether this user is a player (playerId greater than 0) in the passed Room or not.
            </summary>
            
            <remarks>
            Non-Game Rooms always return <c>false</c>.
            <para/>
            If a user can join one Game Room at a time only, use the <see cref="P:Sfs2X.Entities.User.IsPlayer"/> property.
            </remarks>
            
            <param name="room">The object representing the Room where to check if this user is a player.</param>
            
            <returns><c>true</c> if this user is a player in the passed Room.</returns>
        </member>
        <member name="M:Sfs2X.Entities.User.IsSpectatorInRoom(Sfs2X.Entities.Room)">
            <summary>
            Indicates whether this user is a spectator (playerId lower than 0) in the passed Room or not.
            </summary>
            
            <remarks>
            Non-Game Rooms always return <c>false</c>.
            <para/>
            If a user can join one Game Room at a time only, use the <see cref="P:Sfs2X.Entities.User.IsSpectator"/> property.
            </remarks>
            
            <param name="room">The object representing the Room where to check if this user is a spectator.</param>
            <returns><c>true</c> if this user is a spectator in the passed Room.</returns>
        </member>
        <member name="M:Sfs2X.Entities.User.IsJoinedInRoom(Sfs2X.Entities.Room)">
            <summary>
            Indicates whether this user joined the passed Room or not.
            </summary>
            
            <param name="room">The object representing the Room where to check the user presence.</param>
            
            <returns><c>true</c> if this user is inside the passed Room.</returns>
        </member>
        <member name="P:Sfs2X.Entities.User.IsItMe">
            <summary>
            Indicates if this User object represents the current client.
            </summary>
            
            <seealso cref="P:Sfs2X.SmartFox.MySelf"/>
        </member>
        <member name="M:Sfs2X.Entities.User.GetVariables">
            <summary>
            Retrieves all the User Variables of this user.
            </summary>
            
            <returns>A list of objects representing the User Variables associated with this user.</returns>
            
            <seealso cref="T:Sfs2X.Requests.SetUserVariablesRequest"/>
        </member>
        <member name="M:Sfs2X.Entities.User.GetVariable(System.String)">
            <summary>
            Retrieves a User Variable from its name.
            </summary>
            
            <param name="varName">The name of the User Variable to be retrieved.</param>
            
            <returns>The object representing the User Variable, or <c>null</c> if no User Variable with the passed name is associated with this user.</returns>
            
            <seealso cref="T:Sfs2X.Requests.SetUserVariablesRequest"/>
        </member>
        <member name="M:Sfs2X.Entities.User.SetVariable(Sfs2X.Entities.Variables.UserVariable)">
            <exclude/>
        </member>
        <member name="M:Sfs2X.Entities.User.SetVariables(System.Collections.Generic.ICollection{Sfs2X.Entities.Variables.UserVariable})">
            <exclude/>
        </member>
        <member name="M:Sfs2X.Entities.User.ContainsVariable(System.String)">
            <summary>
            Indicates whether this user has the specified User Variable set or not.
            </summary>
            
            <param name="name">The name of the User Variable whose existance must be checked.</param>
            
            <returns><c>true</c> if a User Variable with the passed name is set for this user.</returns>
            
            <seealso cref="T:Sfs2X.Entities.Variables.UserVariable"/>
        </member>
        <member name="P:Sfs2X.Entities.User.Properties">
            <summary>
            Defines a generic utility object that can be used to store custom user data.
            </summary>
            
            <remarks>
            The values added to this object are for client-side use only and are never transmitted to the server or to the other clients.
            </remarks>
        </member>
        <member name="P:Sfs2X.Entities.User.AOIEntryPoint">
             <summary>
             Returns the entry point of this user in the current user's AoI.
             </summary>
             
             <remarks>
             The returned coordinates are those that the user had when his presence in the current user's Area of Interest was last notified by a <see cref="F:Sfs2X.Core.SFSEvent.PROXIMITY_LIST_UPDATE">PROXIMITY_LIST_UPDATE</see> event.
             This field is populated only if the user joined a Room of type MMORoom and this is configured to receive such data from the server.
             </remarks>
            
             <seealso cref="P:Sfs2X.Requests.MMO.MMORoomSettings.SendAOIEntryPoint"/>
             <seealso cref="F:Sfs2X.Core.SFSEvent.PROXIMITY_LIST_UPDATE"/>
        </member>
        <member name="T:Sfs2X.Entities.UserPrivileges">
            <summary>
            This class contains the costants describing the default user types known by SmartFoxServer.
            </summary>
            
            <remarks>
            The server assigns one of these values or a custom-defined one to the <see cref="P:Sfs2X.Entities.User.PrivilegeId">User.PrivilegeId</see> property whenever a user logs in.
            <para/>
            Read the SmartFoxServer 2X documentation for more informations about privilege profiles and their permissions.
            </remarks>
            
            <seealso cref="P:Sfs2X.Entities.User.PrivilegeId"/>
        </member>
        <member name="F:Sfs2X.Entities.UserPrivileges.GUEST">
            <summary>
            The Guest user is usually the lowest level in the privilege profiles scale.
            </summary>
        </member>
        <member name="F:Sfs2X.Entities.UserPrivileges.STANDARD">
            <summary>
            The standard user is usually registered in the application custom login system; uses a unique name and password to login.
            </summary>
        </member>
        <member name="F:Sfs2X.Entities.UserPrivileges.MODERATOR">
            <summary>
            The moderator user can send dedicated "moderator messages", kick and ban users.
            </summary>
            
            <seealso cref="T:Sfs2X.Requests.ModeratorMessageRequest"/>
            <seealso cref="T:Sfs2X.Requests.KickUserRequest"/>
            <seealso cref="T:Sfs2X.Requests.BanUserRequest"/>
        </member>
        <member name="F:Sfs2X.Entities.UserPrivileges.ADMINISTRATOR">
            <summary>
            The administrator user can send dedicated "administrator messages", kick and ban users.
            </summary>
            
            <seealso cref="T:Sfs2X.Requests.AdminMessageRequest"/>
            <seealso cref="T:Sfs2X.Requests.KickUserRequest"/>
            <seealso cref="T:Sfs2X.Requests.BanUserRequest"/>
        </member>
        <member name="T:Sfs2X.Entities.Data.ISFSArray">
            <summary>
            The ISFSArray interface defines all the public methods and properties of the SFSArray class used by SmartFoxServer in client-server data transfer.
            </summary>
            
            <remarks>
            Read the implementor class description for additional informations.
            <para/>
            Check the <see cref="T:Sfs2X.Entities.Data.SFSDataType"/> enumeration for more informations on supported data types.
            </remarks>
            
            <seealso cref="T:Sfs2X.Entities.Data.SFSArray"/>
        </member>
        <member name="M:Sfs2X.Entities.Data.ISFSArray.Contains(System.Object)">
            <summary>
            Indicates whether this array contains the specified object or not.
            </summary>
            
            <param name="obj">The object whose presence in this array is to be tested.</param>
            
            <returns><c>true</c> if the specified object is present.</returns>
        </member>
        <member name="M:Sfs2X.Entities.Data.ISFSArray.GetElementAt(System.Int32)">
            <summary>
            Returns the element at the specified position in this array.
            </summary>
            
            <param name="index">The position of the element to return.</param>
            
            <returns>The element at the specified index in this array.</returns>
        </member>
        <member name="M:Sfs2X.Entities.Data.ISFSArray.GetWrappedElementAt(System.Int32)">
            <exclude/>
        </member>
        <member name="M:Sfs2X.Entities.Data.ISFSArray.RemoveElementAt(System.Int32)">
            <summary>
            Removes the element at the specified position in this array.
            </summary>
            
            <param name="index">The position of the element to be removed.</param>
            
            <returns>The element that was removed.</returns>
        </member>
        <member name="M:Sfs2X.Entities.Data.ISFSArray.Size">
            <summary>
            Indicates the number of elements in this array.
            </summary>
            
            <returns>The number of elements in this array.</returns>
        </member>
        <member name="M:Sfs2X.Entities.Data.ISFSArray.ToBinary">
            <summary>
            Provides the binary form of this array.
            </summary>
            
            <returns>The binary data representing this array.</returns>
        </member>
        <member name="M:Sfs2X.Entities.Data.ISFSArray.ToJson">
            <summary>
            Provides the JSON representation of this array.
            </summary>
            
            <remarks>
            This method is not available under Universal Windows Platform.
            </remarks>
            
            <returns>The JSON string representing this array.</returns>
            
            <remarks>This method is not available under Universal Windows Platform.</remarks>
        </member>
        <member name="M:Sfs2X.Entities.Data.ISFSArray.GetDump(System.Boolean)">
            <summary>
            Provides a formatted string representing this array.
            </summary>
            
            <remarks>
            The returned string can be logged or traced in the console for debugging purposes.
            </remarks>
            
            <param name="format">If <c>true</c>, the output is formatted in a human-readable way.</param>
            
            <returns>The string representation of this array.</returns>
        </member>
        <member name="M:Sfs2X.Entities.Data.ISFSArray.GetDump">
            <summary>
            See <see cref="M:Sfs2X.Entities.Data.ISFSArray.GetDump(System.Boolean)"/>.
            </summary>
        </member>
        <member name="M:Sfs2X.Entities.Data.ISFSArray.GetHexDump">
            <summary>
            Provides a detailed hexadecimal representation of this array.
            </summary>
            
            <remarks>
            The returned string can be logged or traced in the console for debugging purposes.
            </remarks>
            
            <returns>The hexadecimal string representation of this array.</returns>
        </member>
        <member name="M:Sfs2X.Entities.Data.ISFSArray.AddNull">
            <summary>
            Appends a <c>null</c> value to the end of this array.
            </summary>
        </member>
        <member name="M:Sfs2X.Entities.Data.ISFSArray.AddBool(System.Boolean)">
            <summary>
            Appends a boolean value to the end of this array.
            </summary>
            
            <param name="val">The value to be appended to this array.</param>
        </member>
        <member name="M:Sfs2X.Entities.Data.ISFSArray.AddByte(System.Byte)">
            <summary>
            Appends a byte (8 bits) value to the end of this array.
            </summary>
            
            <param name="val">The value to be appended to this array.</param>
        </member>
        <member name="M:Sfs2X.Entities.Data.ISFSArray.AddShort(System.Int16)">
            <summary>
            Appends a short integer (16 bits) value to the end of this array.
            </summary>
            
            <param name="val">The value to be appended to this array.</param>
        </member>
        <member name="M:Sfs2X.Entities.Data.ISFSArray.AddInt(System.Int32)">
            <summary>
            Appends an integer (32 bits) value to the end of this array.
            </summary>
            <param name="val">The value to be appended to this array.</param>
        </member>
        <member name="M:Sfs2X.Entities.Data.ISFSArray.AddLong(System.Int64)">
            <summary>
            Appends a long integer (64 bits) value to the end of this array.
            </summary>
            
            <param name="val">The value to be appended to this array.</param>
        </member>
        <member name="M:Sfs2X.Entities.Data.ISFSArray.AddFloat(System.Single)">
            <summary>
            Appends a floating point number (32 bits) value to the end of this array.
            </summary>
            
            <param name="val">The value to be appended to this array.</param>
        </member>
        <member name="M:Sfs2X.Entities.Data.ISFSArray.AddDouble(System.Double)">
            <summary>
            Appends a double precision number (64 bits) value to the end of this array.
            </summary>
            
            <param name="val">The value to be appended to this array.</param>
        </member>
        <member name="M:Sfs2X.Entities.Data.ISFSArray.AddUtfString(System.String)">
            <summary>
            Appends a UTF-8 string (with max length of 32 KBytes) value to the end of this array.
            </summary>
            
            <param name="val">The value to be appended to this array.</param>
        </member>
        <member name="M:Sfs2X.Entities.Data.ISFSArray.AddText(System.String)">
            <summary>
            Appends a UTF-8 string (with max length of 2 GBytes) value to the end of this array.
            </summary>
            
            <param name="val">The value to be appended to this array.</param>
        </member>
        <member name="M:Sfs2X.Entities.Data.ISFSArray.AddBoolArray(System.Boolean[])">
            <summary>
            Appends an array of boolean values to the end of this array.
            </summary>
            
            <param name="val">The array of booleans to be appended to this array.</param>
        </member>
        <member name="M:Sfs2X.Entities.Data.ISFSArray.AddByteArray(Sfs2X.Util.ByteArray)">
            <summary>
            Appends a ByteArray object to the end of this array.
            </summary>
            
            <remarks>
            <b>IMPORTANT</b>: ByteArrays transmission is not supported in Unity WebGL.
            </remarks>
            
            <param name="val">The ByteArray object to be appended to this array.</param>
        </member>
        <member name="M:Sfs2X.Entities.Data.ISFSArray.AddShortArray(System.Int16[])">
            <summary>
            Appends an array of short integer values to the end of this array.
            </summary>
            
            <param name="val">The array of shorts to be appended to this array.</param>
        </member>
        <member name="M:Sfs2X.Entities.Data.ISFSArray.AddIntArray(System.Int32[])">
            <summary>
            Appends an array of integer values to the end of this array.
            </summary>
            
            <param name="val">The array of ints to be appended to this array.</param>
        </member>
        <member name="M:Sfs2X.Entities.Data.ISFSArray.AddLongArray(System.Int64[])">
            <summary>
            Appends an array of long integer values to the end of this array.
            </summary>
            
            <param name="val">The array of longs to be appended to this array.</param>
        </member>
        <member name="M:Sfs2X.Entities.Data.ISFSArray.AddFloatArray(System.Single[])">
            <summary>
            Appends an array of floating point number values to the end of this array.
            </summary>
            
            <param name="val">The array of floats to be appended to this array.</param>
        </member>
        <member name="M:Sfs2X.Entities.Data.ISFSArray.AddDoubleArray(System.Double[])">
            <summary>
            Appends an array of double precision number values to the end of this array.
            </summary>
            
            <param name="val">The array of doubles to be appended to this array.</param>
        </member>
        <member name="M:Sfs2X.Entities.Data.ISFSArray.AddUtfStringArray(System.String[])">
            <summary>
            Appends an array of UTF-8 string values to the end of this array.
            </summary>
            
            <param name="val">The array of strings to be appended to this array.</param>
        </member>
        <member name="M:Sfs2X.Entities.Data.ISFSArray.AddSFSArray(Sfs2X.Entities.Data.ISFSArray)">
            <summary>
            Appends an ISFSArray object to the end of this array.
            </summary>
            
            <param name="val">The object implementing the ISFSArray interface to be appended to this array.</param>
            
            <seealso cref="T:Sfs2X.Entities.Data.SFSArray"/>
        </member>
        <member name="M:Sfs2X.Entities.Data.ISFSArray.AddSFSObject(Sfs2X.Entities.Data.ISFSObject)">
            <summary>
            Appends a ISFSObject object to the end of this array.
            </summary>
            
            <param name="val">The object implementing the ISFSObject interface to be appended to this array.</param>
            
            <seealso cref="T:Sfs2X.Entities.Data.SFSObject"/>
        </member>
        <member name="M:Sfs2X.Entities.Data.ISFSArray.AddClass(System.Object)">
            <summary>
            Appends the passed custom class instance to the end of this array.
            </summary>
            
            <remarks>
            Read the <see cref="M:Sfs2X.Entities.Data.ISFSArray.GetClass(System.Int32)"/> method description for more informations.
            <para/>
            <b>IMPORTANT</b>: class serialization is not supported in Unity WebGL.
            </remarks>
            
            <param name="val">The custom class instance to be appended to this array.</param>
        </member>
        <member name="M:Sfs2X.Entities.Data.ISFSArray.Add(Sfs2X.Entities.Data.SFSDataWrapper)">
            <exclude/>
        </member>
        <member name="M:Sfs2X.Entities.Data.ISFSArray.IsNull(System.Int32)">
            <summary>
            Indicates if the element at the specified position in this array is <c>null</c>.
            </summary>
            
            <param name="index">The position of the element to be checked.</param>
            
            <returns><c>true</c> if the element of this array at the specified position is <c>null</c>.</returns>
        </member>
        <member name="M:Sfs2X.Entities.Data.ISFSArray.GetBool(System.Int32)">
            <summary>
            Returns the element at the specified position as a boolean.
            </summary>
            
            <param name="index">The position of the element to return.</param>
            
            <returns>The element of this array at the specified index.</returns>
        </member>
        <member name="M:Sfs2X.Entities.Data.ISFSArray.GetByte(System.Int32)">
            <summary>
            Returns the element at the specified position as a signed byte (8 bits).
            </summary>
            
            <param name="index">The position of the element to return.</param>
            
            <returns>The element of this array at the specified index.</returns>
        </member>
        <member name="M:Sfs2X.Entities.Data.ISFSArray.GetShort(System.Int32)">
            <summary>
            Returns the element at the specified position as a short integer (16 bits).
            </summary>
            
            <param name="index">The position of the element to return.</param>
            
            <returns>The element of this array at the specified index.</returns>
        </member>
        <member name="M:Sfs2X.Entities.Data.ISFSArray.GetInt(System.Int32)">
            <summary>
            Returns the element at the specified position as an integer (32 bits).
            </summary>
            
            <param name="index">The position of the element to return.</param>
            
            <returns>The element of this array at the specified index.</returns>
        </member>
        <member name="M:Sfs2X.Entities.Data.ISFSArray.GetLong(System.Int32)">
            <summary>
            Returns the element at the specified position as a long integer (64 bits).
            </summary>
            
            <param name="index">The position of the element to return.</param>
            
            <returns>The element of this array at the specified index.</returns>
        </member>
        <member name="M:Sfs2X.Entities.Data.ISFSArray.GetFloat(System.Int32)">
            <summary>
            Returns the element at the specified position as a floating point number.
            </summary>
            
            <param name="index">The position of the element to return.</param>
            
            <returns>The element of this array at the specified index.</returns>
        </member>
        <member name="M:Sfs2X.Entities.Data.ISFSArray.GetDouble(System.Int32)">
            <summary>
            Returns the element at the specified position as a double precision number.
            </summary>
            
            <param name="index">The position of the element to return.</param>
            
            <returns>The element of this array at the specified index.</returns>
        </member>
        <member name="M:Sfs2X.Entities.Data.ISFSArray.GetUtfString(System.Int32)">
            <summary>
            Returns the element at the specified position as an UTF-8 string, with max length of 32 KBytes.
            </summary>
            
            <param name="index">The position of the element to return.</param>
            
            <returns>The element of this array at the specified index.</returns>
        </member>
        <member name="M:Sfs2X.Entities.Data.ISFSArray.GetText(System.Int32)">
            <summary>
            Returns the element at the specified position as an UTF-8 string, with max length of 2 GBytes.
            </summary>
            
            <param name="index">The position of the element to return.</param>
            
            <returns>The element of this array at the specified index.</returns>
        </member>
        <member name="M:Sfs2X.Entities.Data.ISFSArray.GetBoolArray(System.Int32)">
            <summary>
            Returns the element at the specified position as an array of booleans.
            </summary>
            
            <param name="index">The position of the element to return.</param>
            
            <returns>The element of this array as an array of booleans.</returns>
        </member>
        <member name="M:Sfs2X.Entities.Data.ISFSArray.GetByteArray(System.Int32)">
            <summary>
            Returns the element at the specified position as a ByteArray object.
            </summary>
            
            <remarks>
            <b>IMPORTANT</b>: ByteArrays transmission is not supported in Unity WebGL.
            </remarks>
            
            <param name="index">The position of the element to return.</param>
            
            <returns>The element of this array as a ByteArray object.</returns>
        </member>
        <member name="M:Sfs2X.Entities.Data.ISFSArray.GetShortArray(System.Int32)">
            <summary>
            Returns the element at the specified position as an array of shorts.
            </summary>
            
            <param name="index">The position of the element to return.</param>
            
            <returns>The element of this array as an array of shorts.</returns>
        </member>
        <member name="M:Sfs2X.Entities.Data.ISFSArray.GetIntArray(System.Int32)">
            <summary>
            Returns the element at the specified position as an array of integers.
            </summary>
            
            <param name="index">The position of the element to return.</param>
            
            <returns>The element of this array as an array of integers.</returns>
        </member>
        <member name="M:Sfs2X.Entities.Data.ISFSArray.GetLongArray(System.Int32)">
            <summary>
            Returns the element at the specified position as an array of longs.
            </summary>
            
            <param name="index">The position of the element to return.</param>
            
            <returns>The element of this array as an array of longs.</returns>
        </member>
        <member name="M:Sfs2X.Entities.Data.ISFSArray.GetFloatArray(System.Int32)">
            <summary>
            Returns the element at the specified position as an array of floats.
            </summary>
            
            <param name="index">The position of the element to return.</param>
            
            <returns>The element of this array as an array of floats.</returns>
        </member>
        <member name="M:Sfs2X.Entities.Data.ISFSArray.GetDoubleArray(System.Int32)">
            <summary>
            Returns the element at the specified position as an array of doubles.
            </summary>
            
            <param name="index">The position of the element to return.</param>
            
            <returns>The element of this array as an array of doubles.</returns>
        </member>
        <member name="M:Sfs2X.Entities.Data.ISFSArray.GetUtfStringArray(System.Int32)">
            <summary>
            Returns the element at the specified position as an array of UTF-8 strings.
            </summary>
            
            <param name="index">The position of the element to return.</param>
            
            <returns>The element of this array as an array of UTF-8 strings.</returns>
        </member>
        <member name="M:Sfs2X.Entities.Data.ISFSArray.GetSFSArray(System.Int32)">
            <summary>
            Returns the element at the specified position as an ISFSArray object.
            </summary>
            
            <param name="index">The position of the element to return.</param>
            
            <returns>The element of this array as an object implementing the ISFSArray interface.</returns>
            
            <seealso cref="T:Sfs2X.Entities.Data.SFSArray"/>
        </member>
        <member name="M:Sfs2X.Entities.Data.ISFSArray.GetSFSObject(System.Int32)">
            <summary>
            Returns the element at the specified position as an ISFSObject object.
            </summary>
            
            <param name="index">The position of the element to return.</param>
            
            <returns>The element of this array as an object implementing the ISFSObject interface.</returns>
            
            <seealso cref="T:Sfs2X.Entities.Data.SFSObject"/>
        </member>
        <member name="M:Sfs2X.Entities.Data.ISFSArray.GetClass(System.Int32)">
            <summary>
            Returns the element at the specified position as an instance of a custom class.
            </summary>
            
            <remarks>
            This advanced feature allows the transmission of specific object instances between client-side C# and server-side Java provided that:<br/>
            - the respective class definitions on both sides have the same package name<br/>
            - the class implements the SerializableSFSType interface on both sides<br/>
            - the following code is executed right after creating the SmartFox object: <c>DefaultSFSDataSerializer.RunningAssembly = Assembly.GetExecutingAssembly();</c> (requires <c>System.Reflection</c> and <c>Sfs2X.Protocol.Serialization</c>)
            <para/>
            <b>IMPORTANT</b>: class serialization is not supported in Unity WebGL.
            </remarks>
            
            <param name="index">The position of the element to return.</param>
            
            <returns>The element of this array as a generic object type to be casted to the target class definition.</returns>
            
            <example>
            The following example shows the same class on the client and server sides, which can be transferred back and forth with the <see cref="M:Sfs2X.Entities.Data.ISFSArray.GetClass(System.Int32)"/> and <see cref="M:Sfs2X.Entities.Data.ISFSArray.AddClass(System.Object)"/> methods.
            <para/>
            The server-side Java definition of a SpaceShip class is:
            <code>
            package my.game.spacecombat
            
            public class SpaceShip implements SerializableSFSType
            {
            	private String type;
            	private String name;
            	private int firePower;
            	private int maxSpeed;
            	private List&lt;String&gt; weapons;
            
            	public SpaceShip(String name, String type)
            	{
            		this.name = name;
            		this.type = type;
            	}
            
            	// ... Getters / Setters ...
            }
            </code>
            <para/>
            The client-side C# definition of the SpaceShip class is:
            <code>
            namespace my.game.spacecombat
            {
            	public class SpaceShip : SerializableSFSType
            	{
            		private string _type;
            		private string _name;
            		private int _firePower;
            		private int _maxSpeed;
            		private Array _weapons;
            
            		public SpaceShip(string name, string type)
            		{
            			_name = name
            			_type = type
            		}
            
            		// ... Getters / Setters ...
            	}
            }
            </code>
            <para/>
            A SpaceShip instance is sent by the server to the client in the first position of an array. This is how to retrieve it:
            <code>
            	SpaceShip myShipData = (SpaceShip)sfsArray.GetClass(0);
            </code>
            </example>
        </member>
        <member name="T:Sfs2X.Entities.Data.ISFSObject">
            <summary>
            The ISFSObject interface defines all the public methods and properties of the SFSObject class used by SmartFoxServer in client-server data transfer.
            </summary>
            
            <remarks>
            Read the implementor class description for additional informations.
            <para/>
            Check the <see cref="T:Sfs2X.Entities.Data.SFSDataType"/> enumeration for more informations on supported data types.
            </remarks>
            
            <seealso cref="T:Sfs2X.Entities.Data.SFSObject"/>
        </member>
        <member name="M:Sfs2X.Entities.Data.ISFSObject.IsNull(System.String)">
            <summary>
            Indicates if the value mapped by the specified key is <c>null</c>.
            </summary>
            
            <param name="key">The key to be checked.</param>
            
            <returns><c>true</c> if the value mapped by the passed key is <c>null</c> or the mapping doesn't exist for that key.</returns>
        </member>
        <member name="M:Sfs2X.Entities.Data.ISFSObject.ContainsKey(System.String)">
            <summary>
            Indicates whether this object contains a mapping for the specified key or not.
            </summary>
            
            <param name="key">The key whose presence in this object is to be tested.</param>
            
            <returns><c>true</c> if this object contains a mapping for the specified key.</returns>
        </member>
        <member name="M:Sfs2X.Entities.Data.ISFSObject.RemoveElement(System.String)">
            <summary>
            Removes the element corresponding to the passed key from this object.
            </summary>
            
            <param name="key">The key of the element to be removed.</param>
        </member>
        <member name="M:Sfs2X.Entities.Data.ISFSObject.GetKeys">
            <summary>
            Retrieves a list of all the keys contained in this object.
            </summary>
            
            <returns>The list of all the keys in this object.</returns>
        </member>
        <member name="M:Sfs2X.Entities.Data.ISFSObject.Size">
            <summary>
            Indicates the number of elements in this object.
            </summary>
            
            <returns>The number of elements in this object.</returns>
        </member>
        <member name="M:Sfs2X.Entities.Data.ISFSObject.ToBinary">
            <summary>
            Provides the binary form of this object.
            </summary>
            
            <returns>The binary data representing this object.</returns>
        </member>
        <member name="M:Sfs2X.Entities.Data.ISFSObject.ToJson">
            <summary>
            Provides the JSON representation of this object.
            </summary>
            
            <remarks>
            This method is not available under Universal Windows Platform.
            </remarks>
            
            <returns>The JSON string representing this object.</returns>
            
            <remarks>This method is not available under Universal Windows Platform.</remarks>
        </member>
        <member name="M:Sfs2X.Entities.Data.ISFSObject.GetDump(System.Boolean)">
            <summary>
            Provides a formatted string representing this object.
            </summary>
            
            <remarks>
            The returned string can be logged or traced in the console for debugging purposes.
            </remarks>
            
            <param name="format">If <c>true</c>, the output is formatted in a human-readable way.</param>
            
            <returns>The string representation of this object.</returns>
        </member>
        <member name="M:Sfs2X.Entities.Data.ISFSObject.GetDump">
            <summary>
            See <see cref="M:Sfs2X.Entities.Data.ISFSObject.GetDump(System.Boolean)"/>.
            </summary>
        </member>
        <member name="M:Sfs2X.Entities.Data.ISFSObject.GetHexDump">
            <summary>
            Provides a detailed hexadecimal representation of this object.
            </summary>
            
            <remarks>
            The returned string can be logged or traced in the console for debugging purposes.
            </remarks>
            
            <returns>The hexadecimal string representation of this object.</returns>
        </member>
        <member name="M:Sfs2X.Entities.Data.ISFSObject.GetData(System.String)">
            <exclude />
        </member>
        <member name="M:Sfs2X.Entities.Data.ISFSObject.GetBool(System.String)">
            <summary>
            Returns the element corresponding to the specified key as a boolean.
            </summary>
            
            <param name="key">The key whose associated value is to be returned.</param>
            
            <returns>The element of this object associated with the specified key; <c>false</c> if a mapping for the passed key doesn't exist.</returns>
        </member>
        <member name="M:Sfs2X.Entities.Data.ISFSObject.GetByte(System.String)">
            <summary>
            Returns the element corresponding to the specified key as a signed byte (8 bits).
            </summary>
            
            <param name="key">The key whose associated value is to be returned.</param>
            
            <returns>The element of this object associated with the specified key; <c>0</c> if a mapping for the passed key doesn't exist.</returns>
        </member>
        <member name="M:Sfs2X.Entities.Data.ISFSObject.GetShort(System.String)">
            <summary>
            Returns the element corresponding to the specified key as a short integer (16 bits).
            </summary>
            
            <param name="key">The key whose associated value is to be returned.</param>
            
            <returns>The element of this object associated with the specified key; <c>0</c> if a mapping for the passed key doesn't exist.</returns>
        </member>
        <member name="M:Sfs2X.Entities.Data.ISFSObject.GetInt(System.String)">
            <summary>
            Returns the element corresponding to the specified key as an integer (32 bits).
            </summary>
            
            <param name="key">The key whose associated value is to be returned.</param>
            
            <returns>The element of this object associated with the specified key; <c>0</c> if a mapping for the passed key doesn't exist.</returns>
        </member>
        <member name="M:Sfs2X.Entities.Data.ISFSObject.GetLong(System.String)">
            <summary>
            Returns the element corresponding to the specified key as a long integer (64 bits).
            </summary>
            
            <param name="key">The key whose associated value is to be returned.</param>
            
            <returns>The element of this object associated with the specified key; <c>0</c> if a mapping for the passed key doesn't exist.</returns>
        </member>
        <member name="M:Sfs2X.Entities.Data.ISFSObject.GetFloat(System.String)">
            <summary>
            Returns the element corresponding to the specified key as a floating point number.
            </summary>
            
            <param name="key">The key whose associated value is to be returned.</param>
            
            <returns>The element of this object associated with the specified key; <c>0</c> if a mapping for the passed key doesn't exist.</returns>
        </member>
        <member name="M:Sfs2X.Entities.Data.ISFSObject.GetDouble(System.String)">
            <summary>
            Returns the element corresponding to the specified key as a double precision number.
            </summary>
            
            <param name="key">The key whose associated value is to be returned.</param>
            
            <returns>The element of this object associated with the specified key; <c>0</c> if a mapping for the passed key doesn't exist.</returns>
        </member>
        <member name="M:Sfs2X.Entities.Data.ISFSObject.GetUtfString(System.String)">
            <summary>
            Returns the element corresponding to the specified key as an UTF-8 string, with max length of 32 KBytes.
            </summary>
            
            <param name="key">The key whose associated value is to be returned.</param>
            
            <returns>The element of this object associated with the specified key; <c>null</c> if a mapping for the passed key doesn't exist.</returns>
        </member>
        <member name="M:Sfs2X.Entities.Data.ISFSObject.GetText(System.String)">
            <summary>
            Returns the element corresponding to the specified key as an UTF-8 string, with max length of 2 GBytes.
            </summary>
            
            <param name="key">The key whose associated value is to be returned.</param>
            
            <returns>The element of this object associated with the specified key; <c>null</c> if a mapping for the passed key doesn't exist.</returns>
        </member>
        <member name="M:Sfs2X.Entities.Data.ISFSObject.GetBoolArray(System.String)">
            <summary>
            Returns the element corresponding to the specified key as an array of booleans.
            </summary>
            
            <param name="key">The key whose associated value is to be returned.</param>
            
            <returns>The element of this object as an array of booleans; <c>null</c> if a mapping for the passed key doesn't exist.</returns>
        </member>
        <member name="M:Sfs2X.Entities.Data.ISFSObject.GetByteArray(System.String)">
            <summary>
            Returns the element corresponding to the specified key as a ByteArray object.
            </summary>
            
            <remarks>
            <b>IMPORTANT</b>: ByteArrays transmission is not supported in Unity WebGL.
            </remarks>
            
            <param name="key">The key whose associated value is to be returned.</param>
            
            <returns>The element of this object as a ByteArray object; <c>null</c> if a mapping for the passed key doesn't exist.</returns>
        </member>
        <member name="M:Sfs2X.Entities.Data.ISFSObject.GetShortArray(System.String)">
            <summary>
            Returns the element corresponding to the specified key as an array of shorts.
            </summary>
            
            <param name="key">The key whose associated value is to be returned.</param>
            
            <returns>The element of this object as an array of shorts; <c>null</c> if a mapping for the passed key doesn't exist.</returns>
        </member>
        <member name="M:Sfs2X.Entities.Data.ISFSObject.GetIntArray(System.String)">
            <summary>
            Returns the element corresponding to the specified key as an array of integers.
            </summary>
            
            <param name="key">The key whose associated value is to be returned.</param>
            
            <returns>The element of this object as an array of integers; <c>null</c> if a mapping for the passed key doesn't exist.</returns>
        </member>
        <member name="M:Sfs2X.Entities.Data.ISFSObject.GetLongArray(System.String)">
            <summary>
            Returns the element corresponding to the specified key as an array of longs.
            </summary>
            
            <param name="key">The key whose associated value is to be returned.</param>
            
            <returns>The element of this object as an array of longs; <c>null</c> if a mapping for the passed key doesn't exist.</returns>
        </member>
        <member name="M:Sfs2X.Entities.Data.ISFSObject.GetFloatArray(System.String)">
            <summary>
            Returns the element corresponding to the specified key as an array of floats.
            </summary>
            
            <param name="key">The key whose associated value is to be returned.</param>
            
            <returns>The element of this object as an array of floats; <c>null</c> if a mapping for the passed key doesn't exist.</returns>
        </member>
        <member name="M:Sfs2X.Entities.Data.ISFSObject.GetDoubleArray(System.String)">
            <summary>
            Returns the element corresponding to the specified key as an array of doubles.
            </summary>
            
            <param name="key">The key whose associated value is to be returned.</param>
            
            <returns>The element of this object as an array of doubles; <c>null</c> if a mapping for the passed key doesn't exist.</returns>
        </member>
        <member name="M:Sfs2X.Entities.Data.ISFSObject.GetUtfStringArray(System.String)">
            <summary>
            Returns the element corresponding to the specified key as an array of UTF-8 strings.
            </summary>
            
            <param name="key">The key whose associated value is to be returned.</param>
            
            <returns>The element of this object as an array of UTF-8 strings; <c>null</c> if a mapping for the passed key doesn't exist.</returns>
        </member>
        <member name="M:Sfs2X.Entities.Data.ISFSObject.GetSFSArray(System.String)">
            <summary>
            Returns the element corresponding to the specified key as an ISFSArray object.
            </summary>
            
            <param name="key">The key whose associated value is to be returned.</param>
            
            <returns>The element of this object as an object implementing the ISFSArray interface; <c>null</c> if a mapping for the passed key doesn't exist.</returns>
            
            <seealso cref="T:Sfs2X.Entities.Data.SFSArray"/>
        </member>
        <member name="M:Sfs2X.Entities.Data.ISFSObject.GetSFSObject(System.String)">
            <summary>
            Returns the element corresponding to the specified key as an ISFSObject object.
            </summary>
            
            <param name="key">The key whose associated value is to be returned.</param>
            
            <returns>The element of this object as an object implementing the ISFSObject interface; <c>null</c> if a mapping for the passed key doesn't exist.</returns>
            
            <seealso cref="T:Sfs2X.Entities.Data.SFSObject"/>
        </member>
        <member name="M:Sfs2X.Entities.Data.ISFSObject.GetClass(System.String)">
            <summary>
            Returns the element corresponding to the specified key as an instance of a custom class.
            </summary>
            
            <remarks>
            This advanced feature allows the transmission of specific object instances between client-side C# and server-side Java provided that:<br/>
            - the respective class definitions on both sides have the same package/namespace name<br/>
            - the class implements the SerializableSFSType interface on both sides<br/>
            - the following code is executed right after creating the SmartFox object: <c>DefaultSFSDataSerializer.RunningAssembly = Assembly.GetExecutingAssembly();</c> (requires <c>System.Reflection</c> and <c>Sfs2X.Protocol.Serialization</c>)
            <para/>
            <b>IMPORTANT</b>: class serialization is not supported in Unity WebGL.
            </remarks>
            
            <param name="key">The key whose associated value is to be returned.</param>
            
            <returns>The element of this object as a generic object type to be casted to the target class definition; <c>null</c> if a mapping for the passed key doesn't exist.</returns>
            
            <example>
            The following example shows the same class on the client and server sides, which can be transferred back and forth with the <see cref="M:Sfs2X.Entities.Data.ISFSObject.GetClass(System.String)"/> and <see cref="M:Sfs2X.Entities.Data.ISFSObject.PutClass(System.String,System.Object)"/> methods.
            <para/>
            The server-side Java definition of a SpaceShip class is:
            <code>
            package my.game.spacecombat
            
            public class SpaceShip implements SerializableSFSType
            {
            	private String type;
            	private String name;
            	private int firePower;
            	private int maxSpeed;
            	private List&lt;String&gt; weapons;
            
            	public SpaceShip(String name, String type)
            	{
            		this.name = name;
            		this.type = type;
            	}
            
            	// ... Getters / Setters ...
            }
            </code>
            <para/>
            The client-side C# definition of the SpaceShip class is:
            <code>
            namespace my.game.spacecombat
            {
            	public class SpaceShip : SerializableSFSType
            	{
            		private string _type;
            		private string _name;
            		private int _firePower;
            		private int _maxSpeed;
            		private Array _weapons;
            
            		public SpaceShip(string name, string type)
            		{
            			_name = name
            			_type = type
            		}
            
            		// ... Getters / Setters ...
            	}
            }
            </code>
            <para/>
            The SpaceShip instance is sent by the server to the client. This is how to retrieve it:
            <code>
            	SpaceShip myShipData = (SpaceShip)sfsObject.GetClass(key);
            </code>
            </example>
        </member>
        <member name="M:Sfs2X.Entities.Data.ISFSObject.PutNull(System.String)">
            <exclude />
        </member>
        <member name="M:Sfs2X.Entities.Data.ISFSObject.PutBool(System.String,System.Boolean)">
            <summary>
            Associates the passed boolean value with the specified key in this object.
            </summary>
            
            <param name="key">The key with which the specified value is to be associated.</param>
            <param name="val">The value to be associated with the specified key.</param>
        </member>
        <member name="M:Sfs2X.Entities.Data.ISFSObject.PutByte(System.String,System.Byte)">
            <summary>
            Associates the passed byte value with the specified key in this object.
            </summary>
            
            <param name="key">The key with which the specified value is to be associated.</param>
            <param name="val">The value to be associated with the specified key.</param>
        </member>
        <member name="M:Sfs2X.Entities.Data.ISFSObject.PutShort(System.String,System.Int16)">
            <summary>
            Associates the passed short value with the specified key in this object.
            </summary>
            
            <param name="key">The key with which the specified value is to be associated.</param>
            <param name="val">The value to be associated with the specified key.</param>
        </member>
        <member name="M:Sfs2X.Entities.Data.ISFSObject.PutInt(System.String,System.Int32)">
            <summary>
            Associates the passed integer value with the specified key in this object.
            </summary>
            
            <param name="key">The key with which the specified value is to be associated.</param>
            <param name="val">The value to be associated with the specified key.</param>
        </member>
        <member name="M:Sfs2X.Entities.Data.ISFSObject.PutLong(System.String,System.Int64)">
            <summary>
            Associates the passed long value with the specified key in this object.
            </summary>
            
            <param name="key">The key with which the specified value is to be associated.</param>
            <param name="val">The value to be associated with the specified key.</param>
        </member>
        <member name="M:Sfs2X.Entities.Data.ISFSObject.PutFloat(System.String,System.Single)">
            <summary>
            Associates the passed float value with the specified key in this object.
            </summary>
            
            <param name="key">The key with which the specified value is to be associated.</param>
            <param name="val">The value to be associated with the specified key.</param>
        </member>
        <member name="M:Sfs2X.Entities.Data.ISFSObject.PutDouble(System.String,System.Double)">
            <summary>
            Associates the passed double value with the specified key in this object.
            </summary>
            
            <param name="key">The key with which the specified value is to be associated.</param>
            <param name="val">The value to be associated with the specified key.</param>
        </member>
        <member name="M:Sfs2X.Entities.Data.ISFSObject.PutUtfString(System.String,System.String)">
            <summary>
            Associates the passed UTF-8 string value (max length: 32 KBytes) with the specified key in this object.
            </summary>
            
            <param name="key">The key with which the specified value is to be associated.</param>
            <param name="val">The value to be associated with the specified key.</param>
        </member>
        <member name="M:Sfs2X.Entities.Data.ISFSObject.PutText(System.String,System.String)">
            <summary>
            Associates the passed UTF-8 string value (max length: 2 GBytes) with the specified key in this object.
            </summary>
            
            <param name="key">The key with which the specified value is to be associated.</param>
            <param name="val">The value to be associated with the specified key.</param>
        </member>
        <member name="M:Sfs2X.Entities.Data.ISFSObject.PutBoolArray(System.String,System.Boolean[])">
            <summary>
            Associates the passed array of booleans with the specified key in this object.
            </summary>
            
            <param name="key">The key with which the specified array is to be associated.</param>
            <param name="val">The array of booleans to be associated with the specified key.</param>
        </member>
        <member name="M:Sfs2X.Entities.Data.ISFSObject.PutByteArray(System.String,Sfs2X.Util.ByteArray)">
            <summary>
            Associates the passed ByteArray object with the specified key in this object.
            </summary>
            
            <remarks>
            <b>IMPORTANT</b>: ByteArrays transmission is not supported in Unity WebGL.
            </remarks>
            
            <param name="key">The key with which the specified object is to be associated.</param>
            <param name="val">The object to be associated with the specified key.</param>
        </member>
        <member name="M:Sfs2X.Entities.Data.ISFSObject.PutShortArray(System.String,System.Int16[])">
            <summary>
            Associates the passed array of shorts with the specified key in this object.
            </summary>
            
            <param name="key">The key with which the specified array is to be associated.</param>
            <param name="val">The array of shorts to be associated with the specified key.</param>
        </member>
        <member name="M:Sfs2X.Entities.Data.ISFSObject.PutIntArray(System.String,System.Int32[])">
            <summary>
            Associates the passed array of integers with the specified key in this object.
            </summary>
            
            <param name="key">The key with which the specified array is to be associated.</param>
            <param name="val">The array of integers to be associated with the specified key.</param>
        </member>
        <member name="M:Sfs2X.Entities.Data.ISFSObject.PutLongArray(System.String,System.Int64[])">
            <summary>
            Associates the passed array of longs with the specified key in this object.
            </summary>
            
            <param name="key">The key with which the specified array is to be associated.</param>
            <param name="val">The array of longs to be associated with the specified key.</param>
        </member>
        <member name="M:Sfs2X.Entities.Data.ISFSObject.PutFloatArray(System.String,System.Single[])">
            <summary>
            Associates the passed array of floats with the specified key in this object.
            </summary>
            
            <param name="key">The key with which the specified array is to be associated.</param>
            <param name="val">The array of floats to be associated with the specified key.</param>
        </member>
        <member name="M:Sfs2X.Entities.Data.ISFSObject.PutDoubleArray(System.String,System.Double[])">
            <summary>
            Associates the passed array of doubles with the specified key in this object.
            </summary>
            
            <param name="key">The key with which the specified array is to be associated.</param>
            <param name="val">The array of doubles to be associated with the specified key.</param>
        </member>
        <member name="M:Sfs2X.Entities.Data.ISFSObject.PutUtfStringArray(System.String,System.String[])">
            <summary>
            Associates the passed array of UTF-8 strings with the specified key in this object.
            </summary>
            
            <param name="key">The key with which the specified array is to be associated.</param>
            <param name="val">The array of UTF-8 strings to be associated with the specified key.</param>
        </member>
        <member name="M:Sfs2X.Entities.Data.ISFSObject.PutSFSArray(System.String,Sfs2X.Entities.Data.ISFSArray)">
            <summary>
            Associates the passed ISFSArray object with the specified key in this object.
            </summary>
            
            <param name="key">The key with which the specified object is to be associated.</param>
            <param name="val">The object to be associated with the specified key.</param>
        </member>
        <member name="M:Sfs2X.Entities.Data.ISFSObject.PutSFSObject(System.String,Sfs2X.Entities.Data.ISFSObject)">
            <summary>
            Associates the passed ISFSObject object with the specified key in this object.
            </summary>
            
            <param name="key">The key with which the specified object is to be associated.</param>
            <param name="val">The object to be associated with the specified key.</param>
        </member>
        <member name="M:Sfs2X.Entities.Data.ISFSObject.PutClass(System.String,System.Object)">
            <summary>
            Associates the passed custom class instance with the specified key in this object.
            </summary>
            
            <remarks>
            Read the <see cref="M:Sfs2X.Entities.Data.ISFSObject.GetClass(System.String)"/> method description for more informations.
            <para/>
            <b>IMPORTANT</b>: class serialization is not supported in Unity WebGL.
            </remarks>
            
            <param name="key">The key with which the specified custom class instance is to be associated.</param>
            <param name="val">The custom class instance to be associated with the specified key.</param>
            
            <seealso cref="M:Sfs2X.Entities.Data.ISFSObject.GetClass(System.String)"/>
        </member>
        <member name="M:Sfs2X.Entities.Data.ISFSObject.Put(System.String,Sfs2X.Entities.Data.SFSDataWrapper)">
            <exclude/>
        </member>
        <member name="T:Sfs2X.Entities.Data.SFSArray">
            <summary>
            The SFSArray class is used by SmartFoxServer in client-server data transfer.
            </summary>
            
            <remarks>
            This class can be thought of as a specialized Array/List object that can contain any type of data.
            <para/>
            The advantage of using the SFSArray class (for example as a nested object inside a <see cref="T:Sfs2X.Entities.Data.SFSObject"/> object) is that you can fine tune the way your data is transmitted over the network.
            For instance, when transmitting a list of numbers between 0 and 100, those values can be treated as normal integers (which take 32 bits each), but also as shorts (16 bit) or even as bytes (8 bit).
            <para/>
            SFSArray supports many primitive data types and related arrays of primitives (see the <see cref="T:Sfs2X.Entities.Data.SFSDataType"/> class). It also allows to serialize class instances and rebuild them on the other side (client or server).
            Check the SmartFoxServer 2X documentation for more informations on this advanced topic.
            </remarks>
            
            <seealso cref="T:Sfs2X.Entities.Data.SFSObject"/>
            <seealso cref="T:Sfs2X.Entities.Data.SFSDataType"/>
        </member>
        <member name="M:Sfs2X.Entities.Data.SFSArray.NewFromBinaryData(Sfs2X.Util.ByteArray)">
            <summary>
            Returns a new SFSArray instance.
            </summary>
            
            <remarks>
            This is an alternative static constructor that builds an SFSArray from a valid SFSArray binary representation.
            </remarks>
            
            <param name="ba">The ByteArray representation of a SFSArray.</param>
            
            <returns>A new SFSArray instance.</returns>
            
            <seealso cref="M:Sfs2X.Entities.Data.SFSArray.#ctor"/>
            <seealso cref="M:Sfs2X.Entities.Data.SFSArray.NewInstance"/>
        </member>
        <member name="M:Sfs2X.Entities.Data.SFSArray.NewFromJsonData(System.String)">
            <summary>
            Returns a new ISFSArray instance.
            </summary>
            
            <remarks>
            This is an alternative static constructor that builds an ISFSArray from a valid JSON string representation.<br/>
            This method is not available under Universal Windows Platform.
            </remarks>
            
            <param name="js">The JSON representation of a SFSArray.</param>
            
            <returns>A new ISFSArray instance.</returns>
        </member>
        <member name="M:Sfs2X.Entities.Data.SFSArray.NewInstance">
            <summary>
            Returns a new SFSArray instance.
            </summary>
            
            <remarks>
            This method is a static alternative to the standard class constructor.
            </remarks>
            
            <returns>A new SFSArray instance.</returns>
            
            <seealso cref="M:Sfs2X.Entities.Data.SFSArray.#ctor"/>
            <seealso cref="M:Sfs2X.Entities.Data.SFSArray.NewFromBinaryData(Sfs2X.Util.ByteArray)"/>
        </member>
        <member name="M:Sfs2X.Entities.Data.SFSArray.#ctor">
            <summary>
            Returns a new SFSArray instance.
            </summary>
            
            <seealso cref="M:Sfs2X.Entities.Data.SFSArray.NewInstance"/>
            <seealso cref="M:Sfs2X.Entities.Data.SFSArray.NewFromBinaryData(Sfs2X.Util.ByteArray)"/>
        </member>
        <member name="M:Sfs2X.Entities.Data.SFSArray.Contains(System.Object)">
            <inheritdoc />
            
            <remarks>Checking if this object contains an inner SFSObject or SFSArray is not supported.</remarks>
        </member>
        <member name="M:Sfs2X.Entities.Data.SFSArray.GetWrappedElementAt(System.Int32)">
            <exclude />
        </member>
        <member name="M:Sfs2X.Entities.Data.SFSArray.GetElementAt(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Sfs2X.Entities.Data.SFSArray.RemoveElementAt(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Sfs2X.Entities.Data.SFSArray.Size">
            <inheritdoc />
        </member>
        <member name="M:Sfs2X.Entities.Data.SFSArray.ToBinary">
            <inheritdoc />
        </member>
        <member name="M:Sfs2X.Entities.Data.SFSArray.ToJson">
            <inheritdoc />
        </member>
        <member name="M:Sfs2X.Entities.Data.SFSArray.GetDump">
            <inheritdoc />
        </member>
        <member name="M:Sfs2X.Entities.Data.SFSArray.GetDump(System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:Sfs2X.Entities.Data.SFSArray.GetHexDump">
            <inheritdoc />
        </member>
        <member name="M:Sfs2X.Entities.Data.SFSArray.AddNull">
            <inheritdoc />
        </member>
        <member name="M:Sfs2X.Entities.Data.SFSArray.AddBool(System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:Sfs2X.Entities.Data.SFSArray.AddByte(System.Byte)">
            <inheritdoc />
        </member>
        <member name="M:Sfs2X.Entities.Data.SFSArray.AddShort(System.Int16)">
            <inheritdoc />
        </member>
        <member name="M:Sfs2X.Entities.Data.SFSArray.AddInt(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Sfs2X.Entities.Data.SFSArray.AddLong(System.Int64)">
            <inheritdoc />
        </member>
        <member name="M:Sfs2X.Entities.Data.SFSArray.AddFloat(System.Single)">
            <inheritdoc />
        </member>
        <member name="M:Sfs2X.Entities.Data.SFSArray.AddDouble(System.Double)">
            <inheritdoc />
        </member>
        <member name="M:Sfs2X.Entities.Data.SFSArray.AddUtfString(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Sfs2X.Entities.Data.SFSArray.AddText(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Sfs2X.Entities.Data.SFSArray.AddBoolArray(System.Boolean[])">
            <inheritdoc />
        </member>
        <member name="M:Sfs2X.Entities.Data.SFSArray.AddByteArray(Sfs2X.Util.ByteArray)">
            <inheritdoc />
        </member>
        <member name="M:Sfs2X.Entities.Data.SFSArray.AddShortArray(System.Int16[])">
            <inheritdoc />
        </member>
        <member name="M:Sfs2X.Entities.Data.SFSArray.AddIntArray(System.Int32[])">
            <inheritdoc />
        </member>
        <member name="M:Sfs2X.Entities.Data.SFSArray.AddLongArray(System.Int64[])">
            <inheritdoc />
        </member>
        <member name="M:Sfs2X.Entities.Data.SFSArray.AddFloatArray(System.Single[])">
            <inheritdoc />
        </member>
        <member name="M:Sfs2X.Entities.Data.SFSArray.AddDoubleArray(System.Double[])">
            <inheritdoc />
        </member>
        <member name="M:Sfs2X.Entities.Data.SFSArray.AddUtfStringArray(System.String[])">
            <inheritdoc />
        </member>
        <member name="M:Sfs2X.Entities.Data.SFSArray.AddSFSArray(Sfs2X.Entities.Data.ISFSArray)">
            <inheritdoc />
        </member>
        <member name="M:Sfs2X.Entities.Data.SFSArray.AddSFSObject(Sfs2X.Entities.Data.ISFSObject)">
            <inheritdoc />
        </member>
        <member name="M:Sfs2X.Entities.Data.SFSArray.AddClass(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Sfs2X.Entities.Data.SFSArray.Add(Sfs2X.Entities.Data.SFSDataWrapper)">
            <exclude />
        </member>
        <member name="M:Sfs2X.Entities.Data.SFSArray.IsNull(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Sfs2X.Entities.Data.SFSArray.GetBool(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Sfs2X.Entities.Data.SFSArray.GetByte(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Sfs2X.Entities.Data.SFSArray.GetShort(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Sfs2X.Entities.Data.SFSArray.GetInt(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Sfs2X.Entities.Data.SFSArray.GetLong(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Sfs2X.Entities.Data.SFSArray.GetFloat(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Sfs2X.Entities.Data.SFSArray.GetDouble(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Sfs2X.Entities.Data.SFSArray.GetUtfString(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Sfs2X.Entities.Data.SFSArray.GetText(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Sfs2X.Entities.Data.SFSArray.GetBoolArray(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Sfs2X.Entities.Data.SFSArray.GetByteArray(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Sfs2X.Entities.Data.SFSArray.GetShortArray(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Sfs2X.Entities.Data.SFSArray.GetIntArray(System.Int32)">
            <inheritdoc />	
        </member>
        <member name="M:Sfs2X.Entities.Data.SFSArray.GetLongArray(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Sfs2X.Entities.Data.SFSArray.GetFloatArray(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Sfs2X.Entities.Data.SFSArray.GetDoubleArray(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Sfs2X.Entities.Data.SFSArray.GetUtfStringArray(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Sfs2X.Entities.Data.SFSArray.GetSFSArray(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Sfs2X.Entities.Data.SFSArray.GetClass(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Sfs2X.Entities.Data.SFSArray.GetSFSObject(System.Int32)">
            <inheritdoc />
        </member>
        <member name="T:Sfs2X.Entities.Data.SFSArrayEnumerator">
            <exclude/>
        </member>
        <member name="M:Sfs2X.Entities.Data.SFSArrayEnumerator.#ctor(System.Collections.Generic.List{Sfs2X.Entities.Data.SFSDataWrapper})">
            <exclude/>
        </member>
        <member name="T:Sfs2X.Entities.Data.SFSArrayLite">
            <summary>
            The "lite" version of SFSObject, supporting proper type conversions for dynamic languages such as JavaScript.
            </summary>
            
            <exclude/>
        </member>
        <member name="T:Sfs2X.Entities.Data.SFSDataType">
            <summary>
            The SFSDataType class contains the costants defining the data types supported by SFSObject and SFSArray classes.
            </summary>
            
            <seealso cref="T:Sfs2X.Entities.Data.SFSObject"/>
            <seealso cref="T:Sfs2X.Entities.Data.SFSArray"/>
        </member>
        <member name="F:Sfs2X.Entities.Data.SFSDataType.NULL">
            <summary>
            Null value.
            </summary>
        </member>
        <member name="F:Sfs2X.Entities.Data.SFSDataType.BOOL">
            <summary>
            Boolean.
            </summary>
        </member>
        <member name="F:Sfs2X.Entities.Data.SFSDataType.BYTE">
            <summary>
            Byte, signed 8 bits.
            </summary>
        </member>
        <member name="F:Sfs2X.Entities.Data.SFSDataType.SHORT">
            <summary>
            Short integer, signed 16 bits.
            </summary>
        </member>
        <member name="F:Sfs2X.Entities.Data.SFSDataType.INT">
            <summary>
            Integer, signed 32 bits.
            </summary>
        </member>
        <member name="F:Sfs2X.Entities.Data.SFSDataType.LONG">
            <summary>
            Long integer, signed 64 bits.
            </summary>
        </member>
        <member name="F:Sfs2X.Entities.Data.SFSDataType.FLOAT">
            <summary>
            Floating point decimal, signed 32 bits.
            </summary>
        </member>
        <member name="F:Sfs2X.Entities.Data.SFSDataType.DOUBLE">
            <summary>
            Double precision decimal, signed 64 bits.
            </summary>
        </member>
        <member name="F:Sfs2X.Entities.Data.SFSDataType.UTF_STRING">
            <summary>
            UTF-8 encoded string, with length up to 32 KBytes.
            </summary>
        </member>
        <member name="F:Sfs2X.Entities.Data.SFSDataType.BOOL_ARRAY">
            <summary>
            Array of booleans.
            </summary>
        </member>
        <member name="F:Sfs2X.Entities.Data.SFSDataType.BYTE_ARRAY">
            <summary>
            Array of bytes (treated as ByteArray).
            </summary>
        </member>
        <member name="F:Sfs2X.Entities.Data.SFSDataType.SHORT_ARRAY">
            <summary>
            Array of shorts.
            </summary>
        </member>
        <member name="F:Sfs2X.Entities.Data.SFSDataType.INT_ARRAY">
            <summary>
            Array of integers.
            </summary>
        </member>
        <member name="F:Sfs2X.Entities.Data.SFSDataType.LONG_ARRAY">
            <summary>
            Array of long integers.
            </summary>
        </member>
        <member name="F:Sfs2X.Entities.Data.SFSDataType.FLOAT_ARRAY">
            <summary>
            Array of floats.
            </summary>
        </member>
        <member name="F:Sfs2X.Entities.Data.SFSDataType.DOUBLE_ARRAY">
            <summary>
            Array of Doubles.
            </summary>
        </member>
        <member name="F:Sfs2X.Entities.Data.SFSDataType.UTF_STRING_ARRAY">
            <summary>
            Array of UTF-8 strings.
            </summary>
        </member>
        <member name="F:Sfs2X.Entities.Data.SFSDataType.SFS_ARRAY">
            <summary>
            SFSArray.
            </summary>
            
            <seealso cref="T:Sfs2X.Entities.Data.SFSArray"/>
        </member>
        <member name="F:Sfs2X.Entities.Data.SFSDataType.SFS_OBJECT">
            <summary>
            SFSObject.
            </summary>
            
            <seealso cref="T:Sfs2X.Entities.Data.SFSObject"/>
        </member>
        <member name="F:Sfs2X.Entities.Data.SFSDataType.CLASS">
            <summary>
            Serialized class instance.
            </summary>
        </member>
        <member name="F:Sfs2X.Entities.Data.SFSDataType.TEXT">
            <summary>
            UTF-8 encoded string, with length up to 2 GBytes.
            </summary>
        </member>
        <member name="T:Sfs2X.Entities.Data.SFSDataWrapper">
            <summary>
            A wrapper object used by SFSObject and SFSArray to encapsulate data and relative types
            </summary>
            
            <exclude/>
        </member>
        <member name="P:Sfs2X.Entities.Data.SFSDataWrapper.Type">
            <exclude/>
        </member>
        <member name="P:Sfs2X.Entities.Data.SFSDataWrapper.Data">
            <exclude/>
        </member>
        <member name="M:Sfs2X.Entities.Data.SFSDataWrapper.#ctor(System.Int32,System.Object)">
            <exclude/>
        </member>
        <member name="M:Sfs2X.Entities.Data.SFSDataWrapper.#ctor(Sfs2X.Entities.Data.SFSDataType,System.Object)">
            <exclude/>
        </member>
        <member name="T:Sfs2X.Entities.Data.SFSObject">
            <summary>
            The SFSObject class is used by SmartFoxServer in client-server data transfer.
            </summary>
            
            <remarks>
            This class can be thought of as a specialized Dictionary/Map object that can contain any type of data.
            <para/>
            The advantage of using the SFSObject class (for example when sending an <see cref="T:Sfs2X.Requests.ExtensionRequest"/> request) is that you can fine tune the way your data is transmitted over the network.
            For instance, a number like 100 can be transmitted as a normal integer (which takes 32 bits), but also a short (16 bit) or even a byte (8 bit).
            <para/>
            SFSObject supports many primitive data types and related arrays of primitives (see the <see cref="T:Sfs2X.Entities.Data.SFSDataType"/> class). It also allows to serialize class instances and rebuild them on the other side (client or server).
            Check the SmartFoxServer 2X documentation for more informations on this advanced topic.
            <para/>
            <b>NOTE</b>: UTF-8/multi-byte strings are not supported in key names. In other words you should restrict key names to standard ASCII characters. It is also recommended to keep key names very short to save bandwidth.
            </remarks>
            
            <seealso cref="T:Sfs2X.Entities.Data.SFSDataType"/>
        </member>
        <member name="M:Sfs2X.Entities.Data.SFSObject.NewFromBinaryData(Sfs2X.Util.ByteArray)">
            <summary>
            Returns a new SFSObject instance.
            </summary>
            
            <remarks>
            This is an alternative static constructor that builds an SFSObject from a valid SFSObject binary representation.
            </remarks>
            
            <param name="ba">The ByteArray representation of a SFSObject.</param>
            
            <returns>A new SFSObject instance.</returns>
            
            <seealso cref="M:Sfs2X.Entities.Data.SFSObject.#ctor"/>
            <seealso cref="M:Sfs2X.Entities.Data.SFSObject.NewInstance"/>
        </member>
        <member name="M:Sfs2X.Entities.Data.SFSObject.NewFromJsonData(System.String)">
            <summary>
            Returns a new ISFSObject instance.
            </summary>
            
            <remarks>
            This is an alternative static constructor that builds an ISFSObject from a valid JSON string representation.<br/>
            This method is not available under Universal Windows Platform.
            </remarks>
            
            <param name="js">The JSON representation of a SFSObject.</param>
            
            <returns>A new ISFSObject instance.</returns>
        </member>
        <member name="M:Sfs2X.Entities.Data.SFSObject.NewInstance">
            <summary>
            Returns a new SFSObject instance.
            </summary>
            
            <remarks>
            This method is a static alternative to the standard class constructor.
            </remarks>
            
            <returns>A new SFSObject instance.</returns>
            
            <seealso cref="M:Sfs2X.Entities.Data.SFSObject.#ctor"/>
            <seealso cref="M:Sfs2X.Entities.Data.SFSObject.NewFromBinaryData(Sfs2X.Util.ByteArray)"/>
        </member>
        <member name="M:Sfs2X.Entities.Data.SFSObject.#ctor">
            <summary>
            Returns a new SFSObject instance.
            </summary>
            
            <seealso cref="M:Sfs2X.Entities.Data.SFSObject.NewInstance"/>
            <seealso cref="M:Sfs2X.Entities.Data.SFSObject.NewFromBinaryData(Sfs2X.Util.ByteArray)"/>
        </member>
        <member name="M:Sfs2X.Entities.Data.SFSObject.GetData(System.String)">
            <exclude />
        </member>
        <member name="M:Sfs2X.Entities.Data.SFSObject.IsNull(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Sfs2X.Entities.Data.SFSObject.GetBool(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Sfs2X.Entities.Data.SFSObject.GetByte(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Sfs2X.Entities.Data.SFSObject.GetShort(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Sfs2X.Entities.Data.SFSObject.GetInt(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Sfs2X.Entities.Data.SFSObject.GetLong(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Sfs2X.Entities.Data.SFSObject.GetFloat(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Sfs2X.Entities.Data.SFSObject.GetDouble(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Sfs2X.Entities.Data.SFSObject.GetUtfString(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Sfs2X.Entities.Data.SFSObject.GetText(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Sfs2X.Entities.Data.SFSObject.GetBoolArray(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Sfs2X.Entities.Data.SFSObject.GetByteArray(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Sfs2X.Entities.Data.SFSObject.GetShortArray(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Sfs2X.Entities.Data.SFSObject.GetIntArray(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Sfs2X.Entities.Data.SFSObject.GetLongArray(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Sfs2X.Entities.Data.SFSObject.GetFloatArray(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Sfs2X.Entities.Data.SFSObject.GetDoubleArray(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Sfs2X.Entities.Data.SFSObject.GetUtfStringArray(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Sfs2X.Entities.Data.SFSObject.GetSFSArray(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Sfs2X.Entities.Data.SFSObject.GetSFSObject(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Sfs2X.Entities.Data.SFSObject.GetClass(System.String)">
            <inheritdoc />		
        </member>
        <member name="M:Sfs2X.Entities.Data.SFSObject.PutNull(System.String)">
            <exclude />
        </member>
        <member name="M:Sfs2X.Entities.Data.SFSObject.PutBool(System.String,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:Sfs2X.Entities.Data.SFSObject.PutByte(System.String,System.Byte)">
            <inheritdoc />
        </member>
        <member name="M:Sfs2X.Entities.Data.SFSObject.PutShort(System.String,System.Int16)">
            <inheritdoc />
        </member>
        <member name="M:Sfs2X.Entities.Data.SFSObject.PutInt(System.String,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Sfs2X.Entities.Data.SFSObject.PutLong(System.String,System.Int64)">
            <inheritdoc />
        </member>
        <member name="M:Sfs2X.Entities.Data.SFSObject.PutFloat(System.String,System.Single)">
            <inheritdoc />
        </member>
        <member name="M:Sfs2X.Entities.Data.SFSObject.PutDouble(System.String,System.Double)">
            <inheritdoc />
        </member>
        <member name="M:Sfs2X.Entities.Data.SFSObject.PutUtfString(System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="M:Sfs2X.Entities.Data.SFSObject.PutText(System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="M:Sfs2X.Entities.Data.SFSObject.PutBoolArray(System.String,System.Boolean[])">
            <inheritdoc />
        </member>
        <member name="M:Sfs2X.Entities.Data.SFSObject.PutByteArray(System.String,Sfs2X.Util.ByteArray)">
            <inheritdoc />
        </member>
        <member name="M:Sfs2X.Entities.Data.SFSObject.PutShortArray(System.String,System.Int16[])">
            <inheritdoc />
        </member>
        <member name="M:Sfs2X.Entities.Data.SFSObject.PutIntArray(System.String,System.Int32[])">
            <inheritdoc />
        </member>
        <member name="M:Sfs2X.Entities.Data.SFSObject.PutLongArray(System.String,System.Int64[])">
            <inheritdoc />
        </member>
        <member name="M:Sfs2X.Entities.Data.SFSObject.PutFloatArray(System.String,System.Single[])">
            <inheritdoc />
        </member>
        <member name="M:Sfs2X.Entities.Data.SFSObject.PutDoubleArray(System.String,System.Double[])">
            <inheritdoc />
        </member>
        <member name="M:Sfs2X.Entities.Data.SFSObject.PutUtfStringArray(System.String,System.String[])">
            <inheritdoc />
        </member>
        <member name="M:Sfs2X.Entities.Data.SFSObject.PutSFSArray(System.String,Sfs2X.Entities.Data.ISFSArray)">
            <inheritdoc />
        </member>
        <member name="M:Sfs2X.Entities.Data.SFSObject.PutSFSObject(System.String,Sfs2X.Entities.Data.ISFSObject)">
            <inheritdoc />
        </member>
        <member name="M:Sfs2X.Entities.Data.SFSObject.PutClass(System.String,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Sfs2X.Entities.Data.SFSObject.Put(System.String,Sfs2X.Entities.Data.SFSDataWrapper)">
            <exclude />
        </member>
        <member name="M:Sfs2X.Entities.Data.SFSObject.ContainsKey(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Sfs2X.Entities.Data.SFSObject.GetDump(System.Boolean)">
            <inheritdoc />			
        </member>
        <member name="M:Sfs2X.Entities.Data.SFSObject.GetDump">
            <inheritdoc />
        </member>
        <member name="M:Sfs2X.Entities.Data.SFSObject.GetHexDump">
            <inheritdoc />
        </member>
        <member name="M:Sfs2X.Entities.Data.SFSObject.GetKeys">
            <inheritdoc />
        </member>
        <member name="M:Sfs2X.Entities.Data.SFSObject.RemoveElement(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Sfs2X.Entities.Data.SFSObject.Size">
            <inheritdoc />
        </member>
        <member name="M:Sfs2X.Entities.Data.SFSObject.ToBinary">
            <inheritdoc />	
        </member>
        <member name="M:Sfs2X.Entities.Data.SFSObject.ToJson">
            <inheritdoc />	
        </member>
        <member name="T:Sfs2X.Entities.Data.SFSObjectLite">
            <summary>
            The "lite" version of SFSObject, supporting proper type conversions for dynamic languages such as JavaScript.
            </summary>
            
            <exclude/>
        </member>
        <member name="T:Sfs2X.Entities.Data.Vec3D">
            <summary>
            The Vec3D object represents a position in a 2D or 3D space.
            </summary>
            
            <remarks>
            This class is used to express a position inside a virtual environment with no specific unit of measure (could be pixels, feet, meters, etc).
            <para/>
            Positions along the X,Y,Z axes can be expressed as Integers or Floats, based on the game's coordinate system requirements.
            </remarks>
        </member>
        <member name="M:Sfs2X.Entities.Data.Vec3D.fromArray(System.Object)">
            <exclude/>
        </member>
        <member name="M:Sfs2X.Entities.Data.Vec3D.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
            Creates a new Vec3D instance for a 3D coordinates system with integer values.
            </summary>
            
            <param name="px">The position along the X axis.</param>
            <param name="py">The position along the Y axis.</param>
            <param name="pz">The position along the Z axis.</param>
        </member>
        <member name="M:Sfs2X.Entities.Data.Vec3D.#ctor(System.Int32,System.Int32)">
            <summary>
            Creates a new Vec3D instance for a 2D coordinates system with integer values.
            </summary>
            
            <param name="px">The position along the X axis.</param>
            <param name="py">The position along the Y axis.</param>
        </member>
        <member name="M:Sfs2X.Entities.Data.Vec3D.#ctor(System.Single,System.Single,System.Single)">
            <summary>
            Creates a new Vec3D instance for a 3D coordinates system with float values.
            </summary>
            
            <param name="px">The position along the X axis.</param>
            <param name="py">The position along the Y axis.</param>
            <param name="pz">The position along the Z axis.</param>
        </member>
        <member name="M:Sfs2X.Entities.Data.Vec3D.#ctor(System.Single,System.Single)">
            <summary>
            Creates a new Vec3D instance for a 2D coordinates system with float values.
            </summary>
            
            <param name="px">The position along the X axis.</param>
            <param name="py">The position along the Y axis.</param>
        </member>
        <member name="M:Sfs2X.Entities.Data.Vec3D.IsFloat">
            <summary>
            Indicates whether the position is expressed using floating point values or not.
            </summary>
            
            <returns><c>true</c> if the position is expressed using floating point values.</returns>
        </member>
        <member name="P:Sfs2X.Entities.Data.Vec3D.FloatX">
            <summary>
            Returns the position along the X axis as a float value.
            </summary>
        </member>
        <member name="P:Sfs2X.Entities.Data.Vec3D.FloatY">
            <summary>
            Returns the position along the Y axis as a float value.
            </summary>
        </member>
        <member name="P:Sfs2X.Entities.Data.Vec3D.FloatZ">
            <summary>
            Returns the position along the Z axis as a float value.
            </summary>
        </member>
        <member name="P:Sfs2X.Entities.Data.Vec3D.IntX">
            <summary>
            Returns the position along the X axis as an integer value.
            </summary>
        </member>
        <member name="P:Sfs2X.Entities.Data.Vec3D.IntY">
            <summary>
            Returns the position along the Y axis as an integer value.
            </summary>
        </member>
        <member name="P:Sfs2X.Entities.Data.Vec3D.IntZ">
            <summary>
            Returns the position along the Z axis as an integer value.
            </summary>
        </member>
        <member name="M:Sfs2X.Entities.Data.Vec3D.ToIntArray">
            <exclude/>
        </member>
        <member name="M:Sfs2X.Entities.Data.Vec3D.ToFloatArray">
            <exclude/>
        </member>
        <member name="M:Sfs2X.Entities.Data.Vec3D.ToString">
            <exclude/>
        </member>
        <member name="T:Sfs2X.Entities.Invitation.Invitation">
            <summary>
            The Invitation interface defines all the methods and properties that an object representing an invitation entity exposes.
            </summary>
            
            <remarks>
            In the SmartFoxServer 2X client API this interface is implemented by the <see cref="T:Sfs2X.Entities.Invitation.SFSInvitation"/> class. Read the class description for additional informations.
            </remarks>
            
            <seealso cref="T:Sfs2X.Entities.Invitation.SFSInvitation"/>
        </member>
        <member name="P:Sfs2X.Entities.Invitation.Invitation.Id">
            <summary>
            Indicates the id of this invitation.
            </summary>
            
            <remarks>
            It is generated by the server when the invitation is sent.
            <para/>
            <b>NOTE</b>: setting the id property manually has no effect on the server and can disrupt the API functioning.
            </remarks>
        </member>
        <member name="P:Sfs2X.Entities.Invitation.Invitation.Inviter">
            <summary>
            Returns the User object corresponding to the user who sent the invitation.
            </summary>
        </member>
        <member name="P:Sfs2X.Entities.Invitation.Invitation.Invitee">
            <summary>
            Returns the User object corresponding to the user who received the invitation.
            </summary>
        </member>
        <member name="P:Sfs2X.Entities.Invitation.Invitation.SecondsForAnswer">
            <summary>
            Returns the number of seconds available to the invitee to reply to the invitation, after which the invitation expires.
            </summary>
        </member>
        <member name="P:Sfs2X.Entities.Invitation.Invitation.Params">
            <summary>
            Returns an instance of SFSObject containing a custom set of parameters.
            </summary>
            
            <remarks>
            This usually stores invitation details, like a message to the invitee and any other relevant data.
            </remarks>
        </member>
        <member name="T:Sfs2X.Entities.Invitation.InvitationReply">
            <summary>
            The InvitationReply enumeration contains the costants describing the possible replies to an invitation.
            </summary>
            
            <seealso cref="T:Sfs2X.Requests.Game.InvitationReplyRequest"/>
        </member>
        <member name="F:Sfs2X.Entities.Invitation.InvitationReply.ACCEPT">
            <summary>
            Invitation is accepted.
            </summary>
        </member>
        <member name="F:Sfs2X.Entities.Invitation.InvitationReply.REFUSE">
            <summary>
            Invitation is refused.
            </summary>
        </member>
        <member name="F:Sfs2X.Entities.Invitation.InvitationReply.EXPIRED">
            <summary>
            Invitation expired.
            </summary>
        </member>
        <member name="T:Sfs2X.Entities.Invitation.SFSInvitation">
            <summary>
            The SFSInvitation object contains all the informations about an invitation received by the current user.
            </summary>
            
            <remarks>
            An invitation is sent through the <see cref="T:Sfs2X.Requests.Game.InviteUsersRequest"/> request and it is received as an invitation event.
            Clients can reply to an invitation using the <see cref="T:Sfs2X.Requests.Game.InvitationReplyRequest"/> request.
            </remarks>
            
            <seealso cref="T:Sfs2X.Requests.Game.InviteUsersRequest"/>
            <seealso cref="T:Sfs2X.Requests.Game.InvitationReplyRequest"/>
            <seealso cref="F:Sfs2X.Core.SFSEvent.INVITATION"/>
        </member>
        <member name="F:Sfs2X.Entities.Invitation.SFSInvitation.id">
            <exclude/>
            The id is only used when the Invitation is built from a Server Side Invitation
        </member>
        <member name="F:Sfs2X.Entities.Invitation.SFSInvitation.inviter">
            <exclude/>
        </member>
        <member name="F:Sfs2X.Entities.Invitation.SFSInvitation.invitee">
            <exclude/>
        </member>
        <member name="F:Sfs2X.Entities.Invitation.SFSInvitation.secondsForAnswer">
            <exclude/>
        </member>
        <member name="F:Sfs2X.Entities.Invitation.SFSInvitation.parameters">
            <exclude/>
        </member>
        <member name="M:Sfs2X.Entities.Invitation.SFSInvitation.#ctor(Sfs2X.Entities.User,Sfs2X.Entities.User)">
            <exclude/>
        </member>
        <member name="M:Sfs2X.Entities.Invitation.SFSInvitation.#ctor(Sfs2X.Entities.User,Sfs2X.Entities.User,System.Int32)">
            <exclude/>
        </member>
        <member name="M:Sfs2X.Entities.Invitation.SFSInvitation.#ctor(Sfs2X.Entities.User,Sfs2X.Entities.User,System.Int32,Sfs2X.Entities.Data.ISFSObject)">
            <exclude/>
        </member>
        <member name="P:Sfs2X.Entities.Invitation.SFSInvitation.Id">
            <inheritdoc />
        </member>
        <member name="P:Sfs2X.Entities.Invitation.SFSInvitation.Inviter">
            <inheritdoc />
        </member>
        <member name="P:Sfs2X.Entities.Invitation.SFSInvitation.Invitee">
            <inheritdoc />
        </member>
        <member name="P:Sfs2X.Entities.Invitation.SFSInvitation.SecondsForAnswer">
            <inheritdoc />
        </member>
        <member name="P:Sfs2X.Entities.Invitation.SFSInvitation.Params">
            <inheritdoc />
        </member>
        <member name="T:Sfs2X.Entities.Managers.IBuddyManager">
            <summary>
            The IBuddyManager interface defines all the methods and properties exposed by the client-side manager of the SmartFoxServer Buddy List system.
            </summary>
            
            <remarks>
            In the SmartFoxServer 2X client API this interface is implemented by the <see cref="T:Sfs2X.Entities.Managers.SFSBuddyManager"/> class. Read the class description for additional informations.
            </remarks>
            
            <seealso cref="T:Sfs2X.Entities.Managers.SFSBuddyManager"/>
        </member>
        <member name="P:Sfs2X.Entities.Managers.IBuddyManager.Inited">
            <summary>
            Indicates whether the client's Buddy List system is initialized or not.
            </summary>
            
            <remarks>
            If not initialized, an <see cref="T:Sfs2X.Requests.Buddylist.InitBuddyListRequest"/> request should be sent to the server in order to retrieve the persistent Buddy List data.
            </remarks>
            
            <seealso cref="T:Sfs2X.Requests.Buddylist.InitBuddyListRequest"/>
        </member>
        <member name="M:Sfs2X.Entities.Managers.IBuddyManager.AddBuddy(Sfs2X.Entities.Buddy)">
            <exclude/>
        </member>
        <member name="M:Sfs2X.Entities.Managers.IBuddyManager.RemoveBuddyById(System.Int32)">
            <exclude/>
        </member>
        <member name="M:Sfs2X.Entities.Managers.IBuddyManager.RemoveBuddyByName(System.String)">
            <exclude/>
        </member>
        <member name="M:Sfs2X.Entities.Managers.IBuddyManager.ContainsBuddy(System.String)">
            <summary>
            Indicates whether a buddy exists in user's buddies list or not.
            </summary>
            
            <param name="name">The name of the buddy whose presence in the buddies list is to be tested.</param>
            
            <returns><c>true</c> if the specified buddy exists in the buddies list.</returns>
            
            <seealso cref="P:Sfs2X.Entities.Buddy.Name"/>
        </member>
        <member name="M:Sfs2X.Entities.Managers.IBuddyManager.GetBuddyById(System.Int32)">
            <summary>
            Retrieves a Buddy object from its id property.
            </summary>
            
            <param name="id">The id of the buddy to be found.</param>
            
            <returns>The object representing the buddy, or <c>null</c> if no buddy with the passed id exists in the buddies list.</returns>
            
            <seealso cref="P:Sfs2X.Entities.Buddy.Id"/>
            <seealso cref="M:Sfs2X.Entities.Managers.IBuddyManager.GetBuddyByName(System.String)"/>
            <seealso cref="M:Sfs2X.Entities.Managers.IBuddyManager.GetBuddyByNickName(System.String)"/>
        </member>
        <member name="M:Sfs2X.Entities.Managers.IBuddyManager.GetBuddyByName(System.String)">
            <summary>
            Retrieves a Buddy object from its name property.
            </summary>
            
            <param name="name">The name of the buddy to be found.</param>
            
            <returns>The object representing the buddy, or <c>null</c> if no buddy with the passed name exists in the buddies list.</returns>
            
            <seealso cref="P:Sfs2X.Entities.Buddy.Name"/>
            <seealso cref="M:Sfs2X.Entities.Managers.IBuddyManager.GetBuddyById(System.Int32)"/>
            <seealso cref="M:Sfs2X.Entities.Managers.IBuddyManager.GetBuddyByNickName(System.String)"/>
        </member>
        <member name="M:Sfs2X.Entities.Managers.IBuddyManager.GetBuddyByNickName(System.String)">
            <summary>
            Retrieves a Buddy object from its nickName property (if set).
            </summary>
            
            <param name="nickName">The nickName of the buddy to be found.</param>
            
            <returns>The object representing the buddy, or <c>null</c> if no buddy with the passed nickName exists in the buddies list.</returns>
            
            <seealso cref="P:Sfs2X.Entities.Buddy.NickName"/>
            <seealso cref="M:Sfs2X.Entities.Managers.IBuddyManager.GetBuddyById(System.Int32)"/>
            <seealso cref="M:Sfs2X.Entities.Managers.IBuddyManager.GetBuddyByName(System.String)"/>
        </member>
        <member name="P:Sfs2X.Entities.Managers.IBuddyManager.OfflineBuddies">
            <summary>
            Returns a list of Buddy objects representing all the offline buddies in the user's buddies list.
            </summary>
            
            <seealso cref="P:Sfs2X.Entities.Buddy.IsOnline"/>
        </member>
        <member name="P:Sfs2X.Entities.Managers.IBuddyManager.OnlineBuddies">
            <summary>
            Returns a list of Buddy objects representing all the online buddies in the user's buddies list.
            </summary>
            
            <seealso cref="P:Sfs2X.Entities.Buddy.IsOnline"/>
        </member>
        <member name="P:Sfs2X.Entities.Managers.IBuddyManager.BuddyList">
            <summary>
            Returns a list of Buddy objects representing all the buddies in the user's buddies list.
            </summary>
            
            <remarks>
            The list is <c>null</c> if the Buddy List system is not initialized.
            </remarks>
            
            <seealso cref="T:Sfs2X.Requests.Buddylist.InitBuddyListRequest"/>
        </member>
        <member name="P:Sfs2X.Entities.Managers.IBuddyManager.BuddyStates">
            <summary>
            Returns a list of strings representing the available custom buddy states.
            </summary>
            
            <remarks>
            The custom states are received by the client upon initialization of the Buddy List system. They can be configured by means of the SmartFoxServer 2X Administration Tool.
            </remarks>
            
            <seealso cref="P:Sfs2X.Entities.Buddy.State"/>
        </member>
        <member name="M:Sfs2X.Entities.Managers.IBuddyManager.GetMyVariable(System.String)">
            <summary>
            Retrieves a Buddy Variable from its name.
            </summary>
            
            <param name="varName">The name of the Buddy Variable to be retrieved.</param>
            
            <returns>The object representing the Buddy Variable, or <c>null</c> if no Buddy Variable with the passed name is associated with the current user.</returns>
            
            <seealso cref="T:Sfs2X.Requests.Buddylist.SetBuddyVariablesRequest"/>
            <seealso cref="P:Sfs2X.Entities.Managers.IBuddyManager.MyVariables"/>
        </member>
        <member name="P:Sfs2X.Entities.Managers.IBuddyManager.MyVariables">
            <summary>
            Returns all the Buddy Variables associated with the current user.
            </summary>
            
            <seealso cref="T:Sfs2X.Entities.Variables.BuddyVariable"/>
            <seealso cref="M:Sfs2X.Entities.Managers.IBuddyManager.GetMyVariable(System.String)"/>
        </member>
        <member name="P:Sfs2X.Entities.Managers.IBuddyManager.MyOnlineState">
            <summary>
            Returns the current user's online/offline state.
            </summary>
            
            <remarks>
            If <c>true</c>, the user appears to be online in the buddies list of other users who have him as a buddy.
            <para/>
            The online state of a user in a buddy list is handled by means of a reserved Buddy Variable (see <see cref="T:Sfs2X.Entities.Variables.ReservedBuddyVariables"/> class);
            it can be changed using the dedicated <see cref="T:Sfs2X.Requests.Buddylist.GoOnlineRequest"/> request.
            </remarks>
            
            <seealso cref="P:Sfs2X.Entities.Buddy.IsOnline"/>
            <seealso cref="T:Sfs2X.Entities.Variables.ReservedBuddyVariables"/>
            <seealso cref="T:Sfs2X.Requests.Buddylist.GoOnlineRequest"/>
        </member>
        <member name="P:Sfs2X.Entities.Managers.IBuddyManager.MyNickName">
            <summary>
            Returns the current user's nickname (if set).
            </summary>
            
            <remarks>
            If the nickname was never set before, <c>null</c> is returned.
            <para/>
            As the nickname of a user in a buddy list is handled by means of a reserved Buddy Variable (see <see cref="T:Sfs2X.Entities.Variables.ReservedBuddyVariables"/> class),
            it can be set using the <see cref="T:Sfs2X.Requests.Buddylist.SetBuddyVariablesRequest"/> request.
            </remarks>
            
            <seealso cref="P:Sfs2X.Entities.Buddy.NickName"/>
            <seealso cref="T:Sfs2X.Entities.Variables.ReservedBuddyVariables"/>
            <seealso cref="T:Sfs2X.Requests.Buddylist.SetBuddyVariablesRequest"/>
        </member>
        <member name="P:Sfs2X.Entities.Managers.IBuddyManager.MyState">
            <summary>
            Returns the current user's custom state (if set).
            </summary>
            
            <remarks>
            Examples of custom states are "Available", "Busy", "Be right back", etc. If the custom state was never set before, <c>null</c> is returned.
            <para/>
            As the custom state of a user in a buddy list is handled by means of a reserved Buddy Variable (see <see cref="T:Sfs2X.Entities.Variables.ReservedBuddyVariables"/> class),
            it can be set using the <see cref="T:Sfs2X.Requests.Buddylist.SetBuddyVariablesRequest"/> request.
            </remarks>
            
            <seealso cref="P:Sfs2X.Entities.Buddy.State"/>
            <seealso cref="T:Sfs2X.Entities.Variables.ReservedBuddyVariables"/>
            <seealso cref="T:Sfs2X.Requests.Buddylist.SetBuddyVariablesRequest"/>
        </member>
        <member name="M:Sfs2X.Entities.Managers.IBuddyManager.SetMyVariable(Sfs2X.Entities.Variables.BuddyVariable)">
            <exclude/>
        </member>
        <member name="M:Sfs2X.Entities.Managers.IBuddyManager.ClearAll">
            <exclude/>
        </member>
        <member name="T:Sfs2X.Entities.Managers.IRoomManager">
            <summary>
            The IRoomManager interface defines all the methods and properties exposed by the client-side manager of the SmartFoxServer Room entities.
            </summary>
            
            <remarks>
            In the SmartFoxServer 2X client API this interface is implemented by the <see cref="T:Sfs2X.Entities.Managers.SFSRoomManager"/> class. Read the class description for additional informations.
            </remarks>
            
            <seealso cref="T:Sfs2X.Entities.Managers.SFSRoomManager"/>
        </member>
        <member name="P:Sfs2X.Entities.Managers.IRoomManager.OwnerZone">
            <exclude/>
        </member>
        <member name="M:Sfs2X.Entities.Managers.IRoomManager.AddRoom(Sfs2X.Entities.Room,System.Boolean)">
            <exclude/>
        </member>
        <member name="M:Sfs2X.Entities.Managers.IRoomManager.AddRoom(Sfs2X.Entities.Room)">
            <exclude/>
        </member>
        <member name="M:Sfs2X.Entities.Managers.IRoomManager.AddGroup(System.String)">
            <exclude/>
        </member>
        <member name="M:Sfs2X.Entities.Managers.IRoomManager.ReplaceRoom(Sfs2X.Entities.Room,System.Boolean)">
            <exclude/>
        </member>
        <member name="M:Sfs2X.Entities.Managers.IRoomManager.ReplaceRoom(Sfs2X.Entities.Room)">
            <exclude/>
        </member>
        <member name="M:Sfs2X.Entities.Managers.IRoomManager.RemoveGroup(System.String)">
            <exclude/>
        </member>
        <member name="M:Sfs2X.Entities.Managers.IRoomManager.ContainsGroup(System.String)">
            <summary>
            Indicates whether the specified Group has been subscribed by the client or not.
            </summary>
            
            <param name="groupId">The name of the Group.</param>
            
            <returns><c>true</c> if the client subscribed the passed Group.</returns>
        </member>
        <member name="M:Sfs2X.Entities.Managers.IRoomManager.ContainsRoom(System.Object)">
            <summary>
            Indicates whether a Room exists in the Rooms list or not.
            </summary>
            
            <param name="idOrName">The id or name of the Room object whose presence in the Rooms list is to be tested.</param>
            
            <returns><c>true</c> if the passed Room exists in the Rooms list.</returns>
            
            <seealso cref="P:Sfs2X.Entities.Room.Id"/>
        </member>
        <member name="M:Sfs2X.Entities.Managers.IRoomManager.ContainsRoomInGroup(System.Object,System.String)">
            <summary>
            Indicates whether the Rooms list contains a Room belonging to the specified Group or not.
            </summary>
            
            <param name="idOrName">The id or name of the Room object whose presence in the Rooms list is to be tested.</param>
            <param name="groupId">The name of the Group to which the specified Room must belong.</param>
            
            <returns><c>true</c> if the Rooms list contains the passed Room and it belongs to the specified Group.</returns>
        </member>
        <member name="M:Sfs2X.Entities.Managers.IRoomManager.ChangeRoomName(Sfs2X.Entities.Room,System.String)">
            <exclude/>
        </member>
        <member name="M:Sfs2X.Entities.Managers.IRoomManager.ChangeRoomPasswordState(Sfs2X.Entities.Room,System.Boolean)">
            <exclude/>
        </member>
        <member name="M:Sfs2X.Entities.Managers.IRoomManager.ChangeRoomCapacity(Sfs2X.Entities.Room,System.Int32,System.Int32)">
            <exclude/>
        </member>
        <member name="M:Sfs2X.Entities.Managers.IRoomManager.GetRoomById(System.Int32)">
            <summary>
            Retrieves a Room object from its id.
            </summary>
            
            <param name="id">The id of the Room.</param>
            
            <returns>An object representing the requested Room; <c>null</c> if no Room object with the passed id exists in the Rooms list.</returns>
            
            <seealso cref="M:Sfs2X.Entities.Managers.IRoomManager.GetRoomByName(System.String)"/>
        </member>
        <member name="M:Sfs2X.Entities.Managers.IRoomManager.GetRoomByName(System.String)">
            <summary>
            Retrieves a Room object from its name.
            </summary>
            
            <param name="name">The name of the Room.</param>
            
            <returns>An object representing the requested Room; <c>null</c> if no Room object with the passed name exists in the Rooms list.</returns>
            
            <seealso cref="M:Sfs2X.Entities.Managers.IRoomManager.GetRoomById(System.Int32)"/>
        </member>
        <member name="M:Sfs2X.Entities.Managers.IRoomManager.GetRoomList">
            <summary>
            Returns a list of Rooms currently "known" by the client.
            </summary>
            
            <remarks>
            The list contains all the Rooms that are currently joined and all the Rooms belonging to the Room Groups that have been subscribed.
            <para/>
            At login time, the client automatically subscribes all the Room Groups specified in the Zone's <b>Default Room Groups</b> setting.
            </remarks>
            
            <returns>The list of the available Room objects.</returns>
            
            <seealso cref="T:Sfs2X.Requests.JoinRoomRequest"/>
            <seealso cref="T:Sfs2X.Requests.SubscribeRoomGroupRequest"/>
            <seealso cref="T:Sfs2X.Requests.UnsubscribeRoomGroupRequest"/>
        </member>
        <member name="M:Sfs2X.Entities.Managers.IRoomManager.GetRoomCount">
            <summary>
            Returns the current number of Rooms in the Rooms list.
            </summary>
            
            <returns>The number of Rooms in the Rooms list.</returns>
        </member>
        <member name="M:Sfs2X.Entities.Managers.IRoomManager.GetRoomGroups">
            <summary>
            Returns the names of Groups currently subscribed by the client.
            </summary>
            
            <remarks>
            At login time, the client automatically subscribes all the Room Groups specified in the Zone's <b>Default Room Groups</b> setting.
            </remarks>
            
            <returns>A list of Group names.</returns>
            
            <seealso cref="P:Sfs2X.Entities.Room.GroupId"/>
            <seealso cref="T:Sfs2X.Requests.SubscribeRoomGroupRequest"/>
            <seealso cref="T:Sfs2X.Requests.UnsubscribeRoomGroupRequest"/>
        </member>
        <member name="M:Sfs2X.Entities.Managers.IRoomManager.GetRoomListFromGroup(System.String)">
            <summary>
            Retrieves the list of Rooms which are part of the specified Room Group.
            </summary>
            
            <param name="groupId">The name of the Group.</param>
            
            <returns>The list of Room objects belonging to the passed Group.</returns>
        </member>
        <member name="M:Sfs2X.Entities.Managers.IRoomManager.GetJoinedRooms">
            <summary>
            Returns a list of Rooms currently joined by the client.
            </summary>
            
            <returns>The list of objects representing the Rooms currently joined by the client.</returns>
        </member>
        <member name="M:Sfs2X.Entities.Managers.IRoomManager.GetUserRooms(Sfs2X.Entities.User)">
            <summary>
            Retrieves a list of Rooms joined by the specified user.
            </summary>
            
            <remarks>
            The list contains only those Rooms "known" by the Room Manager; the user might have joined others the client is not aware of.
            </remarks>
            
            <param name="user">The object representing the user to look for in the current Rooms list.</param>
            
            <returns>The list of Rooms joined by the passed user.</returns>
        </member>
        <member name="M:Sfs2X.Entities.Managers.IRoomManager.RemoveRoom(Sfs2X.Entities.Room)">
            <exclude/>
        </member>
        <member name="M:Sfs2X.Entities.Managers.IRoomManager.RemoveRoomById(System.Int32)">
            <exclude/>
        </member>
        <member name="M:Sfs2X.Entities.Managers.IRoomManager.RemoveRoomByName(System.String)">
            <exclude/>
        </member>
        <member name="M:Sfs2X.Entities.Managers.IRoomManager.RemoveUser(Sfs2X.Entities.User)">
            <exclude/>
        </member>
        <member name="P:Sfs2X.Entities.Managers.IRoomManager.SmartFoxClient">
            <exclude/>
        </member>
        <member name="T:Sfs2X.Entities.Managers.IUserManager">
            <summary>
            The IUserManager interface defines all the methods and properties exposed by the client-side manager of the SmartFoxServer User entities.
            </summary>
            
            <remarks>
            In the SmartFoxServer 2X client API this interface is implemented by the <see cref="T:Sfs2X.Entities.Managers.SFSUserManager"/> class. Read the class description for additional informations.
            </remarks>
            
            <seealso cref="T:Sfs2X.Entities.Managers.SFSUserManager"/>
        </member>
        <member name="M:Sfs2X.Entities.Managers.IUserManager.ContainsUserName(System.String)">
            <summary>
            Indicates whether a user exists in the local users list or not from the name.
            </summary>
            
            <param name="userName">The name of the user whose presence in the users list is to be tested.</param>
            
            <returns><c>true</c> if a user with the passed name exists in the users list.</returns>
        </member>
        <member name="M:Sfs2X.Entities.Managers.IUserManager.ContainsUserId(System.Int32)">
            <summary>
            Indicates whether a user exists in the local users list or not from the id.
            </summary>
            
            <param name="userId">The id of the user whose presence in the users list is to be tested.</param>
            
            <returns><c>true</c> if a user corresponding to the passed id exists in the users list.</returns>
        </member>
        <member name="M:Sfs2X.Entities.Managers.IUserManager.ContainsUser(Sfs2X.Entities.User)">
            <summary>
            Indicates whether a user exists in the local users list or not.
            </summary>
            
            <param name="user">The object representing the user whose presence in the users list is to be tested.</param>
            
            <returns><c>true</c> if the passed user exists in the users list.</returns>
        </member>
        <member name="M:Sfs2X.Entities.Managers.IUserManager.GetUserByName(System.String)">
            <summary>
            Retrieves a User object from its name property.
            </summary>
            
            <param name="userName">The name of the user to be found.</param>
            
            <returns>The object representing the user, or <c>null</c> if no user with the passed name exists in the local users list.</returns>
        </member>
        <member name="M:Sfs2X.Entities.Managers.IUserManager.GetUserById(System.Int32)">
            <summary>
            Retrieves a User object from its id property.
            </summary>
            
            <param name="userId">The id of the user to be found.</param>
            
            <returns>The object representing the user, or <c>null</c> if no user with the passed id exists in the local users list.</returns>
        </member>
        <member name="M:Sfs2X.Entities.Managers.IUserManager.AddUser(Sfs2X.Entities.User)">
            <exclude/>
        </member>
        <member name="M:Sfs2X.Entities.Managers.IUserManager.RemoveUser(Sfs2X.Entities.User)">
            <exclude/>
        </member>
        <member name="M:Sfs2X.Entities.Managers.IUserManager.RemoveUserById(System.Int32)">
            <exclude/>
        </member>
        <member name="P:Sfs2X.Entities.Managers.IUserManager.UserCount">
            <summary>
            Returns the total number of users in the local users list.
            </summary>
        </member>
        <member name="M:Sfs2X.Entities.Managers.IUserManager.GetUserList">
            <summary>
            Get the whole list of users inside the Rooms joined by the client.
            </summary>
            
            <returns>The list of User objects representing the users in the local users list.</returns>
        </member>
        <member name="P:Sfs2X.Entities.Managers.IUserManager.SmartFoxClient">
            <exclude/>
        </member>
        <member name="M:Sfs2X.Entities.Managers.IUserManager.ReplaceAll(System.Collections.Generic.List{Sfs2X.Entities.User})">
            <exclude/>
        </member>
        <member name="T:Sfs2X.Entities.Managers.SFSBuddyManager">
            <summary>
            The SFSBuddyManager class is the entity in charge of managing the current user's Buddy List system.
            </summary>
            
            <remarks>
            This manager keeps track of all the user's buddies, their state and their Buddy Variables. It also provides utility methods to set the user's properties when he is part of the buddies list of other users.
            </remarks>
            
            <seealso cref="P:Sfs2X.SmartFox.BuddyManager"/>
        </member>
        <member name="F:Sfs2X.Entities.Managers.SFSBuddyManager.buddiesByName">
            <exclude/>
        </member>
        <member name="F:Sfs2X.Entities.Managers.SFSBuddyManager.myVariables">
            <exclude/>
        </member>
        <member name="F:Sfs2X.Entities.Managers.SFSBuddyManager.myOnlineState">
            <exclude/>
        </member>
        <member name="F:Sfs2X.Entities.Managers.SFSBuddyManager.inited">
            <exclude/>
        </member>
        <member name="M:Sfs2X.Entities.Managers.SFSBuddyManager.#ctor(Sfs2X.SmartFox)">
            <exclude/>
        </member>
        <member name="P:Sfs2X.Entities.Managers.SFSBuddyManager.Inited">
            <inheritdoc /> 
        </member>
        <member name="M:Sfs2X.Entities.Managers.SFSBuddyManager.AddBuddy(Sfs2X.Entities.Buddy)">
            <exclude/>
        </member>
        <member name="M:Sfs2X.Entities.Managers.SFSBuddyManager.ClearAll">
            <exclude/>
        </member>
        <member name="M:Sfs2X.Entities.Managers.SFSBuddyManager.RemoveBuddyById(System.Int32)">
            <exclude/>
        </member>
        <member name="M:Sfs2X.Entities.Managers.SFSBuddyManager.RemoveBuddyByName(System.String)">
            <exclude/>
        </member>
        <member name="M:Sfs2X.Entities.Managers.SFSBuddyManager.GetBuddyById(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Sfs2X.Entities.Managers.SFSBuddyManager.ContainsBuddy(System.String)">
            <inheritdoc />		
        </member>
        <member name="M:Sfs2X.Entities.Managers.SFSBuddyManager.GetBuddyByName(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Sfs2X.Entities.Managers.SFSBuddyManager.GetBuddyByNickName(System.String)">
            <inheritdoc />
        </member>
        <member name="P:Sfs2X.Entities.Managers.SFSBuddyManager.OfflineBuddies">
            <inheritdoc />
        </member>
        <member name="P:Sfs2X.Entities.Managers.SFSBuddyManager.OnlineBuddies">
            <inheritdoc />
        </member>
        <member name="P:Sfs2X.Entities.Managers.SFSBuddyManager.BuddyList">
            <inheritdoc />
        </member>
        <member name="M:Sfs2X.Entities.Managers.SFSBuddyManager.GetMyVariable(System.String)">
            <inheritdoc />
        </member>
        <member name="P:Sfs2X.Entities.Managers.SFSBuddyManager.MyVariables">
            <inheritdoc />
        </member>
        <member name="P:Sfs2X.Entities.Managers.SFSBuddyManager.MyOnlineState">
            <inheritdoc />
        </member>
        <member name="P:Sfs2X.Entities.Managers.SFSBuddyManager.MyNickName">
            <inheritdoc />
        </member>
        <member name="P:Sfs2X.Entities.Managers.SFSBuddyManager.MyState">
            <inheritdoc />
        </member>
        <member name="P:Sfs2X.Entities.Managers.SFSBuddyManager.BuddyStates">
            <inheritdoc />
        </member>
        <member name="M:Sfs2X.Entities.Managers.SFSBuddyManager.SetMyVariable(Sfs2X.Entities.Variables.BuddyVariable)">
            <exclude />
        </member>
        <member name="T:Sfs2X.Entities.Managers.SFSGlobalUserManager">
            <exclude/>
        </member>
        <member name="M:Sfs2X.Entities.Managers.SFSGlobalUserManager.#ctor(Sfs2X.SmartFox)">
            <summary>
            Initializes a new instance of the <see cref="T:Sfs2X.Entities.Managers.SFSGlobalUserManager"/> class.
            </summary>
            <param name='sfs'>
            Sfs.
            </param>
        </member>
        <member name="M:Sfs2X.Entities.Managers.SFSGlobalUserManager.#ctor(Sfs2X.Entities.Room)">
            <summary>
            Initializes a new instance of the <see cref="T:Sfs2X.Entities.Managers.SFSGlobalUserManager"/> class.
            </summary>
            <param name='room'>
            Room.
            </param>
        </member>
        <member name="M:Sfs2X.Entities.Managers.SFSGlobalUserManager.AddUser(Sfs2X.Entities.User)">
            <summary>
            Does not allow duplicates and keeps a reference count
            </summary>
            <param name="user">
            A <see cref="T:Sfs2X.Entities.User"/>
            </param>
        </member>
        <member name="M:Sfs2X.Entities.Managers.SFSGlobalUserManager.RemoveUser(Sfs2X.Entities.User)">
            <summary>
            Removes the user.
            </summary>
            <param name='user'>
            User.
            </param>
        </member>
        <member name="T:Sfs2X.Entities.Managers.SFSRoomManager">
            <summary>
            The SFSRoomManager class is the entity in charge of managing the client-side Rooms list.
            </summary>
            
            <remarks>
            This manager keeps track of all the Rooms available in the client-side Rooms list and of subscriptions to multiple Room Groups. It also provides various utility methods to look for Rooms by name and id, retrieve Rooms belonging to a specific Group, etc.
            </remarks>
            
            <seealso cref="P:Sfs2X.SmartFox.RoomManager"/>
        </member>
        <member name="F:Sfs2X.Entities.Managers.SFSRoomManager.smartFox">
            <exclude/>
        </member>
        <member name="P:Sfs2X.Entities.Managers.SFSRoomManager.OwnerZone">
            <exclude/>
        </member>
        <member name="P:Sfs2X.Entities.Managers.SFSRoomManager.SmartFoxClient">
            <exclude/>
        </member>
        <member name="M:Sfs2X.Entities.Managers.SFSRoomManager.#ctor(Sfs2X.SmartFox)">
            <exclude/>
        </member>
        <member name="M:Sfs2X.Entities.Managers.SFSRoomManager.AddRoom(Sfs2X.Entities.Room)">
            <exclude/>
        </member>
        <member name="M:Sfs2X.Entities.Managers.SFSRoomManager.AddRoom(Sfs2X.Entities.Room,System.Boolean)">
            <exclude/>
        </member>
        <member name="M:Sfs2X.Entities.Managers.SFSRoomManager.ReplaceRoom(Sfs2X.Entities.Room)">
            <exclude/>
        </member>
        <member name="M:Sfs2X.Entities.Managers.SFSRoomManager.ReplaceRoom(Sfs2X.Entities.Room,System.Boolean)">
            <exclude/>
        </member>
        <member name="M:Sfs2X.Entities.Managers.SFSRoomManager.ChangeRoomName(Sfs2X.Entities.Room,System.String)">
            <exclude/>
        </member>
        <member name="M:Sfs2X.Entities.Managers.SFSRoomManager.ChangeRoomPasswordState(Sfs2X.Entities.Room,System.Boolean)">
            <exclude/>
        </member>
        <member name="M:Sfs2X.Entities.Managers.SFSRoomManager.ChangeRoomCapacity(Sfs2X.Entities.Room,System.Int32,System.Int32)">
            <exclude/>
        </member>
        <member name="M:Sfs2X.Entities.Managers.SFSRoomManager.GetRoomGroups">
            <exclude/>
        </member>
        <member name="M:Sfs2X.Entities.Managers.SFSRoomManager.AddGroup(System.String)">
            <exclude/>
        </member>
        <member name="M:Sfs2X.Entities.Managers.SFSRoomManager.RemoveGroup(System.String)">
            <exclude/>
        </member>
        <member name="M:Sfs2X.Entities.Managers.SFSRoomManager.ContainsGroup(System.String)">
            <inheritdoc /> 
        </member>
        <member name="M:Sfs2X.Entities.Managers.SFSRoomManager.ContainsRoom(System.Object)">
            <inheritdoc /> 
        </member>
        <member name="M:Sfs2X.Entities.Managers.SFSRoomManager.ContainsRoomInGroup(System.Object,System.String)">
            <inheritdoc /> 
        </member>
        <member name="M:Sfs2X.Entities.Managers.SFSRoomManager.GetRoomById(System.Int32)">
            <inheritdoc /> 
        </member>
        <member name="M:Sfs2X.Entities.Managers.SFSRoomManager.GetRoomByName(System.String)">
            <inheritdoc /> 
        </member>
        <member name="M:Sfs2X.Entities.Managers.SFSRoomManager.GetRoomList">
            <inheritdoc /> 
        </member>
        <member name="M:Sfs2X.Entities.Managers.SFSRoomManager.GetRoomCount">
            <inheritdoc /> 
        </member>
        <member name="M:Sfs2X.Entities.Managers.SFSRoomManager.GetRoomListFromGroup(System.String)">
            <inheritdoc /> 
        </member>
        <member name="M:Sfs2X.Entities.Managers.SFSRoomManager.RemoveRoom(Sfs2X.Entities.Room)">
            <exclude/>
        </member>
        <member name="M:Sfs2X.Entities.Managers.SFSRoomManager.RemoveRoomById(System.Int32)">
            <exclude/>
        </member>
        <member name="M:Sfs2X.Entities.Managers.SFSRoomManager.RemoveRoomByName(System.String)">
            <exclude/>
        </member>
        <member name="M:Sfs2X.Entities.Managers.SFSRoomManager.GetJoinedRooms">
            <inheritdoc /> 
        </member>
        <member name="M:Sfs2X.Entities.Managers.SFSRoomManager.GetUserRooms(Sfs2X.Entities.User)">
            <inheritdoc /> 
        </member>
        <member name="M:Sfs2X.Entities.Managers.SFSRoomManager.RemoveUser(Sfs2X.Entities.User)">
            <exclude/>
        </member>
        <member name="M:Sfs2X.Entities.Managers.SFSRoomManager.RemoveRoom(System.Int32,System.String)">
            <exclude/>
        </member>
        <member name="T:Sfs2X.Entities.Managers.SFSUserManager">
            <summary>
            The SFSUserManager class is the entity in charge of managing the local (client-side) users list.
            </summary>
            
            <remarks>
            This manager keeps track of all the users that are currently joined in the same Rooms of the current user. It also provides utility methods to look for users by name and id.
            </remarks>
            
            <seealso cref="P:Sfs2X.SmartFox.UserManager"/>
        </member>
        <member name="F:Sfs2X.Entities.Managers.SFSUserManager.room">
            <exclude/>
        </member>
        <member name="F:Sfs2X.Entities.Managers.SFSUserManager.sfs">
            <exclude/>
        </member>
        <member name="M:Sfs2X.Entities.Managers.SFSUserManager.LogWarn(System.String)">
            <exclude/>
        </member>
        <member name="M:Sfs2X.Entities.Managers.SFSUserManager.#ctor(Sfs2X.SmartFox)">
            <exclude/>
        </member>
        <member name="M:Sfs2X.Entities.Managers.SFSUserManager.#ctor(Sfs2X.Entities.Room)">
            <exclude/>
        </member>
        <member name="M:Sfs2X.Entities.Managers.SFSUserManager.ContainsUserName(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Sfs2X.Entities.Managers.SFSUserManager.ContainsUserId(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Sfs2X.Entities.Managers.SFSUserManager.ContainsUser(Sfs2X.Entities.User)">
            <inheritdoc />
        </member>
        <member name="M:Sfs2X.Entities.Managers.SFSUserManager.GetUserByName(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Sfs2X.Entities.Managers.SFSUserManager.GetUserById(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Sfs2X.Entities.Managers.SFSUserManager.AddUser(Sfs2X.Entities.User)">
            <exclude/>
        </member>
        <member name="M:Sfs2X.Entities.Managers.SFSUserManager.AddUserInternal(Sfs2X.Entities.User)">
            <exclude/>
        </member>
        <member name="M:Sfs2X.Entities.Managers.SFSUserManager.RemoveUser(Sfs2X.Entities.User)">
            <exclude/>
        </member>
        <member name="M:Sfs2X.Entities.Managers.SFSUserManager.RemoveUserById(System.Int32)">
            <exclude/>
        </member>
        <member name="P:Sfs2X.Entities.Managers.SFSUserManager.UserCount">
            <inheritdoc />
        </member>
        <member name="P:Sfs2X.Entities.Managers.SFSUserManager.SmartFoxClient">
            <exclude/>
        </member>
        <member name="M:Sfs2X.Entities.Managers.SFSUserManager.GetUserList">
            <inheritdoc />
        </member>
        <member name="M:Sfs2X.Entities.Managers.SFSUserManager.ReplaceAll(System.Collections.Generic.List{Sfs2X.Entities.User})">
            <exclude/>
        </member>
        <member name="T:Sfs2X.Entities.Match.BoolMatch">
            <summary>
            The BoolMatch class is used in matching expressions to check boolean conditions.
            </summary>
            
            <seealso cref="T:Sfs2X.Entities.Match.MatchExpression"/>
        </member>
        <member name="F:Sfs2X.Entities.Match.BoolMatch.EQUALS">
            <summary>
            An instance of BoolMatch representing the following condition: <em>bool1 == bool2</em>.
            </summary>
        </member>
        <member name="F:Sfs2X.Entities.Match.BoolMatch.NOT_EQUALS">
            <summary>
            An instance of BoolMatch representing the following condition: <em>bool1 != bool2</em>.
            </summary>
        </member>
        <member name="M:Sfs2X.Entities.Match.BoolMatch.#ctor(System.String)">
            <exclude/>
        </member>
        <member name="P:Sfs2X.Entities.Match.BoolMatch.Symbol">
            <inheritdoc />
        </member>
        <member name="P:Sfs2X.Entities.Match.BoolMatch.Type">
            <inheritdoc />
        </member>
        <member name="T:Sfs2X.Entities.Match.IMatcher">
            <summary>
            The IMatcher interface defines the properties that an object representing a condition to be used in a matching expression exposes.
            </summary>
            
            <seealso cref="T:Sfs2X.Entities.Match.MatchExpression"/>
        </member>
        <member name="P:Sfs2X.Entities.Match.IMatcher.Symbol">
            <summary>
            Returns the condition symbol of this matcher.
            </summary>
        </member>
        <member name="P:Sfs2X.Entities.Match.IMatcher.Type">
            <summary>
            Returns the type id of this matcher.
            </summary>
        </member>
        <member name="T:Sfs2X.Entities.Match.LogicOperator">
            <summary>
            The LogicOperator class is used to concatenate two matching expressions using the <b>AND</b> or <b>OR</b> logical operator.
            </summary>
            
            <seealso cref="T:Sfs2X.Entities.Match.MatchExpression"/>
        </member>
        <member name="F:Sfs2X.Entities.Match.LogicOperator.AND">
            <summary>
            An instance of LogicOperator representing the <em>AND</em> logical operator.
            </summary>
        </member>
        <member name="F:Sfs2X.Entities.Match.LogicOperator.OR">
            <summary>
            An instance of LogicOperator representing the <em>OR</em> logical operator.
            </summary>
        </member>
        <member name="M:Sfs2X.Entities.Match.LogicOperator.#ctor(System.String)">
            <exclude/>
        </member>
        <member name="P:Sfs2X.Entities.Match.LogicOperator.Id">
            <summary>
            Returns the id of the current LogicOperator instance. It can be the string "AND" or "OR".
            </summary>
        </member>
        <member name="T:Sfs2X.Entities.Match.MatchExpression">
            <summary>
            The MatchExpression class represents a matching expression used to compare custom variables or predefined properties when searching for users or Rooms.
            </summary>
            
            <remarks>
            The matching expressions are built like "if" statements in any common programming language. They work like queries in a database and can be used to search for Rooms
            or users using custom criteria: in fact a matching expression can compare predefined properties of the Room and user entities
            (see the <see cref="T:Sfs2X.Entities.Match.RoomProperties"/> and <see cref="T:Sfs2X.Entities.Match.UserProperties"/> classes),but also custom Room or User Variables.
            <para/>
            These expressions are easy to create and concatenate, and they can be used for many different filtering operations within the SmartFoxServer 2X framework,
            for example to invite players to join a game (see the <see cref="T:Sfs2X.Requests.Game.CreateSFSGameRequest"/> request description),
            to look for specific Rooms or users (see the <see cref="T:Sfs2X.Requests.FindRoomsRequest"/> and <see cref="T:Sfs2X.Requests.FindUsersRequest"/> requests descriptions), etc.
            <para/>
            Additionally (see the examples for more informations):
            <ul>
            <li>any number of expressions can be linked together with the logical <b>AND</b> and <b>OR</b> operators to create complex queries;</li>
            <li>searching through nested data structures such as <see cref="T:Sfs2X.Entities.Data.SFSObject"/> and <see cref="T:Sfs2X.Entities.Data.SFSArray"/> can be done via a very simple dot-syntax.</li>
            </ul>
            </remarks>
            
            <example>
            The following example shows how to create a simple matching expression made of two concatenated conditions: it compares the custom "rank" and "country"
            User Variables to the passed values. This expression could be used during the creation of a Game Room, to filter the users that the server should take
            into account when sending the invitations to join the game (only italian users with a ranking greater than 5 - whatever this number means to our game):
            <code>
            MatchExpression exp = new MatchExpression('rank', NumberMatch.GREATER_THAN, 5).And('country', StringMatch.EQUALS, 'Italy');
            </code>
            
            The following example creates a matching expression made of three concatenated conditions which compare two predefined Room properties and the custom "isGameStarted"
            Room Variable to the passed values; this expression could be used to retrieve all the Game Rooms still waiting for players to join them:
            <code>
            MatchExpression exp = new MatchExpression(RoomProperties.IS_GAME, BoolMatch.EQUALS, true)
                                                 .And(RoomProperties.HAS_FREE_PLAYER_SLOTS, BoolMatch.EQUALS, true)
                                                 .And("isGameStarted", BoolMatch.EQUALS, false);
            </code>
            
            The following example creates a matching expression which compares a nested property in a complex data structure; an SFSObject called "avatarData" (could be a User Variable for example)
            contains the "shield" object (a nested SFSObject) which in turn contains, among others, the "inUse" property which could be used to retrieve all user
            whose avatars are currently equipped with a shield:
            <code>
            MatchExpression exp = new MatchExpression("avatarData.shield.inUse", BoolMatch.EQUALS, true);
            </code>
            
            The following example is similar to the previous one, but it involves an SFSArray. The "avatarData" object contains the "weapons" SFSArray, from which the expression retrieves
            the third element (that .3 means "give me the element at index == 3") that we know being the weapon the user avatar has in his right hand. Again, this element is an SFSObject containing,
            among the others, the "name" property which can be compared to the passed string. This example could be used to retrieve all users whose avatars have the Narsil sword in the right hand:
            <code>
            MatchExpression exp = new MatchExpression("avatarData.weapons.3.name", StringMatch.EQUALS, "Narsil");
            </code>
            </example>
            
            <seealso cref="T:Sfs2X.Entities.Match.RoomProperties"/>
            <seealso cref="T:Sfs2X.Entities.Match.UserProperties"/>
            <seealso cref="T:Sfs2X.Requests.Game.CreateSFSGameRequest"/>
            <seealso cref="T:Sfs2X.Requests.FindRoomsRequest"/>
            <seealso cref="T:Sfs2X.Requests.FindUsersRequest"/>
        </member>
        <member name="M:Sfs2X.Entities.Match.MatchExpression.ChainedMatchExpression(System.String,Sfs2X.Entities.Match.IMatcher,System.Object,Sfs2X.Entities.Match.LogicOperator,Sfs2X.Entities.Match.MatchExpression)">
            <exclude/>
        </member>
        <member name="M:Sfs2X.Entities.Match.MatchExpression.#ctor(System.String,Sfs2X.Entities.Match.IMatcher,System.Object)">
            <summary>
            Creates a new MatchExpression instance.
            </summary>
            
            <param name="varName">Name of the variable or property to match.</param>
            <param name="condition">The matching condition.</param>
            <param name="varValue">The value to compare against the variable or property during the matching.</param>
        </member>
        <member name="M:Sfs2X.Entities.Match.MatchExpression.And(System.String,Sfs2X.Entities.Match.IMatcher,System.Object)">
            <summary>
            Concatenates the current expression with a new one using the logical <b>AND</b> operator.
            </summary>
            
            <param name="varName">The name of the additional variable or property to match.</param>
            <param name="condition">The additional matching condition.</param>
            <param name="varValue">The value to compare against the additional variable or property during the matching.</param>
            
            <returns>A new MatchExpression resulting from the concatenation of the current expression with a new one generated from the specified parameters.</returns>
            
            <seealso cref="P:Sfs2X.Entities.Match.MatchExpression.VarName"/>
            <seealso cref="P:Sfs2X.Entities.Match.MatchExpression.Condition"/>
            <seealso cref="P:Sfs2X.Entities.Match.MatchExpression.VarValue"/>
            <seealso cref="F:Sfs2X.Entities.Match.LogicOperator.AND"/>
        </member>
        <member name="M:Sfs2X.Entities.Match.MatchExpression.Or(System.String,Sfs2X.Entities.Match.IMatcher,System.Object)">
            <summary>
            Concatenates the current expression with a new one using the logical <b>OR</b> operator.
            </summary>
            
            <param name="varName">The name of the additional variable or property to match.</param>
            <param name="condition">The additional matching condition.</param>
            <param name="varValue">The value to compare against the additional variable or property during the matching.</param>
            
            <returns>A new MatchExpression resulting from the concatenation of the current expression with a new one generated from the specified parameters.</returns>
            
            <seealso cref="P:Sfs2X.Entities.Match.MatchExpression.VarName"/>
            <seealso cref="P:Sfs2X.Entities.Match.MatchExpression.Condition"/>
            <seealso cref="P:Sfs2X.Entities.Match.MatchExpression.VarValue"/>
            <seealso cref="F:Sfs2X.Entities.Match.LogicOperator.OR"/>
        </member>
        <member name="P:Sfs2X.Entities.Match.MatchExpression.VarName">
            <summary>
            Returns the name of the variable or property against which the comparison is made.
            </summary>
            
            <remarks>
            Depending what the matching expression is used for (searching a <see cref="T:Sfs2X.Entities.User"/> or a <see cref="T:Sfs2X.Entities.Room"/>),
            this can be the name of a <see cref="T:Sfs2X.Entities.Variables.UserVariable"/> or a <see cref="T:Sfs2X.Entities.Variables.RoomVariable"/>,
            or it can be one of the constants contained in the <see cref="T:Sfs2X.Entities.Match.UserProperties"/> or <see cref="T:Sfs2X.Entities.Match.RoomProperties"/> classes,
            representing some of the predefined properties of the user and Room entities respectively.
            </remarks>
            
            <seealso cref="T:Sfs2X.Entities.Match.RoomProperties"/>
            <seealso cref="T:Sfs2X.Entities.Match.UserProperties"/>
            <seealso cref="T:Sfs2X.Entities.Variables.RoomVariable"/>
            <seealso cref="T:Sfs2X.Entities.Variables.UserVariable"/>
            <seealso cref="T:Sfs2X.Entities.User"/>
            <seealso cref="T:Sfs2X.Entities.Room"/>
        </member>
        <member name="P:Sfs2X.Entities.Match.MatchExpression.Condition">
            <summary>
            Returns the matching criteria used during values comparison.
            </summary>
            
            <remarks>
            Different objects implementing the <seealso cref="T:Sfs2X.Entities.Match.IMatcher"/> interface can be used, depending on the type of the variable or property to check.
            </remarks>
            
            <seealso cref="T:Sfs2X.Entities.Match.BoolMatch"/>
            <seealso cref="T:Sfs2X.Entities.Match.NumberMatch"/>
            <seealso cref="T:Sfs2X.Entities.Match.StringMatch"/>
        </member>
        <member name="P:Sfs2X.Entities.Match.MatchExpression.VarValue">
            <summary>
            Returns the value against which the variable or property corresponding to varName is compared.
            </summary>
        </member>
        <member name="P:Sfs2X.Entities.Match.MatchExpression.LogicOp">
            <summary>
            In case of concatenated expressions, returns the current logical operator.
            </summary>
            
            <remarks>
            The default value is <c>null</c>.
            </remarks>
            
            <seealso cref="T:Sfs2X.Entities.Match.LogicOperator"/>
        </member>
        <member name="M:Sfs2X.Entities.Match.MatchExpression.HasNext">
            <summary>
            Checks if the current matching expression is concatenated to another one through a logical operator.
            </summary>
            
            <returns><c>true</c> if the current matching expression is concatenated to another one.</returns>
            
            <seealso cref="T:Sfs2X.Entities.Match.LogicOperator"/>
        </member>
        <member name="M:Sfs2X.Entities.Match.MatchExpression.Next">
            <summary>
            Get the next matching expression concatenated to the current one.
            </summary>
            
            <returns>The next expression concatenated to the current one.</returns>
        </member>
        <member name="M:Sfs2X.Entities.Match.MatchExpression.Rewind">
            <summary>
            Moves the iterator cursor to the first matching expression in the chain.
            </summary>
            
            <returns>The MatchExpression object at the top of the chain of matching expressions.</returns>
        </member>
        <member name="M:Sfs2X.Entities.Match.MatchExpression.AsString">
            <exclude/>
        </member>
        <member name="M:Sfs2X.Entities.Match.MatchExpression.ToString">
            <summary>
            Returns a string representation of the matching expression.
            </summary>
            
            <returns>
            A string that represents the current <see cref="T:Sfs2X.Entities.Match.MatchExpression"/>.
            </returns>
        </member>
        <member name="M:Sfs2X.Entities.Match.MatchExpression.ToSFSArray">
            <exclude/>
        </member>
        <member name="T:Sfs2X.Entities.Match.NumberMatch">
            <summary>
            The NumberMatch class is used in matching expressions to check numeric conditions.
            </summary>
            
            <seealso cref="T:Sfs2X.Entities.Match.MatchExpression"/>
        </member>
        <member name="F:Sfs2X.Entities.Match.NumberMatch.EQUALS">
            <summary>
            An instance of NumberMatch representing the following condition: <em>number1 == number2.</em>
            </summary>
        </member>
        <member name="F:Sfs2X.Entities.Match.NumberMatch.NOT_EQUALS">
            <summary>
            An instance of NumberMatch representing the following condition: <em>number1 != number2.</em>
            </summary>
        </member>
        <member name="F:Sfs2X.Entities.Match.NumberMatch.GREATER_THAN">
            <summary>
            An instance of NumberMatch representing the following condition: <em>number1 &gt; number2.</em>
            </summary>
        </member>
        <member name="F:Sfs2X.Entities.Match.NumberMatch.GREATER_OR_EQUAL_THAN">
            <summary>
            An instance of NumberMatch representing the following condition: <em>number1 &gt;= number2.</em>
            </summary>
        </member>
        <member name="F:Sfs2X.Entities.Match.NumberMatch.LESS_THAN">
            <summary>
            An instance of NumberMatch representing the following condition: <em>number1 &lt; number2.</em>
            </summary>
        </member>
        <member name="F:Sfs2X.Entities.Match.NumberMatch.LESS_OR_EQUAL_THAN">
            <summary>
            An instance of NumberMatch representing the following condition: <em>number1 &lt;= number2.</em>
            </summary>
        </member>
        <member name="M:Sfs2X.Entities.Match.NumberMatch.#ctor(System.String)">
            <exclude/>
        </member>
        <member name="P:Sfs2X.Entities.Match.NumberMatch.Symbol">
            <inheritdoc />
        </member>
        <member name="P:Sfs2X.Entities.Match.NumberMatch.Type">
            <inheritdoc />
        </member>
        <member name="T:Sfs2X.Entities.Match.RoomProperties">
            <summary>
            The RoomProperties class contains the names of predefined properties that can be used in matching expressions to search/filter Rooms.
            </summary>
            
            <seealso cref="T:Sfs2X.Entities.Match.MatchExpression"/>
            <seealso cref="T:Sfs2X.Entities.Room"/>
        </member>
        <member name="F:Sfs2X.Entities.Match.RoomProperties.NAME">
            <summary>
            The Room name.
            </summary>
            
            <remarks>
            Requires a <see cref="T:Sfs2X.Entities.Match.StringMatch"/> to be used for values comparison.
            </remarks>
        </member>
        <member name="F:Sfs2X.Entities.Match.RoomProperties.GROUP_ID">
            <summary>
            The name of the Group to which the Room belongs.
            </summary>
            
            <remarks>
            Requires a <see cref="T:Sfs2X.Entities.Match.StringMatch"/> to be used for values comparison.
            </remarks>
        </member>
        <member name="F:Sfs2X.Entities.Match.RoomProperties.MAX_USERS">
            <summary>
            The maximum number of users allowed in the Room (players in Game Rooms).
            </summary>
            
            <remarks>
            Requires a <see cref="T:Sfs2X.Entities.Match.NumberMatch"/> to be used for values comparison.
            </remarks>
        </member>
        <member name="F:Sfs2X.Entities.Match.RoomProperties.MAX_SPECTATORS">
            <summary>
            The maximum number of spectators allowed in the Room (Game Rooms only).
            </summary>
            
            <remarks>
            Requires a <see cref="T:Sfs2X.Entities.Match.NumberMatch"/> to be used for values comparison.
            </remarks>
        </member>
        <member name="F:Sfs2X.Entities.Match.RoomProperties.USER_COUNT">
            <summary>
            The Room users count (players in Game Rooms).
            </summary>
            
            <remarks>
            Requires a <see cref="T:Sfs2X.Entities.Match.NumberMatch"/> to be used for values comparison.
            </remarks>
        </member>
        <member name="F:Sfs2X.Entities.Match.RoomProperties.SPECTATOR_COUNT">
            <summary>
            The Room spectators count (Game Rooms only).
            </summary>
            
            <remarks>
            Requires a <see cref="T:Sfs2X.Entities.Match.NumberMatch"/> to be used for values comparison.
            </remarks>
        </member>
        <member name="F:Sfs2X.Entities.Match.RoomProperties.IS_GAME">
            <summary>
            The Room is a Game Room.
            </summary>
            
            <remarks>
            Requires a <see cref="T:Sfs2X.Entities.Match.BoolMatch"/> to be used for values comparison.
            </remarks>
        </member>
        <member name="F:Sfs2X.Entities.Match.RoomProperties.IS_PRIVATE">
            <summary>
            The Room is private.
            </summary>
            
            <remarks>
            Requires a <see cref="T:Sfs2X.Entities.Match.BoolMatch"/> to be used for values comparison.
            </remarks>
        </member>
        <member name="F:Sfs2X.Entities.Match.RoomProperties.HAS_FREE_PLAYER_SLOTS">
            <summary>
            The Room has at least one free player slot.
            </summary>
            
            <remarks>
            Requires a <see cref="T:Sfs2X.Entities.Match.BoolMatch"/> to be used for values comparison.
            </remarks>
        </member>
        <member name="F:Sfs2X.Entities.Match.RoomProperties.IS_TYPE_SFSGAME">
            <summary>
            The Room is an <em>SFSGame</em> on the server-side.
            </summary>
            
            <remarks>
            Requires a <see cref="T:Sfs2X.Entities.Match.BoolMatch"/> to be used for values comparison.
            </remarks>
        </member>
        <member name="F:Sfs2X.Entities.Match.RoomProperties.IS_TYPE_MMO">
            <summary>
            The Room is an <em>MMORom</em> on the server-side.
            </summary>
            
            <remarks>
            Requires a <see cref="T:Sfs2X.Entities.Match.BoolMatch"/> to be used for values comparison.
            </remarks>
        </member>
        <member name="F:Sfs2X.Entities.Match.RoomProperties.IS_TYPE_DEFAULT">
            <summary>
            The Room is of default type on the server-side (i.e. not an MMORoom or SFSGame).
            </summary>
            
            <remarks>
            Requires a <see cref="T:Sfs2X.Entities.Match.BoolMatch"/> to be used for values comparison.
            </remarks>
        </member>
        <member name="M:Sfs2X.Entities.Match.RoomProperties.#ctor">
            <exclude/>
        </member>
        <member name="T:Sfs2X.Entities.Match.StringMatch">
            <summary>
            The StringMatch class is used in matching expressions to check string conditions.
            </summary>
            
            <seealso cref="T:Sfs2X.Entities.Match.MatchExpression"/>
        </member>
        <member name="F:Sfs2X.Entities.Match.StringMatch.EQUALS">
            <summary>
            An instance of StringMatch representing the following condition: <em>string1 == string2</em>.
            </summary>
        </member>
        <member name="F:Sfs2X.Entities.Match.StringMatch.NOT_EQUALS">
            <summary>
            An instance of StringMatch representing the following condition: <em>string1 != string2</em>.
            </summary>
        </member>
        <member name="F:Sfs2X.Entities.Match.StringMatch.CONTAINS">
            <summary>
            An instance of StringMatch representing the following condition: <em>string1.indexOf(string2) != -1</em>.
            </summary>
        </member>
        <member name="F:Sfs2X.Entities.Match.StringMatch.STARTS_WITH">
            <summary>
            An instance of StringMatch representing the following condition: <em>string1</em> starts with characters contained in <em>string2</em>.
            </summary>
        </member>
        <member name="F:Sfs2X.Entities.Match.StringMatch.ENDS_WITH">
            <summary>
            An instance of StringMatch representing the following condition: <em>string1</em> ends with characters contained in <em>string2</em>.
            </summary>
        </member>
        <member name="M:Sfs2X.Entities.Match.StringMatch.#ctor(System.String)">
            <exclude/>
        </member>
        <member name="P:Sfs2X.Entities.Match.StringMatch.Symbol">
            <inheritdoc />
        </member>
        <member name="P:Sfs2X.Entities.Match.StringMatch.Type">
            <inheritdoc />
        </member>
        <member name="T:Sfs2X.Entities.Match.UserProperties">
            <summary>
            The UserProperties class contains the names of predefined properties that can be used in matching expressions to search/filter users.
            </summary>
            
            <seealso cref="T:Sfs2X.Entities.Match.MatchExpression"/>
            <seealso cref="T:Sfs2X.Entities.User"/>
        </member>
        <member name="F:Sfs2X.Entities.Match.UserProperties.NAME">
            <summary>
            The user name.
            </summary>
            
            <remarks>
            Requires a <see cref="T:Sfs2X.Entities.Match.StringMatch"/> to be used for values comparison.
            </remarks>
        </member>
        <member name="F:Sfs2X.Entities.Match.UserProperties.IS_PLAYER">
            <summary>
            The user is a player in a Game Room.
            </summary>
            
            <remarks>
            Requires a <see cref="T:Sfs2X.Entities.Match.BoolMatch"/> to be used for values comparison.
            </remarks>
        </member>
        <member name="F:Sfs2X.Entities.Match.UserProperties.IS_SPECTATOR">
            <summary>
            The user is a spectator in a Game Room.
            </summary>
            
            <remarks>
            Requires a <see cref="T:Sfs2X.Entities.Match.BoolMatch"/> to be used for values comparison.
            </remarks>
        </member>
        <member name="F:Sfs2X.Entities.Match.UserProperties.IS_NPC">
            <summary>
            The user is a Non-Player Character (NPC).
            </summary>
            
            <remarks>
            Requires a <see cref="T:Sfs2X.Entities.Match.BoolMatch"/> to be used for values comparison.
            </remarks>
        </member>
        <member name="F:Sfs2X.Entities.Match.UserProperties.PRIVILEGE_ID">
            <summary>
            The user privilege id.
            </summary>
            
            <remarks>
            Requires a <see cref="T:Sfs2X.Entities.Match.NumberMatch"/> to be used for values comparison.
            </remarks>
        </member>
        <member name="F:Sfs2X.Entities.Match.UserProperties.IS_IN_ANY_ROOM">
            <summary>
            The user joined at least one Room.
            </summary>
            
            <remarks>
            Requires a <see cref="T:Sfs2X.Entities.Match.BoolMatch"/> to be used for values comparison.
            </remarks>
        </member>
        <member name="M:Sfs2X.Entities.Match.UserProperties.#ctor">
            <exclude/>
        </member>
        <member name="T:Sfs2X.Entities.Variables.BuddyVariable">
            <summary>
            The BuddyVariable interface defines all the public methods and properties that an object representing a SmartFoxServer Buddy Variable exposes.
            </summary>
            
            <remarks>
            In the SmartFoxServer 2X client API this interface is implemented by the <see cref="T:Sfs2X.Entities.Variables.SFSBuddyVariable"/> class. Read the class description for additional informations.
            </remarks>
            
            <seealso cref="T:Sfs2X.Entities.Variables.SFSBuddyVariable"/>
        </member>
        <member name="P:Sfs2X.Entities.Variables.BuddyVariable.IsOffline">
            <summary>
            Indicates whether the Buddy Variable is persistent or not.
            </summary>
            
            <remarks>
            By convention any Buddy Variable whose name starts with the dollar sign ($) will be regarded as persistent and stored locally by the server.
            Persistent Buddy Variables are also referred to as "offline variables" because they are available to all users who have the owner in their Buddy Lists, whether that Buddy is online or not.
            </remarks>
        </member>
        <member name="T:Sfs2X.Entities.Variables.IMMOItemVariable">
            <summary>
            The IMMOItemVariable interface defines all the public methods and properties that an object representing a SmartFoxServer MMOItem Variable exposes.
            </summary>
            
            <remarks>
            In the SmartFoxServer 2X client API this interface is implemented by the <see cref="T:Sfs2X.Entities.Variables.MMOItemVariable"/> class. Read the class description for additional informations.
            </remarks>
            
            <seealso cref="T:Sfs2X.Entities.Variables.MMOItemVariable"/>
        </member>
        <member name="T:Sfs2X.Entities.Variables.MMOItemVariable">
            <summary>
            The MMOItemVariable object represents a SmartFoxServer MMOItem Variable entity on the client.
            </summary>
            
            <remarks>
            An MMOItem Variable is a custom value attached to an MMOItem object that gets automatically synchronized between client and server on every change, provided that the MMOItem is inside the Area of Interest of the current user in a MMORoom.
            <para />
            <b>NOTE:</b> MMOItem Variables behave exactly like User Variables and support the same data types, but they can be created, updated and deleted on the server side only.
            </remarks>
            
            <seealso cref="T:Sfs2X.Entities.MMOItem"/>
            <seealso cref="T:Sfs2X.Entities.MMORoom"/>
        </member>
        <member name="M:Sfs2X.Entities.Variables.MMOItemVariable.FromSFSArray(Sfs2X.Entities.Data.ISFSArray)">
            <exclude/>
        </member>
        <member name="M:Sfs2X.Entities.Variables.MMOItemVariable.#ctor(System.String,System.Object,System.Int32)">
            <exclude/>
        </member>
        <member name="M:Sfs2X.Entities.Variables.MMOItemVariable.#ctor(System.String,System.Object)">
            <exclude/>
        </member>
        <member name="M:Sfs2X.Entities.Variables.MMOItemVariable.ToString">
            <summary>
            Returns a string that contains the MMOItem Variable name, type and value.
            </summary>
            
            <returns>
            The string representation of the <see cref="T:Sfs2X.Entities.Variables.MMOItemVariable"/> object.
            </returns>
        </member>
        <member name="T:Sfs2X.Entities.Variables.ReservedBuddyVariables">
            <summary>
            The ReservedBuddyVariables class contains the costants describing the SmartFoxServer API reserved Buddy Variable names.
            </summary>
            
            <remarks>
            Reserved Buddy Variables are used to store specific buddy-related informations.
            </remarks>
        </member>
        <member name="F:Sfs2X.Entities.Variables.ReservedBuddyVariables.BV_ONLINE">
            <summary>
            The Buddy Variable with this name keeps track of the online/offline state of the user in a buddy list.
            </summary>
            
            <remarks>
            This variable is persistent, which means that the online/offline state is preserved upon disconnection.
            </remarks>
            
            <seealso cref="P:Sfs2X.Entities.Buddy.IsOnline"/>
            <seealso cref="P:Sfs2X.Entities.Managers.IBuddyManager.MyOnlineState"/>
        </member>
        <member name="F:Sfs2X.Entities.Variables.ReservedBuddyVariables.BV_STATE">
            <summary>
            The Buddy Variable with this name stores the custom state of the user in a buddy list.
            </summary>
            
            <remarks>
            This variable is persistent, which means that the custom state is preserved upon disconnection.
            </remarks>
            
            <seealso cref="P:Sfs2X.Entities.Buddy.State"/>
            <seealso cref="P:Sfs2X.Entities.Managers.IBuddyManager.MyState"/>
        </member>
        <member name="F:Sfs2X.Entities.Variables.ReservedBuddyVariables.BV_NICKNAME">
            <summary>
            The Buddy Variable with this name stores the optional nickname of the user in a buddy list.
            </summary>
            
            <remarks>
            This variable is persistent, which means that the nickname is preserved upon disconnection.
            </remarks>
            
            <seealso cref="P:Sfs2X.Entities.Buddy.NickName"/>
            <seealso cref="P:Sfs2X.Entities.Managers.IBuddyManager.MyNickName"/>
        </member>
        <member name="T:Sfs2X.Entities.Variables.ReservedRoomVariables">
            <summary>
            The ReservedRoomVariables class contains the costants describing the SmartFoxServer API reserved Room Variable names.
            </summary>
        </member>
        <member name="F:Sfs2X.Entities.Variables.ReservedRoomVariables.RV_GAME_STARTED">
            <summary>
            The Room Variable with this name keeps track of the state (started or stopped) of a game created with the <see cref="T:Sfs2X.Requests.Game.CreateSFSGameRequest"/> request.
            </summary>
            
            <seealso cref="T:Sfs2X.Requests.Game.CreateSFSGameRequest"/>
            <seealso cref="P:Sfs2X.Requests.Game.SFSGameSettings.NotifyGameStarted"/>
        </member>
        <member name="T:Sfs2X.Entities.Variables.RoomVariable">
            <summary>
            The RoomVariable interface defines all the public methods and properties that an object representing a SmartFoxServer Room Variable exposes.
            </summary>
            
            <remarks>
            In the SmartFoxServer 2X client API this interface is implemented by the <see cref="T:Sfs2X.Entities.Variables.SFSRoomVariable"/> class. Read the class description for additional informations.
            </remarks>
            
            <seealso cref="T:Sfs2X.Entities.Variables.SFSRoomVariable"/>
        </member>
        <member name="P:Sfs2X.Entities.Variables.RoomVariable.IsPrivate">
            <summary>
            Indicates whether this Room Variable is private or not.
            </summary>
            
            <remarks>
            A private Room Variable is visible to all users in the same Room, but it can be modified by its owner only (the user that created it).
            <para/>
            <b>NOTE</b>: setting this property manually on an existing Room Variable returned by the API has no effect on the server and can disrupt the API functioning.
            This flag can be set when the Room Variable object is created by the developer only (using the <em>new</em> keyword).
            </remarks>
        </member>
        <member name="P:Sfs2X.Entities.Variables.RoomVariable.IsPersistent">
            <summary>
            Indicates whether this Room Variable is persistent or not.
            </summary>
            
            <remarks>
            A persistent Room Variable continues to exist in the Room after the user who created it has left it and until he disconnects.
            <para/>
            <b>NOTE</b>: setting this property manually on an existing Room Variable returned by the API has no effect on the server and can disrupt the API functioning.
            This flag can be set when the Room Variable object is created by the developer only (using the <em>new</em> keyword).
            </remarks>
        </member>
        <member name="T:Sfs2X.Entities.Variables.SFSBuddyVariable">
            <summary>
            The SFSBuddyVariable object represents a SmartFoxServer Buddy Variable entity on the client.
            </summary>
            
            <remarks>
            The Buddy Variable is a custom value attached to a Buddy object in a Buddy List that gets automatically synchronized between client and server on every change.
            <para/>
            Buddy Variables work with the same principle of the User and Room Variables. The only difference is the logic by which they get propagated to other users.
            While Room and User Variables are usually broadcast to all clients in the same Room, Buddy Variables updates are sent to all users who have the owner of the Buddy Variable in their Buddy Lists.
            <para/>
            Buddy Variables are particularly useful to store custom user data that must be "visible" to the buddies only, such as a profile, a score, a status message, etc.
            Buddy Variables can be set by means of the <see cref="T:Sfs2X.Requests.Buddylist.SetBuddyVariablesRequest"/> request; they support the data types listed in the <seealso cref="T:Sfs2X.Entities.Variables.VariableType"/> class (also nested). A Buddy Variable can also be <c>null</c>.
            <para/>
            There is also a special convention that allows Buddy Variables to be set as "offline". Offline Buddy Variables are persistent values which are made available to all users
            who have the owner in their Buddy Lists, whether that Buddy is online or not. In order to make a Buddy Variable persistent, its name should start with a dollar sign ($).
            This conventional character is contained in the <see cref="F:Sfs2X.Entities.Variables.SFSBuddyVariable.OFFLINE_PREFIX"/> constant.
            </remarks>
            
            <seealso cref="T:Sfs2X.Entities.SFSBuddy"/>
            <seealso cref="T:Sfs2X.Requests.Buddylist.SetBuddyVariablesRequest"/>
            <seealso cref="F:Sfs2X.Core.SFSBuddyEvent.BUDDY_VARIABLES_UPDATE"/>
        </member>
        <member name="F:Sfs2X.Entities.Variables.SFSBuddyVariable.OFFLINE_PREFIX">
            <summary>
            The prefix to be added to a Buddy Variable name to make it persistent.
            </summary>
            
            <remarks>
            A persistent Buddy Variable is made available to all users who have the owner in their Buddy Lists, whether that Buddy is online or not.
            </remarks>
        </member>
        <member name="M:Sfs2X.Entities.Variables.SFSBuddyVariable.FromSFSArray(Sfs2X.Entities.Data.ISFSArray)">
            <exclude/>
        </member>
        <member name="M:Sfs2X.Entities.Variables.SFSBuddyVariable.#ctor(System.String,System.Object,System.Int32)">
            <summary>
            Creates a new SFSBuddyVariable instance.
            </summary>
            
            <param name="name">The name of the Buddy Variable.</param>
            <param name="val">The value of the Buddy Variable.</param>
            <param name="type">The type of the Buddy Variable among those available in the <see cref="T:Sfs2X.Entities.Variables.VariableType"/> class. Usually it is not necessary to pass this parameter, as the type is auto-detected from the value.</param>
        </member>
        <member name="M:Sfs2X.Entities.Variables.SFSBuddyVariable.#ctor(System.String,System.Object)">
            <summary>
            See <see cref="M:Sfs2X.Entities.Variables.SFSBuddyVariable.#ctor(System.String,System.Object,System.Int32)"/>.
            </summary>
        </member>
        <member name="P:Sfs2X.Entities.Variables.SFSBuddyVariable.IsOffline">
            <inheritdoc />
        </member>
        <member name="M:Sfs2X.Entities.Variables.SFSBuddyVariable.ToString">
            <summary>
            Returns a string that contains the Buddy Variable name, type and value.
            </summary>
            
            <returns>
            The string representation of the <see cref="T:Sfs2X.Entities.Variables.SFSBuddyVariable"/> object.
            </returns>
        </member>
        <member name="T:Sfs2X.Entities.Variables.SFSRoomVariable">
            <summary>
            The SFSRoomVariable object represents a SmartFoxServer Room Variable entity on the client.
            </summary>
            
            <remarks>
            This is a custom value attached to a Room object that gets automatically synchronized between client and server on every change.
            <para/>
            Room Variables are particularly useful to store custom Room data such as a game status and other Room-level informations.
            Room Variables can be set by means of the <see cref="T:Sfs2X.Requests.SetRoomVariablesRequest"/> request; they support the data types listed in the <seealso cref="T:Sfs2X.Entities.Variables.VariableType"/> class (also nested). A Room Variable can also be <c>null</c>.
            <para/>
            Room Variables also support a number of specific flags:
            <ul>
            	<li><b>Private</b>: a private Room Variable can only be modified by its creator.</li>
            	<li><b>Persistent</b>: a persistent Room Variable will continue to exist even if its creator has left the Room (but will be deleted when the creator will get disconnected).</li>
            	<li><b>Global</b>: a global Room Variable will fire update events not only to all users in the Room, but also to all users in the Group to which the Room belongs (NOTE: this flag is not available on the client-side because clients are not allowed to create global Room Variables).</li>
            </ul>
            </remarks>
            
            <seealso cref="T:Sfs2X.Entities.Room"/>
            <seealso cref="T:Sfs2X.Requests.SetRoomVariablesRequest"/>
        </member>
        <member name="M:Sfs2X.Entities.Variables.SFSRoomVariable.FromSFSArray(Sfs2X.Entities.Data.ISFSArray)">
            <exclude/>
        </member>
        <member name="M:Sfs2X.Entities.Variables.SFSRoomVariable.#ctor(System.String,System.Object,System.Int32)">
            <summary>
            Creates a new SFSRoomVariable instance.
            </summary>
            
            <param name="name">The name of the Room Variable.</param>
            <param name="val">The value of the Room Variable.</param>
            <param name="type">The type of the Room Variable among those available in the <see cref="T:Sfs2X.Entities.Variables.VariableType"/> class. Usually it is not necessary to pass this parameter, as the type is auto-detected from the value.</param>
        </member>
        <member name="M:Sfs2X.Entities.Variables.SFSRoomVariable.#ctor(System.String,System.Object)">
            <summary>
            See <see cref="M:Sfs2X.Entities.Variables.SFSRoomVariable.#ctor(System.String,System.Object,System.Int32)"/>.
            </summary>
        </member>
        <member name="P:Sfs2X.Entities.Variables.SFSRoomVariable.IsPrivate">
            <inheritdoc />
        </member>
        <member name="P:Sfs2X.Entities.Variables.SFSRoomVariable.IsPersistent">
            <inheritdoc />
        </member>
        <member name="M:Sfs2X.Entities.Variables.SFSRoomVariable.ToSFSArray">
            <exclude/>
        </member>
        <member name="M:Sfs2X.Entities.Variables.SFSRoomVariable.ToString">
            <summary>
            Returns a string that contains the Room Variable name, type, value and <em>isPrivate</em> flag.
            </summary>
            
            <returns>
            The string representation of the <see cref="T:Sfs2X.Entities.Variables.SFSRoomVariable"/> object.
            </returns>
        </member>
        <member name="T:Sfs2X.Entities.Variables.SFSUserVariable">
            <summary>
            The SFSUserVariable object represents a SmartFoxServer User Variable entity on the client.
            </summary>
            
            <remarks>
            This is a custom value attached to a User object that gets automatically synchronized between client and server on every change.
            <para/>
            User Variables are particularly useful to store custom user data that must be "visible" to the other users, such as a profile, a score, a status message, etc.
            User Variables can be set by means of the <see cref="T:Sfs2X.Requests.SetUserVariablesRequest"/> request; they support the data types listed in the <seealso cref="T:Sfs2X.Entities.Variables.VariableType"/> class (also nested). A User Variable can also be <c>null</c>.
            <para/>
            User Variables can be 'private' (starting from SFS2X v2.12 with client API v1.7): this flag allows to limit the visibility of variables to their owner only.
            In other words User Variables marked as private are not sent to other users, even if located in the same Room.
            </remarks>
            
            <seealso cref="T:Sfs2X.Entities.User"/>
            <seealso cref="T:Sfs2X.Requests.SetUserVariablesRequest"/>
        </member>
        <member name="M:Sfs2X.Entities.Variables.SFSUserVariable.FromSFSArray(Sfs2X.Entities.Data.ISFSArray)">
            <exclude/>
        </member>
        <member name="M:Sfs2X.Entities.Variables.SFSUserVariable.newPrivateVariable(System.String,System.Object)">
            <summary>
            Creates a new private User Variable.
            </summary>
            
            <remarks>
            Private User Variables are not broadcast to other users: they are only visible on the server side and in the owner's client application.
            </remarks>
            
            <param name="name">The name of the User Variable.</param>
            <param name="val">The value of the User Variable.</param>
        </member>
        <member name="M:Sfs2X.Entities.Variables.SFSUserVariable.#ctor(System.String,System.Object,System.Int32)">
            <summary>
            Creates a new SFSUserVariable instance.
            </summary>
            
            <param name="name">The name of the User Variable.</param>
            <param name="val">The value of the User Variable.</param>
            <param name="type">The type of the User Variable among those available in the <see cref="T:Sfs2X.Entities.Variables.VariableType"/> class. Usually it is not necessary to pass this parameter, as the type is auto-detected from the value.</param>
        </member>
        <member name="M:Sfs2X.Entities.Variables.SFSUserVariable.#ctor(System.String,System.Object)">
            <summary>
            See <see cref="M:Sfs2X.Entities.Variables.SFSUserVariable.#ctor(System.String,System.Object,System.Int32)"/>.
            </summary>
        </member>
        <member name="P:Sfs2X.Entities.Variables.SFSUserVariable.IsPrivate">
            <inheritdoc />
        </member>
        <member name="M:Sfs2X.Entities.Variables.SFSUserVariable.ToSFSArray">
            <exclude/>
        </member>
        <member name="M:Sfs2X.Entities.Variables.SFSUserVariable.ToString">
            <summary>
            Returns a string that contains the User Variable name, type, value and <em>IsPrivate</em> flag.
            </summary>
            
            <returns>
            The string representation of the <see cref="T:Sfs2X.Entities.Variables.SFSUserVariable"/> object.
            </returns>
        </member>
        <member name="T:Sfs2X.Entities.Variables.UserVariable">
            <summary>
            The UserVariable interface defines all the public methods and properties that an object representing a SmartFoxServer User Variable exposes.
            </summary>
            
            <remarks>
            In the SmartFoxServer 2X client API this interface is implemented by the <see cref="T:Sfs2X.Entities.Variables.SFSUserVariable"/> class. Read the class description for additional informations.
            </remarks>
            
            <seealso cref="T:Sfs2X.Entities.Variables.Variable"/>
        </member>
        <member name="P:Sfs2X.Entities.Variables.UserVariable.IsPrivate">
            <summary>
            Indicates whether this User Variable is private or not.
            </summary>
            
            <remarks>
            A private User Variable is visible only to its owner; any changes made to the variable will be transmitted to the owner only.
            <para/>
            <b>NOTE</b>: setting this property manually on an existing User Variable returned by the API has no effect on the server and can disrupt the API functioning.
            This flag can be set when the User Variable object is created by the developer only (using the <em>new</em> keyword).
            </remarks>
        </member>
        <member name="T:Sfs2X.Entities.Variables.VariableType">
            <summary>
            The VariableType class contains the costants defining the valid types of User and Room Variables to be passed to their constructors.
            </summary>
        </member>
        <member name="F:Sfs2X.Entities.Variables.VariableType.NULL">
            <summary>
            The User/Room Variable is <c>null</c>.
            </summary>
        </member>
        <member name="F:Sfs2X.Entities.Variables.VariableType.BOOL">
            <summary>
            The type of the User/Room Variable is boolean.
            </summary>
        </member>
        <member name="F:Sfs2X.Entities.Variables.VariableType.INT">
            <summary>
            The type of the User/Room Variable is integer.
            </summary>
        </member>
        <member name="F:Sfs2X.Entities.Variables.VariableType.DOUBLE">
            <summary>
            The type of the User/Room Variable is double.
            </summary>
        </member>
        <member name="F:Sfs2X.Entities.Variables.VariableType.STRING">
            <summary>
            The type of the User/Room Variable is string.
            </summary>
        </member>
        <member name="F:Sfs2X.Entities.Variables.VariableType.OBJECT">
            <summary>
            The type of the User/Room Variable is <em>SFSObject</em>.
            </summary>
            
            <seealso cref="T:Sfs2X.Entities.Data.SFSObject"/>
        </member>
        <member name="F:Sfs2X.Entities.Variables.VariableType.ARRAY">
            <summary>
            The type of the User/Room Variable is <em>SFSArray</em>.
            </summary>
            
            <seealso cref="T:Sfs2X.Entities.Data.SFSArray"/>
        </member>
        <member name="T:Sfs2X.Entities.Variables.Variable">
            <summary>
            The Variable interface defines all the default public methods and properties that an object representing a SmartFoxServer Variable exposes.
            </summary>
        </member>
        <member name="P:Sfs2X.Entities.Variables.Variable.Name">
            <summary>
            Indicates the name of this variable.
            </summary>
        </member>
        <member name="P:Sfs2X.Entities.Variables.Variable.Type">
            <summary>
            Indicates the type of this variable.
            </summary>
            
            <seealso cref="T:Sfs2X.Entities.Variables.VariableType"/>
        </member>
        <member name="P:Sfs2X.Entities.Variables.Variable.Value">
            <summary>
            Returns the untyped value of this variable.
            </summary>
        </member>
        <member name="M:Sfs2X.Entities.Variables.Variable.GetBoolValue">
            <summary>
            Retrieves the value of a boolean variable.
            </summary>
            
            <returns>The variable value as a boolean.</returns>
        </member>
        <member name="M:Sfs2X.Entities.Variables.Variable.GetIntValue">
            <summary>
            Retrieves the value of an integer variable.
            </summary>
            
            <returns>The variable value as an integer.</returns>
        </member>
        <member name="M:Sfs2X.Entities.Variables.Variable.GetDoubleValue">
            <summary>
            Retrieves the value of a double precision variable.
            </summary>
            
            <returns>The variable value as a double.</returns>
        </member>
        <member name="M:Sfs2X.Entities.Variables.Variable.GetStringValue">
            <summary>
            Retrieves the value of a string variable.
            </summary>
            
            <returns>The variable value as a string.</returns>
        </member>
        <member name="M:Sfs2X.Entities.Variables.Variable.GetSFSObjectValue">
            <summary>
            Retrieves the value of a SFSObject variable.
            </summary>
            
            <returns>The variable value as an object implementing the <see cref="T:Sfs2X.Entities.Data.ISFSObject"/> interface.</returns>
            
            <seealso cref="T:Sfs2X.Entities.Data.SFSObject"/>
        </member>
        <member name="M:Sfs2X.Entities.Variables.Variable.GetSFSArrayValue">
            <summary>
            Retrieves the value of a SFSArray variable.
            </summary>
            
            <returns>The variable value as an object implementing the <see cref="T:Sfs2X.Entities.Data.ISFSArray"/> interface.</returns>
            
            <seealso cref="T:Sfs2X.Entities.Data.SFSArray"/>
        </member>
        <member name="M:Sfs2X.Entities.Variables.Variable.IsNull">
            <summary>
            Indicates if the variable is <c>null</c>.
            </summary>
            
            <returns><c>true</c> if the variable has a <c>null</c> value.</returns>
        </member>
        <member name="M:Sfs2X.Entities.Variables.Variable.ToSFSArray">
            <exclude/>
        </member>
        <member name="T:Sfs2X.Entities.Variables.BaseVariable">
            <summary>
            The BaseVariable object is the base class for all SmartFoxServer Variable entities on the client.
            </summary>
            
            <seealso cref="T:Sfs2X.Entities.Variables.SFSUserVariable"/>
            <seealso cref="T:Sfs2X.Entities.Variables.SFSRoomVariable"/>
            <seealso cref="T:Sfs2X.Entities.Variables.SFSBuddyVariable"/>
            <seealso cref="T:Sfs2X.Entities.Variables.MMOItemVariable"/>
        </member>
        <member name="F:Sfs2X.Entities.Variables.BaseVariable.name">
            <exclude/>
        </member>
        <member name="F:Sfs2X.Entities.Variables.BaseVariable.type">
            <exclude/>
        </member>
        <member name="F:Sfs2X.Entities.Variables.BaseVariable.val">
            <exclude/>
        </member>
        <member name="M:Sfs2X.Entities.Variables.BaseVariable.#ctor(System.String,System.Object,System.Int32)">
            <summary>
            Creates a new BaseVariable instance.
            </summary>
            
            <param name="name">The name of the Variable.</param>
            <param name="val">The value of the Variable.</param>
            <param name="type">The type of the Variable among those available in the <see cref="T:Sfs2X.Entities.Variables.VariableType"/> class. Usually it is not necessary to pass this parameter, as the type is auto-detected from the value.</param>
            
            <exclude/>
        </member>
        <member name="M:Sfs2X.Entities.Variables.BaseVariable.#ctor(System.String,System.Object)">
            <summary>
            See <see cref="M:Sfs2X.Entities.Variables.BaseVariable.#ctor(System.String,System.Object,System.Int32)"/>.
            </summary>
            
            <exclude/>
        </member>
        <member name="P:Sfs2X.Entities.Variables.BaseVariable.Name">
            <inheritdoc />
        </member>
        <member name="P:Sfs2X.Entities.Variables.BaseVariable.Type">
            <inheritdoc />
        </member>
        <member name="P:Sfs2X.Entities.Variables.BaseVariable.Value">
            <inheritdoc />
        </member>
        <member name="M:Sfs2X.Entities.Variables.BaseVariable.GetBoolValue">
            <inheritdoc />
        </member>
        <member name="M:Sfs2X.Entities.Variables.BaseVariable.GetIntValue">
            <inheritdoc />
        </member>
        <member name="M:Sfs2X.Entities.Variables.BaseVariable.GetDoubleValue">
            <inheritdoc />
        </member>
        <member name="M:Sfs2X.Entities.Variables.BaseVariable.GetStringValue">
            <inheritdoc />
        </member>
        <member name="M:Sfs2X.Entities.Variables.BaseVariable.GetSFSObjectValue">
            <inheritdoc />
        </member>
        <member name="M:Sfs2X.Entities.Variables.BaseVariable.GetSFSArrayValue">
            <inheritdoc />
        </member>
        <member name="M:Sfs2X.Entities.Variables.BaseVariable.IsNull">
            <inheritdoc />
        </member>
        <member name="M:Sfs2X.Entities.Variables.BaseVariable.ToSFSArray">
            <exclude/>
        </member>
        <member name="T:Sfs2X.Logging.LogLevel">
            <summary>
            The LogLevel enumeration contains the costants describing the importance levels of logged messages.
            </summary>
            
            <seealso cref="M:Sfs2X.SmartFox.AddLogListener(Sfs2X.Logging.LogLevel,Sfs2X.Core.EventListenerDelegate)"/>
        </member>
        <member name="F:Sfs2X.Logging.LogLevel.DEBUG">
            <summary>
            A DEBUG message is a fine-grained information on the client activity.
            </summary>
        </member>
        <member name="F:Sfs2X.Logging.LogLevel.INFO">
            <summary>
            An INFO message contains informations on the standard client activities.
            </summary>
        </member>
        <member name="F:Sfs2X.Logging.LogLevel.WARN">
            <summary>
            A WARN message is a warning caused by an unexpected behavior of the client.
            </summary>
            
            <remarks>
            Client operations are not compromised when a warning is raised.
            </remarks>
        </member>
        <member name="F:Sfs2X.Logging.LogLevel.ERROR">
            <summary>
            An ERROR message contains informations on a problem that occurred during the client activities.
            </summary>
            
            <remarks>
            Client operations might be compromised when an error is raised.
            </remarks>
        </member>
        <member name="T:Sfs2X.Logging.Logger">
            <summary>
            The internal logger used by the SmartFoxServer 2X client API.
            </summary>
            
            <remarks>
            You can get a reference to the Logger by means of the <see cref="P:Sfs2X.SmartFox.Logger">SmartFox.Logger</see> property.
            Accessing the logger can be useful to control the client-side logging level, enable or disable the output towards the console and enable or disable the events dispatching.
            When logger events are enabled, you can add your own listners to this class, in order to have a lower access to logged messages (for example you could display them in a dedicated panel in the application interface).
            </remarks>
            
            <seealso cref="T:Sfs2X.Logging.LoggerEvent"/>
            <seealso cref="P:Sfs2X.SmartFox.Logger"/>
        </member>
        <member name="M:Sfs2X.Logging.Logger.#ctor(Sfs2X.SmartFox)">
            <exclude/>
        </member>
        <member name="P:Sfs2X.Logging.Logger.EnableConsoleTrace">
            <summary>
            Indicates whether or not the output of logged messages to the console is enabled.
            </summary>
            
            <remarks>
            If <c>true</c>, logged messages are displayed using the <c>Console.WriteLine()</c> method (or <c>System.Diagnostics.Debug.WriteLine</c> under Universal Windows Platform).
            </remarks>
        </member>
        <member name="P:Sfs2X.Logging.Logger.EnableEventDispatching">
            <summary>
            Indicates whether dispatching of log events is enabled or not.
            </summary>
            
            <seealso cref="T:Sfs2X.Logging.LoggerEvent"/>
        </member>
        <member name="P:Sfs2X.Logging.Logger.LoggingLevel">
            <summary>
            Determines the current logging level.
            </summary>
            
            <remarks>
            Messages with a level lower than this value are not logged. The available log levels are contained in the <see cref="T:Sfs2X.Logging.LogLevel"/> class.
            </remarks>
            
            <seealso cref="T:Sfs2X.Logging.LogLevel"/>
        </member>
        <member name="M:Sfs2X.Logging.Logger.Debug(System.String[])">
            <exclude/>
        </member>
        <member name="M:Sfs2X.Logging.Logger.Info(System.String[])">
            <exclude/>
        </member>
        <member name="M:Sfs2X.Logging.Logger.Warn(System.String[])">
            <exclude/>
        </member>
        <member name="M:Sfs2X.Logging.Logger.Error(System.String[])">
            <exclude/>
        </member>
        <member name="M:Sfs2X.Logging.Logger.AddEventListener(Sfs2X.Logging.LogLevel,Sfs2X.Core.EventListenerDelegate)">
            <summary>
            Registers a delegate method for log messages callbacks.
            </summary>
            
            <remarks>
            Calling this method is just like calling the <see cref="M:Sfs2X.SmartFox.AddLogListener(Sfs2X.Logging.LogLevel,Sfs2X.Core.EventListenerDelegate)">SmartFox.AddLogListener</see> method. 
            </remarks>
            
            <param name="level">The level of the log events to register a listener for.</param>
            <param name="listener">The event listener to register.</param>
            
            <example>
            <code>
            void SomeMethod() {
            	sfs.logger.EnableEventDispatching = true;
            	sfs.Logger.AddEventListener(LogLevel.INFO, OnInfoLogMessage);
            	sfs.Logger.AddEventListener(LogLevel.WARN, OnWarnLogMessage);
            }
            
            void OnInfoLogMessage(BaseEvent evt) {
            	string message = (string)evt.Params["message"];
            	Console.WriteLine("[SFS2X INFO] " + message);                           // .Net / Unity
            	System.Diagnostics.Debug.WriteLine("[SFS2X INFO] " + message);          // UWP
            }
            
            void OnWarnLogMessage(BaseEvent evt) {
            	string message = (string)evt.Params["message"];
            	Console.WriteLine("[SFS2X WARN] " + message);                           // .Net / Unity
            	System.Diagnostics.Debug.WriteLine("[SFS2X WARN] " + message);          // UWP
            }
            </code>
            </example>
            
            <seealso cref="M:Sfs2X.SmartFox.AddLogListener(Sfs2X.Logging.LogLevel,Sfs2X.Core.EventListenerDelegate)"/>
        </member>
        <member name="M:Sfs2X.Logging.Logger.RemoveEventListener(Sfs2X.Logging.LogLevel,Sfs2X.Core.EventListenerDelegate)">
            <summary>
            Removes a delegate method for log messages callbacks.
            </summary>
            
            <remarks>
            Calling this method is just like calling the <see cref="M:Sfs2X.SmartFox.RemoveLogListener(Sfs2X.Logging.LogLevel,Sfs2X.Core.EventListenerDelegate)">Sfs2X.SmartFox.RemoveLogListener</see> method. 
            </remarks>
            
            <param name="logLevel">The level of the log events to remove the listener for.</param>
            <param name="listener">The event listener to remove.</param>
            
            <seealso cref="M:Sfs2X.SmartFox.RemoveLogListener(Sfs2X.Logging.LogLevel,Sfs2X.Core.EventListenerDelegate)"/>
        </member>
        <member name="T:Sfs2X.Logging.LoggerEvent">
            <summary>
            LoggerEvent is the class representing all the events dispatched by the SmartFoxServer 2X C# API internal logger.
            </summary>
        </member>
        <member name="M:Sfs2X.Logging.LoggerEvent.#ctor(Sfs2X.Logging.LogLevel,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <exclude/>
        </member>
        <member name="M:Sfs2X.Logging.LoggerEvent.LogEventType(Sfs2X.Logging.LogLevel)">
            <exclude/>
        </member>
        <member name="M:Sfs2X.Logging.LoggerEvent.ToString">
            <exclude/>
        </member>
        <member name="M:Sfs2X.Logging.LoggerEvent.Clone">
            <exclude/>
        </member>
        <member name="P:Sfs2X.Protocol.Serialization.DefaultSFSDataSerializer.RunningAssembly">
            <summary>
            Set this to specify the assembly you want to use when serializing/deserializing the .NET classes
            If null (default) - will look for the Type in the current assembly.
            </summary>
        </member>
        <member name="T:Sfs2X.Requests.AdminMessageRequest">
            <summary>
            Sends an administrator message to a specific user or a group of users.
            </summary>
            
            <remarks>
            The current user must have administration privileges to be able to send the message (see the <see cref="P:Sfs2X.Entities.User.PrivilegeId">User.PrivilegeId</see> property).
            <para/>
            The <em>recipientMode</em> parameter in the class constructor is used to determine the message recipients: a single user or all the users in a Room,
            a Group or the entire Zone. Upon message delivery, the clients of the recipient users dispatch the <see cref="F:Sfs2X.Core.SFSEvent.ADMIN_MESSAGE"/> event.
            </remarks>
            
            <example>
            The following example sends an administration message to all the users in the Zone; it also shows how to handle the related event:
            <code>
            void SomeMethod() {
            	sfs.AddEventListener(SFSEvent.ADMIN_MESSAGE, OnAdminMessage);
            	
            	// Set the message recipients: all users in the Zone
            	MessageRecipientMode recipMode = new MessageRecipientMode(MessageRecipientMode.TO_ZONE, null);
            	
            	// Send the administrator message
            	sfs.Send( new AdminMessageRequest("Hello to everybody from the Administrator!", recipMode) );
            }
            
            void OnAdminMessage(BaseEvent evt) {
            	Console.WriteLine("The administrator sent the following message: " + (string)evt.Params["message"]);                        // .Net / Unity
            	System.Diagnostics.Debug.WriteLine("The administrator sent the following message: " + (string)evt.Params["message"]);       // UWP
            }
            </code>
            </example>
            
            <seealso cref="T:Sfs2X.Requests.MessageRecipientMode"/>
            <seealso cref="F:Sfs2X.Core.SFSEvent.ADMIN_MESSAGE"/>
            <seealso cref="T:Sfs2X.Requests.ModeratorMessageRequest"/>
        </member>
        <member name="M:Sfs2X.Requests.AdminMessageRequest.#ctor(System.String,Sfs2X.Requests.MessageRecipientMode,Sfs2X.Entities.Data.ISFSObject)">
            <summary>
            Creates a new AdminMessageRequest instance.
            </summary>
            
            <remarks>
            The instance must be passed to the <see cref="M:Sfs2X.SmartFox.Send(Sfs2X.Requests.IRequest)">SmartFox.Send</see> method for the request to be performed.
            </remarks>
            
            <param name="message">The message of the administrator to be sent to the target user/s defined by the <em>recipientMode</em> parameter.</param>
            <param name="recipientMode">An instance of MessageRecipientMode containing the target to which the message should be delivered.</param>
            <param name="parameters">An instance of <see cref="T:Sfs2X.Entities.Data.SFSObject"/> containing custom parameters to be sent to the recipient user/s (default = <c>null</c>).</param>
        </member>
        <member name="M:Sfs2X.Requests.AdminMessageRequest.#ctor(System.String,Sfs2X.Requests.MessageRecipientMode)">
            <summary>
            See <em>AdminMessageRequest(string, MessageRecipientMode, ISFSObject)</em> constructor.
            </summary>
        </member>
        <member name="T:Sfs2X.Requests.BanMode">
            <summary>
            The BanMode enumeration contains the costants describing the possible banning modalities for a BanUserRequest.
            </summary>
            
            <seealso cref="T:Sfs2X.Requests.BanUserRequest"/>
        </member>
        <member name="F:Sfs2X.Requests.BanMode.BY_ADDRESS">
            <summary>
            User is banned by IP address.
            </summary>
        </member>
        <member name="F:Sfs2X.Requests.BanMode.BY_NAME">
            <summary>
            User is banned by name.
            </summary>
        </member>
        <member name="T:Sfs2X.Requests.BanUserRequest">
            <summary>
            Banishes a user from the server.
            </summary>
            
            <remarks>
            The current user must have administration or moderation privileges in order to be able to ban another user (see the <see cref="P:Sfs2X.Entities.User.PrivilegeId">User.PrivilegeId</see> property).
            The user can be banned by name or by IP address (see the <see cref="T:Sfs2X.Requests.BanMode"/> class). Also, the request allows sending a message to the banned user
            (to make clear the reason of the following disconnection) which is delivered by means of the <see cref="F:Sfs2X.Core.SFSEvent.MODERATOR_MESSAGE"/> event.
            <para/>
            Differently from the user being kicked (see the <see cref="T:Sfs2X.Requests.KickUserRequest"/> request), a banned user won't be able to connect to the SmartFoxServer instance
            until the banishment expires (after 24 hours for client-side banning) or an administrator removes his name/IP address from the list of banned users by means
            of the SmartFoxServer 2X Administration Tool.
            </remarks>
            
            <example>
            The following example bans the user Jack from the system:
            <code>
            User userToBan = sfs.UserManager.GetUserByName("Jack"); 
            sfs.Send( new BanUserRequest(userToBan.Id) );
            </code>
            </example>
            
            <seealso cref="F:Sfs2X.Core.SFSEvent.MODERATOR_MESSAGE"/>
            <seealso cref="T:Sfs2X.Requests.KickUserRequest"/>
            <seealso cref="T:Sfs2X.Requests.BanMode"/>
        </member>
        <member name="F:Sfs2X.Requests.BanUserRequest.KEY_USER_ID">
            <exclude/>
        </member>
        <member name="F:Sfs2X.Requests.BanUserRequest.KEY_MESSAGE">
            <exclude/>
        </member>
        <member name="F:Sfs2X.Requests.BanUserRequest.KEY_DELAY">
            <exclude/>
        </member>
        <member name="F:Sfs2X.Requests.BanUserRequest.KEY_BAN_MODE">
            <exclude/>
        </member>
        <member name="F:Sfs2X.Requests.BanUserRequest.KEY_BAN_DURATION_HOURS">
            <exclude/>
        </member>
        <member name="M:Sfs2X.Requests.BanUserRequest.#ctor(System.Int32,System.String,Sfs2X.Requests.BanMode,System.Int32,System.Int32)">
            <summary>
            Creates a new BanUserRequest instance.
            </summary>
            
            <remarks>
            The instance must be passed to the <see cref="M:Sfs2X.SmartFox.Send(Sfs2X.Requests.IRequest)">SmartFox.Send</see> method for the request to be performed.
            </remarks>
            
            <param name="userId">The id of the user to be banned.</param>
            <param name="message">A custom message to be delivered to the user before banning him; if <c>null</c>, the default message configured in the SmartFoxServer 2X Administration Tool is used (default = <c>null</c>).</param>
            <param name="banMode">One of the ban modes defined in the <see cref="T:Sfs2X.Requests.BanMode"/> class (default = <c>BanMode.BY_NAME</c>).</param>
            <param name="delaySeconds">The number of seconds after which the user is banned after receiving the ban message (default = <c>5</c>).</param>
            <param name="durationHours">The duration of the banishment, expressed in hours (default = <c>24</c>).</param>
            
            <seealso cref="T:Sfs2X.Requests.BanMode"/>
        </member>
        <member name="M:Sfs2X.Requests.BanUserRequest.#ctor(System.Int32)">
            <summary>
            See <em>BanUserRequest(int, string, BanMode, int, int)</em> constructor.
            </summary>
        </member>
        <member name="M:Sfs2X.Requests.BanUserRequest.#ctor(System.Int32,System.String)">
            <summary>
            See <em>BanUserRequest(int, string, BanMode, int, int)</em> constructor.
            </summary>
        </member>
        <member name="M:Sfs2X.Requests.BanUserRequest.#ctor(System.Int32,System.String,Sfs2X.Requests.BanMode)">
            <summary>
            See <em>BanUserRequest(int, string, BanMode, int, int)</em> constructor.
            </summary>
        </member>
        <member name="M:Sfs2X.Requests.BanUserRequest.#ctor(System.Int32,System.String,Sfs2X.Requests.BanMode,System.Int32)">
            <summary>
            See <em>BanUserRequest(int, string, BanMode, int, int)</em> constructor.
            </summary>
        </member>
        <member name="M:Sfs2X.Requests.BanUserRequest.Validate(Sfs2X.SmartFox)">
            <exclude/>
        </member>
        <member name="M:Sfs2X.Requests.BanUserRequest.Execute(Sfs2X.SmartFox)">
            <exclude/>
        </member>
        <member name="T:Sfs2X.Requests.BaseRequest">
            <exclude/>
        </member>
        <member name="F:Sfs2X.Requests.BaseRequest.KEY_ERROR_CODE">
            <exclude/>
        </member>
        <member name="F:Sfs2X.Requests.BaseRequest.KEY_ERROR_PARAMS">
            <exclude/>
        </member>
        <member name="F:Sfs2X.Requests.BaseRequest.sfso">
            <exclude/>
        </member>
        <member name="F:Sfs2X.Requests.BaseRequest.targetController">
            <exclude/>
        </member>
        <member name="M:Sfs2X.Requests.BaseRequest.#ctor(Sfs2X.Requests.RequestType)">
            <exclude/>
        </member>
        <member name="M:Sfs2X.Requests.BaseRequest.#ctor(System.Int32)">
            <exclude/>
        </member>
        <member name="M:Sfs2X.Requests.BaseRequest.Validate(Sfs2X.SmartFox)">
            <exclude/>
        </member>
        <member name="M:Sfs2X.Requests.BaseRequest.Execute(Sfs2X.SmartFox)">
            <exclude/>
        </member>
        <member name="P:Sfs2X.Requests.BaseRequest.TargetController">
            <exclude/>
        </member>
        <member name="P:Sfs2X.Requests.BaseRequest.IsEncrypted">
            <exclude/>
        </member>
        <member name="P:Sfs2X.Requests.BaseRequest.Message">
            <exclude/>
        </member>
        <member name="P:Sfs2X.Requests.BaseRequest.Id">
            <exclude/>
        </member>
        <member name="P:Sfs2X.Requests.BaseRequest.Type">
            <exclude/>
        </member>
        <member name="T:Sfs2X.Requests.ChangeRoomCapacityRequest">
            <summary>
            Changes the maximum number of users and/or spectators who can join a Room.
            </summary>
            
            <remarks>
            If the operation is successful, the <see cref="F:Sfs2X.Core.SFSEvent.ROOM_CAPACITY_CHANGE"/> event is dispatched to all the users who subscribed the Group to which the target Room belongs,
            including the requester user himself. If the user is not the creator (owner) of the Room, the <see cref="F:Sfs2X.Core.SFSEvent.ROOM_CAPACITY_CHANGE_ERROR"/> event is fired.
            An administrator or moderator can override this constrain (he is not requested to be the Room's owner).
            <para/>
            Please note that some limitations are applied to the passed values (i.e. a client can't set the max users to more than 200, or the max spectators to more than 32).<br/>
            Alos, if the Room was configured so that resizing is not allowed (see the <see cref="P:Sfs2X.Requests.RoomSettings.Permissions">RoomSettings.Permissions</see> parameter), the request is ignored and no error is fired.
            <para/>
            In case the Room's capacity is reduced to a value less than the current number of users/spectators inside the Room, exceeding users are NOT disconnected.
            </remarks>
            
            <example>
            The following example changes the capacity of an existing Room:
            <code>
            void SomeMethod() {
            	sfs.AddEventListener(SFSEvent.ROOM_CAPACITY_CHANGE, OnRoomCapacityChange);
            	sfs.AddEventListener(SFSEvent.ROOM_CAPACITY_CHANGE_ERROR, OnRoomCapacityChangeError);
            	
            	Room theRoom = sfs.GetRoomByName("Gonzo's Room");
            	
            	// Resize the Room so that it allows a maximum of 100 users and zero spectators
            	sfs.Send( new ChangeRoomCapacityRequest(theRoom, 100, 0) );
            }
            
            void OnRoomCapacityChange(BaseEvent evt) {
            	Room room = (Room)evt.Params["room"];
            	Console.WriteLine("The capacity of Room " + room.Name + " was changed successfully");                       // .Net / Unity
            	System.Diagnostics.Debug.WriteLine("The capacity of Room " + room.Name + " was changed successfully");      // UWP
            }
            
            void OnRoomCapacityChangeError(BaseEvent evt) {
            	Console.WriteLine("Room capacity change failed: " + (string)evt.Params["errorMessage"]);                        // .Net / Unity
            	System.Diagnostics.Debug.WriteLine("Room capacity change failed: " + (string)evt.Params["errorMessage"]);       // UWP
            }
            </code>
            </example>
            
            <seealso cref="F:Sfs2X.Core.SFSEvent.ROOM_CAPACITY_CHANGE"/>
            <seealso cref="F:Sfs2X.Core.SFSEvent.ROOM_CAPACITY_CHANGE_ERROR"/>
            <seealso cref="P:Sfs2X.Requests.RoomSettings.Permissions"/>
            <seealso cref="T:Sfs2X.Requests.ChangeRoomNameRequest"/>
            <seealso cref="T:Sfs2X.Requests.ChangeRoomPasswordStateRequest"/>
        </member>
        <member name="F:Sfs2X.Requests.ChangeRoomCapacityRequest.KEY_ROOM">
            <exclude/>
        </member>
        <member name="F:Sfs2X.Requests.ChangeRoomCapacityRequest.KEY_USER_SIZE">
            <exclude/>
        </member>
        <member name="F:Sfs2X.Requests.ChangeRoomCapacityRequest.KEY_SPEC_SIZE">
            <exclude/>
        </member>
        <member name="M:Sfs2X.Requests.ChangeRoomCapacityRequest.#ctor(Sfs2X.Entities.Room,System.Int32,System.Int32)">
            <summary>
            Creates a new ChangeRoomCapacityRequest instance.
            </summary>
            
            <remarks>
            The instance must be passed to the <see cref="M:Sfs2X.SmartFox.Send(Sfs2X.Requests.IRequest)">SmartFox.Send</see> method for the request to be performed.
            </remarks>
            
            <param name="room">The object corresponding to the Room whose capacity should be changed.</param>
            <param name="newMaxUsers">The new maximum number of users/players who can join the Room.</param>
            <param name="newMaxSpect">The new maximum number of spectators who can join the Room (for Game Rooms only).</param>
        </member>
        <member name="M:Sfs2X.Requests.ChangeRoomCapacityRequest.Validate(Sfs2X.SmartFox)">
            <exclude/>
        </member>
        <member name="M:Sfs2X.Requests.ChangeRoomCapacityRequest.Execute(Sfs2X.SmartFox)">
            <exclude/>
        </member>
        <member name="T:Sfs2X.Requests.ChangeRoomNameRequest">
            <summary>
            Changes the name of a Room.
            </summary>
            
            <remarks>
            If the renaming operation is successful, the <see cref="F:Sfs2X.Core.SFSEvent.ROOM_NAME_CHANGE"/> event is dispatched to all the users who subscribed the Group to which the target Room belongs,
            including the user who renamed it. If the user is not the creator (owner) of the Room, or if the new name doesn't match the related criteria in Zone configuration, the
            <see cref="F:Sfs2X.Core.SFSEvent.ROOM_NAME_CHANGE_ERROR"/> event is fired. An administrator or moderator can override this constrain (he is not requested to be the Room's owner).<br/>
            If the Room was configured so that renaming is not allowed (see the <see cref="P:Sfs2X.Requests.RoomSettings.Permissions">RoomSettings.Permissions</see> parameter), the request is ignored and no error is fired.
            </remarks>
            
            <example>
            The following example renames an existing Room:
            <code>
            void SomeMethod() {
            	sfs.AddEventListener(SFSEvent.ROOM_NAME_CHANGE, OnRoomNameChange);
            	sfs.AddEventListener(SFSEvent.ROOM_NAME_CHANGE_ERROR, OnRoomNameChangeError);
            	
            	Room theRoom = sfs.GetRoomByName("Gonzo's Room");
            	sfs.Send( new ChangeRoomNameRequest(theRoom, "Gonzo The Great's Room") );
            }
            
            void OnRoomNameChange(BaseEvent evt) {
            	Room theRoom = (Room)evt.Params["room"];
            	Console.WriteLine("Room " + (string)evt.Params["oldName"] + " was successfully renamed to " + theRoom.Name);                        // .Net / Unity
            	System.Diagnostics.Debug.WriteLine("Room " + (string)evt.Params["oldName"] + " was successfully renamed to " + theRoom.Name);       // UWP
            }
            
            void OnRoomNameChangeError(BaseEvent evt) {
            	Console.WriteLine("Room name change failed: " + (string)evt.Params["errorMessage"]);                        // .Net / Unity
            	System.Diagnostics.Debug.WriteLine("Room name change failed: " + (string)evt.Params["errorMessage"]);       // UWP
            }
            </code>
            </example>
            
            <seealso cref="F:Sfs2X.Core.SFSEvent.ROOM_NAME_CHANGE"/>
            <seealso cref="F:Sfs2X.Core.SFSEvent.ROOM_NAME_CHANGE_ERROR"/>
            <seealso cref="P:Sfs2X.Requests.RoomSettings.Permissions"/>
            <seealso cref="T:Sfs2X.Requests.ChangeRoomCapacityRequest"/>
            <seealso cref="T:Sfs2X.Requests.ChangeRoomPasswordStateRequest"/>
        </member>
        <member name="F:Sfs2X.Requests.ChangeRoomNameRequest.KEY_ROOM">
            <exclude/>
        </member>
        <member name="F:Sfs2X.Requests.ChangeRoomNameRequest.KEY_NAME">
            <exclude/>
        </member>
        <member name="M:Sfs2X.Requests.ChangeRoomNameRequest.#ctor(Sfs2X.Entities.Room,System.String)">
            <summary>
            Creates a new ChangeRoomNameRequest instance.
            </summary>
            
            <remarks>
            The instance must be passed to the <see cref="M:Sfs2X.SmartFox.Send(Sfs2X.Requests.IRequest)">SmartFox.Send</see> method for the request to be performed.
            </remarks>
            
            <param name="room">The object corresponding to the Room whose name should be changed.</param>
            <param name="newName">The new name to be assigned to the Room.</param>
        </member>
        <member name="M:Sfs2X.Requests.ChangeRoomNameRequest.Validate(Sfs2X.SmartFox)">
            <exclude/>
        </member>
        <member name="M:Sfs2X.Requests.ChangeRoomNameRequest.Execute(Sfs2X.SmartFox)">
            <exclude/>
        </member>
        <member name="T:Sfs2X.Requests.ChangeRoomPasswordStateRequest">
            <summary>
            Changes the password of a Room.
            </summary>
            
            <remarks>
            This request not only changes the password of a Room, but also its "password state", which indicates if the Room is password protected or not.
            <para/>
            If the operation is successful, the <see cref="F:Sfs2X.Core.SFSEvent.ROOM_PASSWORD_STATE_CHANGE"/> event is dispatched to all the users who subscribed the Group
            to which the target Room belongs, including the requester user himself. If the user is not the creator (owner) of the Room, the <see cref="F:Sfs2X.Core.SFSEvent.ROOM_PASSWORD_STATE_CHANGE_ERROR"/> event is fired.
            An administrator or moderator can override this constrain (he is not requested to be the Room's owner).<br/>
            If the Room was configured so that password change is not allowed (see the <see cref="P:Sfs2X.Requests.RoomSettings.Permissions">RoomSettings.Permissions</see> parameter), the request is ignored and no error is fired.
            </remarks>
            
            <example>
            The following example changes the password of an existing Room:
            <code>
            void SomeMethod() {
            	sfs.AddEventListener(SFSEvent.ROOM_PASSWORD_STATE_CHANGE, OnRoomPasswordStateChange);
            	sfs.AddEventListener(SFSEvent.ROOM_PASSWORD_STATE_CHANGE_ERROR, OnRoomPasswordStateChangeError);
            	
            	Room theRoom = sfs.GetRoomByName("Gonzo's Room");
            	sfs.Send( new ChangeRoomPasswordStateRequest(theRoom, "mammamia") );
            }
            
            void OnRoomPasswordStateChange(BaseEvent evt) {
            	Room theRoom = (Room)evt.Params["room"];
            	Console.WriteLine("The password of Room " + theRoom.Name + " was changed successfully");                        // .Net / Unity
            	System.Diagnostics.Debug.WriteLine("The password of Room " + theRoom.Name + " was changed successfully");       // UWP
            }
            
            void OnRoomPasswordStateChangeError(BaseEvent evt) {
            	Console.WriteLine("Room password change failed: " + (string)evt.Params["errorMessage"]);                        // .Net / Unity
            	System.Diagnostics.Debug.WriteLine("Room password change failed: " + (string)evt.Params["errorMessage"]);       // UWP
            }
            </code>
            </example>
            
            <seealso cref="F:Sfs2X.Core.SFSEvent.ROOM_PASSWORD_STATE_CHANGE"/>
            <seealso cref="F:Sfs2X.Core.SFSEvent.ROOM_PASSWORD_STATE_CHANGE_ERROR"/>
            <seealso cref="P:Sfs2X.Requests.RoomSettings.Permissions"/>
            <seealso cref="T:Sfs2X.Requests.ChangeRoomNameRequest"/>
            <seealso cref="T:Sfs2X.Requests.ChangeRoomPasswordStateRequest"/>
        </member>
        <member name="F:Sfs2X.Requests.ChangeRoomPasswordStateRequest.KEY_ROOM">
            <exclude/>
        </member>
        <member name="F:Sfs2X.Requests.ChangeRoomPasswordStateRequest.KEY_PASS">
            <exclude/>
        </member>
        <member name="M:Sfs2X.Requests.ChangeRoomPasswordStateRequest.#ctor(Sfs2X.Entities.Room,System.String)">
            <summary>
            Creates a new ChangeRoomPasswordStateRequest instance.
            </summary>
            
            <remarks>
            The instance must be passed to the <see cref="M:Sfs2X.SmartFox.Send(Sfs2X.Requests.IRequest)">SmartFox.Send</see> method for the request to be performed.
            </remarks>
            
            <param name="room">The object corresponding to the Room whose password should be changed.</param>
            <param name="newPass">The new password to be assigned to the Room; an empty string or a <c>null</c> value can be passed to remove the Room's password.</param>
        </member>
        <member name="M:Sfs2X.Requests.ChangeRoomPasswordStateRequest.Validate(Sfs2X.SmartFox)">
            <exclude/>
        </member>
        <member name="M:Sfs2X.Requests.ChangeRoomPasswordStateRequest.Execute(Sfs2X.SmartFox)">
            <exclude/>
        </member>
        <member name="T:Sfs2X.Requests.CreateRoomRequest">
            <summary>
            Creates a new Room in the current Zone.
            </summary>
            
            <remarks>
            If the creation is successful, a <see cref="F:Sfs2X.Core.SFSEvent.ROOM_ADD"/> event is dispatched to all the users who subscribed the Group to which the Room is associated,
            including the Room creator. Otherwise, a <see cref="F:Sfs2X.Core.SFSEvent.ROOM_CREATION_ERROR"/> event is returned to the creator's client.
            </remarks>
            
            <example>
            The following example creates a new chat room:
            <code>
            void SomeMethod() {
            	sfs.AddEventListener(SFSEvent.ROOM_ADDED, OnRoomAdded);
            	sfs.AddEventListener(SFSEvent.ROOM_CREATION_ERROR, OnRoomCreationError);
            	
            	// Create a new Chat Room
            	RoomSettings settings = new RoomSettings("My Chat Room");
            	settings.MaxUsers = 40;
            	settings.GroupId = "chats";
            	
            	sfs.Send( new CreateRoomRequest(settings) );
            }
            
            void OnRoomAdded(BaseEvent evt) {
            	Console.WriteLine("Room created: " + (Room)evt.Params["room"]);                         // .Net / Unity
            	System.Diagnostics.Debug.WriteLine("Room created: " + (Room)evt.Params["room"]);        // UWP
            }
            
            void OnRoomCreationError(BaseEvent evt) {
            	Console.WriteLine("Room creation failed: " + (string)evt.Params["errorMessage"]);                       // .Net / Unity
            	System.Diagnostics.Debug.WriteLine("Room creation failed: " + (string)evt.Params["errorMessage"]);      // UWP
            }
            </code>
            </example>
            
            <seealso cref="F:Sfs2X.Core.SFSEvent.ROOM_ADD"/>
            <seealso cref="F:Sfs2X.Core.SFSEvent.ROOM_CREATION_ERROR"/>
        </member>
        <member name="F:Sfs2X.Requests.CreateRoomRequest.KEY_ROOM">
            <exclude/>
        </member>
        <member name="F:Sfs2X.Requests.CreateRoomRequest.KEY_NAME">
            <exclude/>
        </member>
        <member name="F:Sfs2X.Requests.CreateRoomRequest.KEY_PASSWORD">
            <exclude/>
        </member>
        <member name="F:Sfs2X.Requests.CreateRoomRequest.KEY_GROUP_ID">
            <exclude/>
        </member>
        <member name="F:Sfs2X.Requests.CreateRoomRequest.KEY_ISGAME">
            <exclude/>
        </member>
        <member name="F:Sfs2X.Requests.CreateRoomRequest.KEY_MAXUSERS">
            <exclude/>
        </member>
        <member name="F:Sfs2X.Requests.CreateRoomRequest.KEY_MAXSPECTATORS">
            <exclude/>
        </member>
        <member name="F:Sfs2X.Requests.CreateRoomRequest.KEY_MAXVARS">
            <exclude/>
        </member>
        <member name="F:Sfs2X.Requests.CreateRoomRequest.KEY_ROOMVARS">
            <exclude/>
        </member>
        <member name="F:Sfs2X.Requests.CreateRoomRequest.KEY_PERMISSIONS">
            <exclude/>
        </member>
        <member name="F:Sfs2X.Requests.CreateRoomRequest.KEY_EVENTS">
            <exclude/>
        </member>
        <member name="F:Sfs2X.Requests.CreateRoomRequest.KEY_EXTID">
            <exclude/>
        </member>
        <member name="F:Sfs2X.Requests.CreateRoomRequest.KEY_EXTCLASS">
            <exclude/>
        </member>
        <member name="F:Sfs2X.Requests.CreateRoomRequest.KEY_EXTPROP">
            <exclude/>
        </member>
        <member name="F:Sfs2X.Requests.CreateRoomRequest.KEY_AUTOJOIN">
            <exclude/>
        </member>
        <member name="F:Sfs2X.Requests.CreateRoomRequest.KEY_ROOM_TO_LEAVE">
            <exclude/>
        </member>
        <member name="F:Sfs2X.Requests.CreateRoomRequest.KEY_ALLOW_JOIN_INVITATION_BY_OWNER">
            <exclude/>
        </member>
        <member name="F:Sfs2X.Requests.CreateRoomRequest.KEY_MMO_DEFAULT_AOI">
            <exclude/>
        </member>
        <member name="F:Sfs2X.Requests.CreateRoomRequest.KEY_MMO_MAP_LOW_LIMIT">
            <exclude/>
        </member>
        <member name="F:Sfs2X.Requests.CreateRoomRequest.KEY_MMO_MAP_HIGH_LIMIT">
            <exclude/>
        </member>
        <member name="F:Sfs2X.Requests.CreateRoomRequest.KEY_MMO_USER_MAX_LIMBO_SECONDS">
            <exclude/>
        </member>
        <member name="F:Sfs2X.Requests.CreateRoomRequest.KEY_MMO_PROXIMITY_UPDATE_MILLIS">
            <exclude/>
        </member>
        <member name="F:Sfs2X.Requests.CreateRoomRequest.KEY_MMO_SEND_ENTRY_POINT">
            <exclude/>
        </member>
        <member name="M:Sfs2X.Requests.CreateRoomRequest.#ctor(Sfs2X.Requests.RoomSettings,System.Boolean,Sfs2X.Entities.Room)">
            <summary>
            Creates a new CreateRoomRequest instance.
            </summary>
            
            <remarks>
            The instance must be passed to the <see cref="M:Sfs2X.SmartFox.Send(Sfs2X.Requests.IRequest)">SmartFox.Send</see> method for the request to be performed.
            </remarks>
            
            <param name="settings">An object containing the Room configuration settings.</param>
            <param name="autoJoin">If <c>true</c>, the Room is joined as soon as it is created (default = <c>false</c>).</param>
            <param name="roomToLeave">An object representing the Room that should be left if the new Room is auto-joined (default = <c>null</c>).</param>
            
            <seealso cref="T:Sfs2X.Requests.RoomSettings"/>
            <seealso cref="T:Sfs2X.Requests.Game.SFSGameSettings"/>
            <seealso cref="T:Sfs2X.Requests.MMO.MMORoomSettings"/>
        </member>
        <member name="M:Sfs2X.Requests.CreateRoomRequest.#ctor(Sfs2X.Requests.RoomSettings,System.Boolean)">
            <summary>
            See <em>CreateRoomRequest(RoomSettings, bool, Room)</em> constructor.
            </summary>
        </member>
        <member name="M:Sfs2X.Requests.CreateRoomRequest.#ctor(Sfs2X.Requests.RoomSettings)">
            <summary>
            See <em>CreateRoomRequest(RoomSettings, bool, Room)</em> constructor.
            </summary>
        </member>
        <member name="M:Sfs2X.Requests.CreateRoomRequest.Validate(Sfs2X.SmartFox)">
            <exclude/>
        </member>
        <member name="M:Sfs2X.Requests.CreateRoomRequest.Execute(Sfs2X.SmartFox)">
            <exclude/>
        </member>
        <member name="T:Sfs2X.Requests.ExtensionRequest">
            <summary>
            Sends a command to the server-side Extension attached to the Zone or to a Room.
            </summary>
            
            <remarks>
            This request is used to send custom commands from the client to a server-side Extension, be it a Zone-level or Room-level Extension.
            Viceversa, the <see cref="F:Sfs2X.Core.SFSEvent.EXTENSION_RESPONSE"/> event is used by the server to send Extension commands/responses to the client.
            <para/>
            Read the SmartFoxServer 2X documentation about server-side Extension for more informations.
            <para/>
            The <em>ExtensionRequest</em> request can be sent using the UDP protocol too: this allows sending fast stream of packets to the server in real-time type games,
            typically for position/transformation updates, etc.
            </remarks>
            
            <example>
            The following example sends a command to the Zone Extension; it also handles responses coming from the Extension by implementing the <see cref="F:Sfs2X.Core.SFSEvent.EXTENSION_RESPONSE"/> event listener (the same command name is used in both the request and the response):
            <code>
            void SomeMethod() {
            	sfs.addEventListener(SFSEvent.EXTENSION_RESPONSE, OnExtensionResponse);
            	
            	// Send two integers to the Zone extension and get their sum in return
            	ISFSObject params = SFSObject.NewInstance();
            	params.PutInt("n1", 26);
            	params.PutInt("n2", 16);
            	
            	sfs.Send( new ExtensionRequest("add", params) );
            }
            
            void OnExtensionResponse(BaseEvent evt) {
            	String cmd = (String)evt.Params["cmd"];
            	if (cmd == "add") {
            		ISFSObject responseParams = (SFSObject)evt.Params["params"];
            		
            		// We expect an int parameter called "sum"
            		Console.WriteLine("The sum is: " + responseParams.GetInt("sum"));                       // .Net / Unity
            	    System.Diagnostics.Debug.WriteLine("The sum is: " + responseParams.GetInt("sum"));      // UWP
            	}
            }
            </code>
            </example>
            
            <seealso cref="F:Sfs2X.Core.SFSEvent.EXTENSION_RESPONSE"/>
        </member>
        <member name="F:Sfs2X.Requests.ExtensionRequest.KEY_CMD">
            <exclude/>
        </member>
        <member name="F:Sfs2X.Requests.ExtensionRequest.KEY_PARAMS">
            <exclude/>
        </member>
        <member name="F:Sfs2X.Requests.ExtensionRequest.KEY_ROOM">
            <exclude/>
        </member>
        <member name="M:Sfs2X.Requests.ExtensionRequest.#ctor(System.String,Sfs2X.Entities.Data.ISFSObject,Sfs2X.Entities.Room,System.Boolean)">
            <summary>
            Creates a new ExtensionRequest instance.
            </summary>
            
            <remarks>
            The instance must be passed to the <see cref="M:Sfs2X.SmartFox.Send(Sfs2X.Requests.IRequest)">SmartFox.Send</see> method for the request to be performed.
            </remarks>
            
            <param name="extCmd">The name of the command which identifies an action that should be executed by the server-side Extension.</param>
            <param name="parameters">An instance of <see cref="T:Sfs2X.Entities.Data.SFSObject"/> containing custom data to be sent to the Extension (default = <c>null</c>). Can be <c>null</c> if no data needs to be sent.</param>
            <param name="room">If <c>null</c>, the specified command is sent to the current Zone server-side Extension; if not <c>null</c>, the command is sent to the server-side Extension attached to the passed Room (default = <c>null</c>).</param>
            <param name="useUDP">If true, the UDP protocol is used to send the request to the server (default = <c>false</c>).</param>
        </member>
        <member name="M:Sfs2X.Requests.ExtensionRequest.#ctor(System.String,Sfs2X.Entities.Data.ISFSObject,Sfs2X.Entities.Room)">
            <summary>
            See <em>ExtensionRequest(string, ISFSObject, Room, bool)</em> constructor.
            </summary>
        </member>
        <member name="M:Sfs2X.Requests.ExtensionRequest.#ctor(System.String,Sfs2X.Entities.Data.ISFSObject)">
            <summary>
            See <em>ExtensionRequest(string, ISFSObject, Room, bool)</em> constructor.
            </summary>
        </member>
        <member name="P:Sfs2X.Requests.ExtensionRequest.UseUDP">
            <exclude/>
        </member>
        <member name="M:Sfs2X.Requests.ExtensionRequest.Validate(Sfs2X.SmartFox)">
            <exclude/>
        </member>
        <member name="M:Sfs2X.Requests.ExtensionRequest.Execute(Sfs2X.SmartFox)">
            <exclude/>
        </member>
        <member name="T:Sfs2X.Requests.FindRoomsRequest">
            <summary>
            Retrieves a list of Rooms from the server which match the specified criteria.
            </summary>
            
            <remarks>
            By providing a matching expression and a search scope (a Group or the entire Zone), SmartFoxServer can find those Rooms matching the passed criteria
            and return them by means of the <see cref="F:Sfs2X.Core.SFSEvent.ROOM_FIND_RESULT"/> event.
            </remarks>
            
            <example>
            The following example looks for all the server Rooms whose "country" Room Variable is set to Sweden:
            <code>
            void SomeMethod() {
            	sfs.AddEventListener(SFSEvent.ROOM_FIND_RESULT, OnRoomFindResult);
            	
            	// Create a matching expression to find Rooms with a "country" variable equal to "Sweden"
            	MatchExpression expr = new MatchExpression('country', StringMatch.EQUALS, 'Sweden');
            	
            	// Find the Rooms
            	sfs.Send( new FindRoomRequest(expr) );
            }
            
            void OnRoomFindResult(BaseEvent evt) {
            	Console.WriteLine("Rooms found: " + (List&lt;Room&gt;)evt.Params["rooms"]);                         // .Net / Unity
            	System.Diagnostics.Debug.WriteLine("Rooms found: " + (List&lt;Room&gt;)evt.Params["rooms"]);        // UWP
            }
            </code>
            </example>
            
            <seealso cref="F:Sfs2X.Core.SFSEvent.ROOM_FIND_RESULT"/>
            <seealso cref="T:Sfs2X.Entities.Match.MatchExpression"/>
        </member>
        <member name="F:Sfs2X.Requests.FindRoomsRequest.KEY_EXPRESSION">
            <exclude/>
        </member>
        <member name="F:Sfs2X.Requests.FindRoomsRequest.KEY_GROUP">
            <exclude/>
        </member>
        <member name="F:Sfs2X.Requests.FindRoomsRequest.KEY_LIMIT">
            <exclude/>
        </member>
        <member name="F:Sfs2X.Requests.FindRoomsRequest.KEY_FILTERED_ROOMS">
            <exclude/>
        </member>
        <member name="M:Sfs2X.Requests.FindRoomsRequest.#ctor(Sfs2X.Entities.Match.MatchExpression,System.String,System.Int32)">
            <summary>
            Creates a new FindRoomsRequest instance.
            </summary>
            
            <remarks>
            The instance must be passed to the <see cref="M:Sfs2X.SmartFox.Send(Sfs2X.Requests.IRequest)">SmartFox.Send</see> method for the request to be performed.
            </remarks>
            
            <param name="expr">A matching expression that the system will use to retrieve the Rooms.</param>
            <param name="groupId">The name of the Group where to search for matching Rooms; if <c>null</c>, the search is performed in the whole Zone (default = <c>null</c>).</param>
            <param name="limit">The maximum size of the list of Rooms that will be returned by the roomFindResult event. If <c>0</c>, all the found Rooms are returned (default = <c>0</c>).</param>
        </member>
        <member name="M:Sfs2X.Requests.FindRoomsRequest.#ctor(Sfs2X.Entities.Match.MatchExpression)">
            <summary>
            See <em>FindRoomsRequest(MatchExpression, string, int)</em> constructor.
            </summary>
        </member>
        <member name="M:Sfs2X.Requests.FindRoomsRequest.#ctor(Sfs2X.Entities.Match.MatchExpression,System.String)">
            <summary>
            See <em>FindRoomsRequest(MatchExpression, string, int)</em> constructor.
            </summary>
        </member>
        <member name="M:Sfs2X.Requests.FindRoomsRequest.Validate(Sfs2X.SmartFox)">
            <exclude/>
        </member>
        <member name="M:Sfs2X.Requests.FindRoomsRequest.Execute(Sfs2X.SmartFox)">
            <exclude/>
        </member>
        <member name="T:Sfs2X.Requests.FindUsersRequest">
            <summary>
            Retrieves a list of users from the server which match the specified criteria.
            </summary>
            
            <remarks>
            By providing a matching expression and a search scope (a Room, a Group or the entire Zone), SmartFoxServer can find
            those users matching the passed criteria and return them by means of the <see cref="F:Sfs2X.Core.SFSEvent.USER_FIND_RESULT"/> event.
            </remarks>
            
            <example>
            The following example looks for all the users whose "age" User Variable is greater than 29:
            <code>
            void SomeMethod() {
            	sfs.AddEventListener(SFSEvent.USER_FIND_RESULT, OnUserFindResult);
            	
            	// Create a matching expression to find users with an "age" variable greater than 29:
            	MatchExpression expr = new MatchExpression("age", NumberMatch.GREATER_THAN, 29);
            	
            	// Find the users
            	sfs.Send( new FindUsersRequest(expr) );
            }
            
            void OnUserFindResult(BaseEvent evt) {
            	Console.WriteLine("Users found: " + (List&lt;User&gt;)evt.Params["users"]);                         // .Net / Unity
            	System.Diagnostics.Debug.WriteLine("Users found: " + (List&lt;User&gt;)evt.Params["users"]);        // UWP
            }
            </code>
            </example>
            
            <seealso cref="F:Sfs2X.Core.SFSEvent.USER_FIND_RESULT"/>
            <seealso cref="T:Sfs2X.Entities.Match.MatchExpression"/>
        </member>
        <member name="F:Sfs2X.Requests.FindUsersRequest.KEY_EXPRESSION">
            <exclude/>
        </member>
        <member name="F:Sfs2X.Requests.FindUsersRequest.KEY_GROUP">
            <exclude/>
        </member>
        <member name="F:Sfs2X.Requests.FindUsersRequest.KEY_ROOM">
            <exclude/>
        </member>
        <member name="F:Sfs2X.Requests.FindUsersRequest.KEY_LIMIT">
            <exclude/>
        </member>
        <member name="F:Sfs2X.Requests.FindUsersRequest.KEY_FILTERED_USERS">
            <exclude/>
        </member>
        <member name="M:Sfs2X.Requests.FindUsersRequest.#ctor(Sfs2X.Entities.Match.MatchExpression,System.String,System.Int32)">
            <summary>
            Creates a new FindUsersRequest instance.
            </summary>
            
            <remarks>
            The instance must be passed to the <see cref="M:Sfs2X.SmartFox.Send(Sfs2X.Requests.IRequest)">SmartFox.Send</see> method for the request to be performed.
            </remarks>
            
            <param name="expr">A matching expression that the system will use to retrieve the users.</param>
            <param name="target">The name of a Group or a single Room object where to search for matching users; if <c>null</c>, the search is performed in the whole Zone (default = <c>null</c>).</param>
            <param name="limit">The maximum size of the list of users that will be returned by the userFindResult event. If <c>0</c>, all the found users are returned (default = <c>0</c>).</param>
        </member>
        <member name="M:Sfs2X.Requests.FindUsersRequest.#ctor(Sfs2X.Entities.Match.MatchExpression)">
            <summary>
            See <em>FindUsersRequest(MatchExpression, string, int)</em> constructor.
            </summary>
        </member>
        <member name="M:Sfs2X.Requests.FindUsersRequest.#ctor(Sfs2X.Entities.Match.MatchExpression,Sfs2X.Entities.Room)">
            <summary>
            See <em>FindUsersRequest(MatchExpression, string, int)</em> constructor.
            </summary>
        </member>
        <member name="M:Sfs2X.Requests.FindUsersRequest.#ctor(Sfs2X.Entities.Match.MatchExpression,Sfs2X.Entities.Room,System.Int32)">
            <summary>
            See <em>FindUsersRequest(MatchExpression, string, int)</em> constructor.
            </summary>
        </member>
        <member name="M:Sfs2X.Requests.FindUsersRequest.#ctor(Sfs2X.Entities.Match.MatchExpression,System.String)">
            <summary>
            See <em>FindUsersRequest(MatchExpression, string, int)</em> constructor.
            </summary>
        </member>
        <member name="M:Sfs2X.Requests.FindUsersRequest.Validate(Sfs2X.SmartFox)">
            <exclude/>
        </member>
        <member name="M:Sfs2X.Requests.FindUsersRequest.Execute(Sfs2X.SmartFox)">
            <exclude/>
        </member>
        <member name="T:Sfs2X.Requests.GenericMessageRequest">
            <exclude/>
        </member>
        <member name="F:Sfs2X.Requests.GenericMessageRequest.KEY_ROOM_ID">
            <exclude/>
        </member>
        <member name="F:Sfs2X.Requests.GenericMessageRequest.KEY_USER_ID">
            <exclude/>
        </member>
        <member name="F:Sfs2X.Requests.GenericMessageRequest.KEY_MESSAGE">
            <exclude/>
        </member>
        <member name="F:Sfs2X.Requests.GenericMessageRequest.KEY_MESSAGE_TYPE">
            <exclude/>
        </member>
        <member name="F:Sfs2X.Requests.GenericMessageRequest.KEY_RECIPIENT">
            <exclude/>
        </member>
        <member name="F:Sfs2X.Requests.GenericMessageRequest.KEY_RECIPIENT_MODE">
            <exclude/>
        </member>
        <member name="F:Sfs2X.Requests.GenericMessageRequest.KEY_XTRA_PARAMS">
            <exclude/>
        </member>
        <member name="F:Sfs2X.Requests.GenericMessageRequest.KEY_SENDER_DATA">
            <exclude/>
        </member>
        <member name="M:Sfs2X.Requests.GenericMessageRequest.Validate(Sfs2X.SmartFox)">
            <exclude/>
        </member>
        <member name="M:Sfs2X.Requests.GenericMessageRequest.Execute(Sfs2X.SmartFox)">
            <exclude/>
        </member>
        <member name="T:Sfs2X.Requests.GenericMessageType">
            <exclude/>
        </member>
        <member name="T:Sfs2X.Requests.HandshakeRequest">
            <summary>
            This request is used by the API sub-system at connection time. It's not intended for other uses.
            </summary>
            
            <exclude/>
        </member>
        <member name="F:Sfs2X.Requests.HandshakeRequest.KEY_SESSION_TOKEN">
            <exclude/>
        </member>
        <member name="F:Sfs2X.Requests.HandshakeRequest.KEY_API">
            <exclude/>
        </member>
        <member name="F:Sfs2X.Requests.HandshakeRequest.KEY_COMPRESSION_THRESHOLD">
            <exclude/>
        </member>
        <member name="F:Sfs2X.Requests.HandshakeRequest.KEY_RECONNECTION_TOKEN">
            <exclude/>
        </member>
        <member name="F:Sfs2X.Requests.HandshakeRequest.KEY_CLIENT_TYPE">
            <exclude/>
        </member>
        <member name="F:Sfs2X.Requests.HandshakeRequest.KEY_MAX_MESSAGE_SIZE">
            <exclude/>
        </member>
        <member name="T:Sfs2X.Requests.IRequest">
            <exclude/>
        </member>
        <member name="T:Sfs2X.Requests.JoinRoomRequest">
            <summary>
            Joins the current user in a Room.
            </summary>
            
            <remarks>
            If the operation is successful, the current user receives a <see cref="F:Sfs2X.Core.SFSEvent.ROOM_JOIN"/> event; otherwise the <see cref="F:Sfs2X.Core.SFSEvent.ROOM_JOIN_ERROR"/> event is fired.
            This usually happens when the Room is full, or the password is wrong in case of password protected Rooms.
            <para/>
            Depending on the Room configuration defined upon its creation (see the <see cref="P:Sfs2X.Requests.RoomSettings.Events">RoomSettings.Events</see> setting), when the current user joins it,
            the following events might be fired: <see cref="F:Sfs2X.Core.SFSEvent.USER_ENTER_ROOM"/>, dispatched to the other users inside the Room to warn them that a new user has arrived;
            <see cref="F:Sfs2X.Core.SFSEvent.USER_COUNT_CHANGE"/>, dispatched to all clients which subscribed the Group to which the Room belongs, to update the count of users inside the Room.
            </remarks>
            
            <example>
            The following example makes the user join an existing Room:
            <code>
            void SomeMethod() {
            	sfs.AddEventListener(SFSEvent.ROOM_JOIN, OnJoinRoom);
            	sfs.AddEventListener(SFSEvent.ROOM_JOIN_ERROR, OnJoinRoomError);
            	
            	// Join a Room called "Lobby"
            	sfs.Send( new JoinRoomRequest("Lobby") );
            }
            
            void OnJoinRoom(BaseEvent evt) {
            	Console.WriteLine("Room joined successfully: " + (Room)evt.Params["room"]);                         // .Net / Unity
            	System.Diagnostics.Debug.WriteLine("Room joined successfully: " + (Room)evt.Params["room"]);        // UWP
            }
            
            void OnJoinRoomError(BaseEvent evt) {
            	Console.WriteLine("Room joining failed: " + (string)evt.Params["errorMessage"]);                        // .Net / Unity
            	System.Diagnostics.Debug.WriteLine("Room joining failed: " + (string)evt.Params["errorMessage"]);       // UWP
            }
            </code>
            </example>
            
            <seealso cref="F:Sfs2X.Core.SFSEvent.ROOM_JOIN"/>
            <seealso cref="F:Sfs2X.Core.SFSEvent.ROOM_JOIN_ERROR"/>
            <seealso cref="F:Sfs2X.Core.SFSEvent.USER_ENTER_ROOM"/>
            <seealso cref="F:Sfs2X.Core.SFSEvent.USER_COUNT_CHANGE"/>
            <seealso cref="P:Sfs2X.Requests.RoomSettings.Events"/>
            <seealso cref="T:Sfs2X.Requests.LeaveRoomRequest"/>
        </member>
        <member name="F:Sfs2X.Requests.JoinRoomRequest.KEY_ROOM">
            <exclude/>
        </member>
        <member name="F:Sfs2X.Requests.JoinRoomRequest.KEY_USER_LIST">
            <exclude/>
        </member>
        <member name="F:Sfs2X.Requests.JoinRoomRequest.KEY_ROOM_NAME">
            <exclude/>
        </member>
        <member name="F:Sfs2X.Requests.JoinRoomRequest.KEY_ROOM_ID">
            <exclude/>
        </member>
        <member name="F:Sfs2X.Requests.JoinRoomRequest.KEY_PASS">
            <exclude/>
        </member>
        <member name="F:Sfs2X.Requests.JoinRoomRequest.KEY_ROOM_TO_LEAVE">
            <exclude/>
        </member>
        <member name="F:Sfs2X.Requests.JoinRoomRequest.KEY_AS_SPECTATOR">
            <exclude/>
        </member>
        <member name="M:Sfs2X.Requests.JoinRoomRequest.#ctor(System.Object,System.String,System.Nullable{System.Int32},System.Boolean)">
            <summary>
            Creates a new JoinRoomRequest instance.
            </summary>
            
            <remarks>
            The instance must be passed to the <see cref="M:Sfs2X.SmartFox.Send(Sfs2X.Requests.IRequest)">SmartFox.Send</see> method for the request to be performed.
            </remarks>
            
            <param name="id">The id or the name of the Room to be joined.</param>
            <param name="pass">The password of the Room, in case it is password protected (default = <c>null</c>).</param>
            <param name="roomIdToLeave">The id of a previously joined Room that the user should leave when joining the new Room. By default, the last joined Room is left; if a negative number is passed, no previous Room is left (default = <c>null</c>).</param>
            <param name="asSpectator"><c>true</c> to join the Room as a spectator (in Game Rooms only) (default = <c>false</c>).</param>
        </member>
        <member name="M:Sfs2X.Requests.JoinRoomRequest.#ctor(System.Object,System.String,System.Nullable{System.Int32})">
            <summary>
            See <em>JoinRoomRequest(object, string, int?, bool)</em> constructor.
            </summary>
        </member>
        <member name="M:Sfs2X.Requests.JoinRoomRequest.#ctor(System.Object,System.String)">
            <summary>
            See <em>JoinRoomRequest(object, string, int?, bool)</em> constructor.
            </summary>
        </member>
        <member name="M:Sfs2X.Requests.JoinRoomRequest.#ctor(System.Object)">
            <summary>
            See <em>JoinRoomRequest(object, string, int?, bool)</em> constructor.
            </summary>
        </member>
        <member name="M:Sfs2X.Requests.JoinRoomRequest.Validate(Sfs2X.SmartFox)">
            <exclude/>
        </member>
        <member name="M:Sfs2X.Requests.JoinRoomRequest.Execute(Sfs2X.SmartFox)">
            <exclude/>
        </member>
        <member name="T:Sfs2X.Requests.KickUserRequest">
            <summary>
            Kicks a user out of the server.
            </summary>
            
            <remarks>
            The current user must have administration or moderation privileges in order to be able to kick another user (see the <see cref="P:Sfs2X.Entities.User.PrivilegeId">User.PrivilegeId</see> property).
            The request allows sending a message to the kicked user (to make clear the reason of the following disconnection) which is delivered by means of the <see cref="F:Sfs2X.Core.SFSEvent.MODERATOR_MESSAGE"/> event.
            <para/>
            Differently from the user being banned (see the <see cref="T:Sfs2X.Requests.BanUserRequest"/> request), a kicked user will be able to reconnect to the SmartFoxServer instance immediately.
            </remarks>
            
            <example>
            The following example kicks the user Jack from the system:
            <code>
            User userToKick = sfs.UserManager.GetUserByName("Jack"); 
            sfs.Send( new KickUserRequest(userToKick.Id) );
            </code>
            </example>
            
            <seealso cref="F:Sfs2X.Core.SFSEvent.MODERATOR_MESSAGE"/>
            <seealso cref="T:Sfs2X.Requests.BanUserRequest"/>
        </member>
        <member name="F:Sfs2X.Requests.KickUserRequest.KEY_USER_ID">
            <exclude/>
        </member>
        <member name="F:Sfs2X.Requests.KickUserRequest.KEY_MESSAGE">
            <exclude/>
        </member>
        <member name="F:Sfs2X.Requests.KickUserRequest.KEY_DELAY">
            <exclude/>
        </member>
        <member name="M:Sfs2X.Requests.KickUserRequest.#ctor(System.Int32,System.String,System.Int32)">
            <summary>
            Creates a new KickUserRequest instance.
            </summary>
            
            <remarks>
            The instance must be passed to the <see cref="M:Sfs2X.SmartFox.Send(Sfs2X.Requests.IRequest)">SmartFox.Send</see> method for the request to be performed.
            </remarks>
            
            <param name="userId">The id of the user to be kicked.</param>
            <param name="message">A custom message to be delivered to the user before kicking him; if <c>null</c>, the default message configured in the SmartFoxServer 2X Administration Tool is used (default = <c>null</c>).</param>
            <param name="delaySeconds">The number of seconds after which the user is kicked after receiving the kick message (default = <c>5</c>).</param>
        </member>
        <member name="M:Sfs2X.Requests.KickUserRequest.#ctor(System.Int32)">
            <summary>
            See <em>KickUserRequest(int, string, int)</em> constructor.
            </summary>
        </member>
        <member name="M:Sfs2X.Requests.KickUserRequest.#ctor(System.Int32,System.String)">
            <summary>
            See <em>KickUserRequest(int, string, int)</em> constructor.
            </summary>
        </member>
        <member name="M:Sfs2X.Requests.KickUserRequest.Validate(Sfs2X.SmartFox)">
            <exclude/>
        </member>
        <member name="M:Sfs2X.Requests.KickUserRequest.Execute(Sfs2X.SmartFox)">
            <exclude/>
        </member>
        <member name="T:Sfs2X.Requests.LeaveRoomRequest">
            <summary>
            Leaves one of the Rooms joined by the current user.
            </summary>
            
            <remarks>
            Depending on the Room configuration defined upon its creation (see the <see cref="P:Sfs2X.Requests.RoomSettings.Events">RoomSettings.Events</see> setting), when the current user leaves it,
            the following events might be fired: <see cref="F:Sfs2X.Core.SFSEvent.USER_EXIT_ROOM"/>, dispatched to all the users inside the Room (including the current user then)
            to warn them that a user has gone away; <see cref="F:Sfs2X.Core.SFSEvent.USER_COUNT_CHANGE"/>, dispatched to all clients which subscribed the Group to which the Room belongs,
            to update the count of users inside the Room.
            </remarks>
            
            <example>
            The following example makes the user leave the currently joined Room and handles the respective event:
            <code>
            void SomeMethod() {
            	sfs.AddEventListener(SFSEvent.USER_EXIT_ROOM, OnUserExitRoom);
            	
            	// Leave the last joined Room
            	sfs.Send( new LeaveRoomRequest() );
            }
            
            void OnUserExitRoom(BaseEvent evt) {
            	User user = (User)evt.Params["user"];
            	Room room = (Room)evt.Params["room"];
            	
            	Console.WriteLine(""User " + user.Name + " just left Room " + room.Name);                       // .Net / Unity
            	System.Diagnostics.Debug.WriteLine(""User " + user.Name + " just left Room " + room.Name);      // UWP
            }
            </code>
            </example>
            
            <seealso cref="F:Sfs2X.Core.SFSEvent.USER_EXIT_ROOM"/>
            <seealso cref="F:Sfs2X.Core.SFSEvent.USER_COUNT_CHANGE"/>
            <seealso cref="P:Sfs2X.Requests.RoomSettings.Events"/>
            <seealso cref="T:Sfs2X.Requests.JoinRoomRequest"/>
        </member>
        <member name="F:Sfs2X.Requests.LeaveRoomRequest.KEY_ROOM_ID">
            <exclude/>
        </member>
        <member name="M:Sfs2X.Requests.LeaveRoomRequest.#ctor(Sfs2X.Entities.Room)">
            <summary>
            Creates a new LeaveRoomRequest instance.
            </summary>
            
            <remarks>
            The instance must be passed to the <see cref="M:Sfs2X.SmartFox.Send(Sfs2X.Requests.IRequest)">SmartFox.Send</see> method for the request to be performed.
            </remarks>
            
            <param name="room">The Room object corresponding to the Room that the current user must leave. If <c>null</c>, the last Room joined by the user is left (default = <c>null</c>).</param>
        </member>
        <member name="M:Sfs2X.Requests.LeaveRoomRequest.#ctor">
            <summary>
            See <em>LeaveRoomRequest(Room)</em> constructor.
            </summary>
        </member>
        <member name="M:Sfs2X.Requests.LeaveRoomRequest.Validate(Sfs2X.SmartFox)">
            <exclude/>
        </member>
        <member name="M:Sfs2X.Requests.LeaveRoomRequest.Execute(Sfs2X.SmartFox)">
            <exclude/>
        </member>
        <member name="T:Sfs2X.Requests.LoginRequest">
            <summary>
            Logs the current user in one of the server Zones.
            </summary>
            
            <remarks>
            Each Zone represent an indipendent multiuser application governed by SmartFoxServer. In order to join a Zone, a user name and password are usually required.
            In order to validate the user credentials, a custom login process should be implemented in the Zone's server-side Extension.
            <para/>
            Read the SmartFoxServer 2X documentation about the login process for more informations.
            <para/>
            If the login operation is successful, the current user receives a <see cref="F:Sfs2X.Core.SFSEvent.LOGIN"/> event; otherwise the <see cref="F:Sfs2X.Core.SFSEvent.LOGIN_ERROR"/> event is fired.
            </remarks>
            
            <example>
            The following example performs a login in the "SimpleChat" Zone:
            <code>
            void SomeMethod() {
            	sfs.AddEventListener(SFSEvent.LOGIN, OnLogin);
            	sfs.AddEventListener(SFSEvent.LOGIN_ERROR, OnLoginError);
            	
            	// Login
            	sfs.Send( new LoginRequest("FozzieTheBear", "", "SimpleChat") );
            }
            
            void OnLogin(BaseEvent evt) {
            	Console.WriteLine("Login successful!");                         // .Net / Unity
            	System.Diagnostics.Debug.WriteLine("Login successful!");        // UWP
            }
            
            void OnLoginError(BaseEvent evt) {
            	Console.WriteLine("Login failure: " + (string)evt.Params["errorMessage"]);                      // .Net / Unity
            	System.Diagnostics.Debug.WriteLine("Login failure: " + (string)evt.Params["errorMessage"]);     // UWP
            }
            </code>
            </example>
            
            <seealso cref="F:Sfs2X.Core.SFSEvent.LOGIN"/>
            <seealso cref="F:Sfs2X.Core.SFSEvent.LOGIN_ERROR"/>
            <seealso cref="T:Sfs2X.Requests.LogoutRequest"/>
        </member>
        <member name="F:Sfs2X.Requests.LoginRequest.KEY_ZONE_NAME">
            <exclude/>
        </member>
        <member name="F:Sfs2X.Requests.LoginRequest.KEY_USER_NAME">
            <exclude/>
        </member>
        <member name="F:Sfs2X.Requests.LoginRequest.KEY_PASSWORD">
            <exclude/>
        </member>
        <member name="F:Sfs2X.Requests.LoginRequest.KEY_PARAMS">
            <exclude/>
        </member>
        <member name="F:Sfs2X.Requests.LoginRequest.KEY_PRIVILEGE_ID">
            <exclude/>
        </member>
        <member name="F:Sfs2X.Requests.LoginRequest.KEY_ID">
            <exclude/>
        </member>
        <member name="F:Sfs2X.Requests.LoginRequest.KEY_ROOMLIST">
            <exclude/>
        </member>
        <member name="F:Sfs2X.Requests.LoginRequest.KEY_RECONNECTION_SECONDS">
            <exclude/>
        </member>
        <member name="M:Sfs2X.Requests.LoginRequest.#ctor(System.String,System.String,System.String,Sfs2X.Entities.Data.ISFSObject)">
            <summary>
            Creates a new LoginRequest instance.
            </summary>
            
            <remarks>
            The instance must be passed to the <see cref="M:Sfs2X.SmartFox.Send(Sfs2X.Requests.IRequest)">SmartFox.Send</see> method for the request to be performed.
            </remarks>
            
            <param name="userName">The name to be assigned to the user. If an empty string is passed and the Zone allows guest users, the name is generated automatically by the server.</param>
            <param name="password">The user password to access the system. SmartFoxServer doesn't offer a default authentication system, so the password must be validated implementing a custom login system in the Zone's server-side Extension.</param>
            <param name="zoneName">The name (case-sensitive) of the server Zone to login to; if a Zone name is not specified, the client will use the setting loaded via <see cref="M:Sfs2X.SmartFox.LoadConfig"/> method.</param>
            <param name="parameters">An instance of <see cref="T:Sfs2X.Entities.Data.SFSObject"/> containing custom parameters to be passed to the Zone Extension (requires a custom login system to be in place). Default value is <c>null</c>.</param>
        </member>
        <member name="M:Sfs2X.Requests.LoginRequest.#ctor(System.String,System.String,System.String)">
            <summary>
            See <em>LoginRequest(string, string, string, ISFSObject)</em> constructor.
            </summary>
        </member>
        <member name="M:Sfs2X.Requests.LoginRequest.#ctor(System.String,System.String)">
            <summary>
            See <em>LoginRequest(string, string, string, ISFSObject)</em> constructor.
            </summary>
        </member>
        <member name="M:Sfs2X.Requests.LoginRequest.#ctor(System.String)">
            <summary>
            See <em>LoginRequest(string, string, string, ISFSObject)</em> constructor.
            </summary>
        </member>
        <member name="M:Sfs2X.Requests.LoginRequest.Execute(Sfs2X.SmartFox)">
            <exclude/>
        </member>
        <member name="M:Sfs2X.Requests.LoginRequest.Validate(Sfs2X.SmartFox)">
            <exclude/>
        </member>
        <member name="T:Sfs2X.Requests.LogoutRequest">
            <summary>
            Logs the user out of the current server Zone.
            </summary>
            
            <remarks>
            The user is notified of the logout operation by means of the <see cref="F:Sfs2X.Core.SFSEvent.LOGOUT"/> event. This doesn't shut down the connection,
            so the user will be able to login again in the same Zone or in a different one right after the confirmation event.
            </remarks>
            
            <example>
            The following example performs a logout from the current Zone:
            <code>
            void SomeMethod() {
            	sfs.AddEventListener(SFSEvent.LOGOUT, onLogout);
            	
            	// Logout
            	sfs.Send( new LogoutRequest() );
            }
            
            void onLogout(BaseEvent evt) {
            	Console.WriteLine("Logout executed!");                          // .Net / Unity
            	System.Diagnostics.Debug.WriteLine("Logout executed!");         // UWP
            }
            </code>
            </example>
            
            <seealso cref="F:Sfs2X.Core.SFSEvent.LOGOUT"/>
            <seealso cref="T:Sfs2X.Requests.LoginRequest"/>
        </member>
        <member name="F:Sfs2X.Requests.LogoutRequest.KEY_ZONE_NAME">
            <exclude/>
        </member>
        <member name="M:Sfs2X.Requests.LogoutRequest.#ctor">
            <summary>
            Creates a new LogoutRequest instance.
            </summary>
            
            <remarks>
            The instance must be passed to the <see cref="M:Sfs2X.SmartFox.Send(Sfs2X.Requests.IRequest)">SmartFox.Send</see> method for the request to be performed.
            </remarks>
        </member>
        <member name="M:Sfs2X.Requests.LogoutRequest.Validate(Sfs2X.SmartFox)">
            <exclude/>
        </member>
        <member name="T:Sfs2X.Requests.ManualDisconnectionRequest">
            <summary>
            This is used by the system. Never send this directly.
            </summary>
            
            <exclude/>
        </member>
        <member name="M:Sfs2X.Requests.ManualDisconnectionRequest.#ctor">
            <exclude/>
        </member>
        <member name="M:Sfs2X.Requests.ManualDisconnectionRequest.Validate(Sfs2X.SmartFox)">
            <exclude/>
        </member>
        <member name="M:Sfs2X.Requests.ManualDisconnectionRequest.Execute(Sfs2X.SmartFox)">
            <exclude/>
        </member>
        <member name="T:Sfs2X.Requests.MessageRecipientType">
            <summary>
            The possible message recipient modes for ModeratorMessageRequest and AdminMessageRequest requests.
            </summary>
        </member>
        <member name="F:Sfs2X.Requests.MessageRecipientType.TO_USER">
            <summary>
            The moderator/administrator message will be sent to a specific user.
            </summary>
            
            <remarks>
            A User instance must be passed as <em>target</em> parameter to the <see cref="T:Sfs2X.Requests.MessageRecipientMode"/> class constructor.
            </remarks>
            
            <seealso cref="T:Sfs2X.Entities.User"/>
        </member>
        <member name="F:Sfs2X.Requests.MessageRecipientType.TO_ROOM">
            <summary>
            The moderator/administrator message will be sent to all the users in a specific Room.
            </summary>
            
            <remarks>
            A Room instance must be passed as <em>target</em> parameter to the <see cref="T:Sfs2X.Requests.MessageRecipientMode"/> class constructor.
            </remarks>
            
            <seealso cref="T:Sfs2X.Entities.Room"/>
        </member>
        <member name="F:Sfs2X.Requests.MessageRecipientType.TO_GROUP">
            <summary>
            The moderator/administrator message will be sent to all the clients who subscribed a specific Room Group.
            </summary>
            
            <remarks>
            A Group id must be passed as <em>target</em> parameter to the <see cref="T:Sfs2X.Requests.MessageRecipientMode"/> class constructor.
            </remarks>
            
            <seealso cref="P:Sfs2X.Entities.Room.GroupId"/>
        </member>
        <member name="F:Sfs2X.Requests.MessageRecipientType.TO_ZONE">
            <summary>
            The moderator/administrator message will be sent to all the users in the Zone.
            </summary>
            
            <remarks>
            <c>null</c> can be passed as <em>target</em> parameter to the <see cref="T:Sfs2X.Requests.MessageRecipientMode"/> class, in fact it will be ignored.
            </remarks>
        </member>
        <member name="T:Sfs2X.Requests.MessageRecipientMode">
            <summary>
            The MessageRecipientMode class is used to specify the recipient/s of moderator and administrator messages.
            </summary>
            
            <remarks>
            Read the constants descriptions in the <see cref="T:Sfs2X.Requests.MessageRecipientType"/> enumeration for more informations.
            </remarks>
            
            <seealso cref="T:Sfs2X.Requests.ModeratorMessageRequest"/>
            <seealso cref="T:Sfs2X.Requests.AdminMessageRequest"/>
        </member>
        <member name="P:Sfs2X.Requests.MessageRecipientMode.Target">
            <summary>
            Returns the moderator/administrator message target, according to the selected recipient mode.
            </summary>
        </member>
        <member name="P:Sfs2X.Requests.MessageRecipientMode.Mode">
            <summary>
            Returns the selected recipient mode.
            </summary>
        </member>
        <member name="M:Sfs2X.Requests.MessageRecipientMode.#ctor(System.Int32,System.Object)">
            <summary>
            Creates a new MessageRecipientMode instance.
            </summary>
            
            <remarks>
            The instance must be passed as <em>recipientMode</em> parameter to the <see cref="T:Sfs2X.Requests.ModeratorMessageRequest"/> and <see cref="T:Sfs2X.Requests.AdminMessageRequest"/> classes constructors.
            </remarks>
            
            <param name="mode">One of the costants contained in the <see cref="T:Sfs2X.Requests.MessageRecipientType"/> enumerator, describing the recipient mode.</param>
            <param name="target">The moderator/administrator message recipient/s, according to the selected recipient mode.</param>
        </member>
        <member name="T:Sfs2X.Requests.ModeratorMessageRequest">
            <summary>
            Sends a moderator message to a specific user or a group of users.
            </summary>
            
            <remarks>
            The current user must have moderation privileges to be able to send the message (see the <see cref="P:Sfs2X.Entities.User.PrivilegeId">User.PrivilegeId</see> property).
            <para/>
            The <em>recipientMode</em> parameter in the class constructor is used to determine the message recipients: a single user or all the users in a Room,
            a Group or the entire Zone. Upon message delivery, the clients of the recipient users dispatch the <see cref="F:Sfs2X.Core.SFSEvent.MODERATOR_MESSAGE"/> event.
            </remarks>
            
            <example>
            The following example sends a moderator message to all the users in the last joned Room; it also shows how to handle the related event:
            <code>
            void SomeMethod() {
            	sfs.AddEventListener(SFSEvent.MODERATOR_MESSAGE, OnModeratorMessage);
            	
            	// Set the message recipients: all users in the current Room
            	MessageRecipientMode recipMode = new MessageRecipientMode(MessageRecipientMode.TO_ROOM, sfs.LastJoinedRoom);
            	
            	// Send the moderator message
            	sfs.Send( new ModeratorMessageRequest("Hello everybody, I'm the Moderator!", recipMode) );
            }
            
            void OnModeratorMessage(BaseEvent evt) {
            	Console.WriteLine("The moderator sent the following message: " + (string)evt.Params["message"]);                        // .Net / Unity
            	System.Diagnostics.Debug.WriteLine("The moderator sent the following message: " + (string)evt.Params["message"]);       // UWP
            }
            </code>
            </example>
            
            <seealso cref="T:Sfs2X.Requests.MessageRecipientMode"/>
            <seealso cref="F:Sfs2X.Core.SFSEvent.MODERATOR_MESSAGE"/>
            <seealso cref="T:Sfs2X.Requests.AdminMessageRequest"/>
        </member>
        <member name="M:Sfs2X.Requests.ModeratorMessageRequest.#ctor(System.String,Sfs2X.Requests.MessageRecipientMode,Sfs2X.Entities.Data.ISFSObject)">
            <summary>
            Creates a new ModeratorMessageRequest instance.
            </summary>
            
            <remarks>
            The instance must be passed to the <see cref="M:Sfs2X.SmartFox.Send(Sfs2X.Requests.IRequest)">SmartFox.Send</see> method for the request to be performed.
            </remarks>
            
            <param name="message">The message of the moderator to be sent to the target user/s defined by the <em>recipientMode</em> parameter.</param>
            <param name="recipientMode">An instance of MessageRecipientMode containing the target to which the message should be delivered.</param>
            <param name="parameters">An instance of <see cref="T:Sfs2X.Entities.Data.SFSObject"/> containing custom parameters to be sent to the recipient user/s (default = <c>null</c>).</param>
        </member>
        <member name="M:Sfs2X.Requests.ModeratorMessageRequest.#ctor(System.String,Sfs2X.Requests.MessageRecipientMode)">
            <summary>
            See <em>ModeratorMessageRequest(string, MessageRecipientMode, ISFSObject)</em> constructor.
            </summary>
        </member>
        <member name="T:Sfs2X.Requests.ObjectMessageRequest">
            <summary>
            Sends an object containing custom data to all users in a Room, or a subset of them.
            </summary>
            
            <remarks>
            The data object is delivered to the selected users (or all users excluding the sender) inside the target Room by means of the <see cref="F:Sfs2X.Core.SFSEvent.OBJECT_MESSAGE"/> event.
            It can be useful to send game data, like for example the target coordinates of the user's avatar in a virtual world.
            </remarks>
            
            <example>
            The following example sends the player's character movement coordinates and handles the respective event:
            <code>
            void SomeMethod() {
            	sfs.AddEventListener(SFSEvent.OBJECT_MESSAGE, OnObjectMessage);
            	
            	// Send a game move to all players
            	ISFSObject dataObj = new SFSObject();
            	dataObj.PutInt("x", myAvatar.x);
            	dataObj.PutInt("y", myAvatar.y);
            	sfs.Send( new ObjectMessageRequest(dataObj) );
            }
            
            void OnObjectMessage(BaseEvent evt) {
            	ISFSObject dataObj = (SFSObject)evt.Params["message"];
            	int x = dataObj.GetInt("x");
            	int y = dataObj.GetInt("y");
            	
            	// etc...
            }
            </code>
            </example>
            
            <seealso cref="F:Sfs2X.Core.SFSEvent.OBJECT_MESSAGE"/>
        </member>
        <member name="M:Sfs2X.Requests.ObjectMessageRequest.#ctor(Sfs2X.Entities.Data.ISFSObject,Sfs2X.Entities.Room,System.Collections.Generic.ICollection{Sfs2X.Entities.User})">
            <summary>
            Creates a new ObjectMessageRequest instance.
            </summary>
            
            <remarks>
            The instance must be passed to the <see cref="M:Sfs2X.SmartFox.Send(Sfs2X.Requests.IRequest)">SmartFox.Send</see> method for the request to be performed.
            </remarks>
            
            <param name="obj">An instance of <see cref="T:Sfs2X.Entities.Data.SFSObject"/> containing custom parameters to be sent to the message recipients.</param>
            <param name="targetRoom">The Room object corresponding to the Room where the message should be dispatched; if null, the last Room joined by the user is used (default = <c>null</c>).</param>
            <param name="recipients">A collection of User objects corresponding to the message recipients (default = <c>null</c>); if <c>null</c>, the message is sent to all users in the target Room (except the sender himself).</param>
        </member>
        <member name="M:Sfs2X.Requests.ObjectMessageRequest.#ctor(Sfs2X.Entities.Data.ISFSObject,Sfs2X.Entities.Room)">
            <summary>
            See <em>ObjectMessageRequest(ISFSObject, Room, ICollection&lt;User&gt;)</em> constructor.
            </summary>
        </member>
        <member name="M:Sfs2X.Requests.ObjectMessageRequest.#ctor(Sfs2X.Entities.Data.ISFSObject)">
            <summary>
            See <em>ObjectMessageRequest(ISFSObject, Room, ICollection&lt;User&gt;)</em> constructor.
            </summary>
        </member>
        <member name="T:Sfs2X.Requests.PingPongRequest">
            <summary>
            Sends a ping-pong request in order to measure the current lag
            </summary>
            
            <exclude/>
        </member>
        <member name="M:Sfs2X.Requests.PingPongRequest.Validate(Sfs2X.SmartFox)">
            <exclude/>
        </member>
        <member name="M:Sfs2X.Requests.PingPongRequest.Execute(Sfs2X.SmartFox)">
            <exclude/>
        </member>
        <member name="T:Sfs2X.Requests.PlayerToSpectatorRequest">
            <summary>
            Turns the current user from player to spectator in a Game Room.
            </summary>
            
            <remarks>
            If the operation is successful, all the users in the target Room are notified with the <see cref="F:Sfs2X.Core.SFSEvent.PLAYER_TO_SPECTATOR"/> event.
            The operation could fail if no spectator slots are available in the Game Room at the time of the request;
            in this case the <see cref="F:Sfs2X.Core.SFSEvent.PLAYER_TO_SPECTATOR_ERROR"/> event is dispatched to the requester's client.
            </remarks>
            
            <example>
            The following example turns the current user from player to spectator in the last joined Game Room:
            <code>
            void SomeMethod() {
            	sfs.AddEventListener(SFSEvent.PLAYER_TO_SPECTATOR, OnPlayerToSpectatorSwitch);
            	sfs.AddEventListener(SFSEvent.PLAYER_TO_SPECTATOR_ERROR, OnPlayerToSpectatorSwitchError);
            	
            	// Switch player to spectator
            	sfs.Send( new PlayerToSpectatorRequest() );
            }
            
            void OnPlayerToSpectatorSwitch(BaseEvent evt) {
            	User user = (User)evt.Params["user"];
            	Console.WriteLine("Player " + user.Name + " is now a spectator");                           // .Net / Unity
            	System.Diagnostics.Debug.WriteLine("Player " + user.Name + " is now a spectator");          // UWP
            }
            
            void OnPlayerToSpectatorSwitchError(BaseEvent evt) {
            	Console.WriteLine("Unable to become a spectator due to the following error: " + (string)evt.Params["errorMessage"]);                        // .Net / Unity
            	System.Diagnostics.Debug.WriteLine("Unable to become a spectator due to the following error: " + (string)evt.Params["errorMessage"]);       // UWP
            }
            </code>
            </example>
            
            <seealso cref="F:Sfs2X.Core.SFSEvent.PLAYER_TO_SPECTATOR"/>
            <seealso cref="F:Sfs2X.Core.SFSEvent.PLAYER_TO_SPECTATOR_ERROR"/>
            <seealso cref="T:Sfs2X.Requests.SpectatorToPlayerRequest"/>
        </member>
        <member name="F:Sfs2X.Requests.PlayerToSpectatorRequest.KEY_ROOM_ID">
            <exclude/>
        </member>
        <member name="F:Sfs2X.Requests.PlayerToSpectatorRequest.KEY_USER_ID">
            <exclude/>
        </member>
        <member name="M:Sfs2X.Requests.PlayerToSpectatorRequest.#ctor(Sfs2X.Entities.Room)">
            <summary>
            Creates a new PlayerToSpectatorRequest instance.
            </summary>
            
            <remarks>
            The instance must be passed to the <see cref="M:Sfs2X.SmartFox.Send(Sfs2X.Requests.IRequest)">SmartFox.Send</see> method for the request to be performed.
            </remarks>
            
            <param name="targetRoom">The object corresponding to the Room in which the player should be turned to spectator. If <c>null</c>, the last Room joined by the user is used (default = <c>null</c>).</param>
        </member>
        <member name="M:Sfs2X.Requests.PlayerToSpectatorRequest.#ctor">
            <summary>
            See <em>PlayerToSpectatorRequest(Room)</em> constructor.
            </summary>
        </member>
        <member name="M:Sfs2X.Requests.PlayerToSpectatorRequest.Validate(Sfs2X.SmartFox)">
            <exclude/>
        </member>
        <member name="M:Sfs2X.Requests.PlayerToSpectatorRequest.Execute(Sfs2X.SmartFox)">
            <exclude/>
        </member>
        <member name="T:Sfs2X.Requests.PrivateMessageRequest">
            <summary>
            Sends a private chat message.
            </summary>
            
            <remarks>
            The private message is dispatched to a specific user, who can be in any server Room, or even in no Room at all. The message is delivered by means of the <see cref="F:Sfs2X.Core.SFSEvent.PRIVATE_MESSAGE"/> event.
            It is also returned to the sender: this allows showing the messages in the correct order in the application interface. It is also possible to send an optional object together with the message:
            it can contain custom parameters useful to transmit, for example, additional informations related to the message, like the text font or color, or other formatting details.
            </remarks>
            
            <example>
            The following example sends a private message and handles the respective event:
            <code>
            void SomeMethod() {
            	sfs.AddEventListener(SFSEvent.PRIVATE_MESSAGE, OnPrivateMessage);
            	
            	// Send a private message to Jack
            	User messageRecipient = sfs.UserManager.GetUserByName("Jack");
            	sfs.Send( new PrivateMessageRequest("Hello Jack!", messageRecipient.Id) );
            }
            
            void OnPrivateMessage(BaseEvent evt) {
            	// As messages are forwarded to the sender too, I have to check if I am the sender
            	User sender = (User)evt.Params["sender"];
            	
            	if (sender != sfs.MySelf)
            	{
            		Console.WriteLine("User " + sender.Name + " sent me this PM: " + (string)evt.Params["message"]);                        // .Net / Unity
            	    System.Diagnostics.Debug.WriteLine("User " + sender.Name + " sent me this PM: " + (string)evt.Params["message"]);       // UWP
                }
            }
            </code>
            </example>
            
            <seealso cref="F:Sfs2X.Core.SFSEvent.PRIVATE_MESSAGE"/>
            <seealso cref="T:Sfs2X.Requests.PublicMessageRequest"/>
        </member>
        <member name="M:Sfs2X.Requests.PrivateMessageRequest.#ctor(System.String,System.Int32,Sfs2X.Entities.Data.ISFSObject)">
            <summary>
            Creates a new PrivateMessageRequest instance.
            </summary>
            
            <remarks>
            The instance must be passed to the <see cref="M:Sfs2X.SmartFox.Send(Sfs2X.Requests.IRequest)">SmartFox.Send</see> method for the request to be performed.
            </remarks>
            
            <param name="message">The message to be sent to to the recipient user.</param>
            <param name="recipientId">The id of the user to which the message is to be sent.</param>
            <param name="parameters">An instance of <see cref="T:Sfs2X.Entities.Data.SFSObject"/> containing additional custom parameters to be sent to the message recipient (for example the color of the text, etc). Default value is <c>null</c>.</param>
        </member>
        <member name="M:Sfs2X.Requests.PrivateMessageRequest.#ctor(System.String,System.Int32)">
            <summary>
            See <em>PrivateMessageRequest(string, int, ISFSObject)</em> constructor.
            </summary>
        </member>
        <member name="T:Sfs2X.Requests.PublicMessageRequest">
            <summary>
            Sends a public chat message.
            </summary>
            
            <remarks>
            A public message is dispatched to all the users in the specified Room, including the message sender (this allows showing messages in the correct order in the application interface);
            the corresponding event is the <see cref="F:Sfs2X.Core.SFSEvent.PUBLIC_MESSAGE"/> event. It is also possible to send an optional object together with the message: it can contain
            custom parameters useful to transmit, for example, additional informations related to the message, like the text font or color, or other formatting details.
            <para/>
            In case the target Room is not specified, the message is sent in the last Room joined by the sender.
            <para/>
            <b>NOTE</b>: the <see cref="F:Sfs2X.Core.SFSEvent.PUBLIC_MESSAGE"/> event is dispatched if the Room is configured
            to allow public messaging only (see the <see cref="P:Sfs2X.Requests.RoomSettings.Permissions">RoomSettings.Permissions</see> parameter).
            </remarks>
            
            <example>
            The following example sends a public message and handles the respective event:
            <code>
            void SomeMethod() {
            	sfs.AddEventListener(SFSEvent.PUBLIC_MESSAGE, OnPublicMessage);
            	
            	// Send a public message
            	sfs.Send( new PublicMessageRequest("Hello everyone!") );
            }
            
            void OnPublicMessage(BaseEvent evt) {
            	// As messages are forwarded to the sender too, I have to check if I am the sender
            	User sender = (User)evt.Params["sender"];
            	
            	if (sender == sfs.MySelf)
            	{
            		Console.WriteLine("I said " + (string)evt.Params["message"]);                           // .Net / Unity
            	    System.Diagnostics.Debug.WriteLine("I said " + (string)evt.Params["message"]);          // UWP
                }
            	else
            	{
            		Console.WriteLine("User " + sender.Name + " said: " + (string)evt.Params["message"]);                           // .Net / Unity
            	    System.Diagnostics.Debug.WriteLine("User " + sender.Name + " said: " + (string)evt.Params["message"]);          // UWP
            	}
            }
            </code>
            </example>
            
            <seealso cref="F:Sfs2X.Core.SFSEvent.PUBLIC_MESSAGE"/>
            <seealso cref="T:Sfs2X.Requests.PrivateMessageRequest"/>
        </member>
        <member name="M:Sfs2X.Requests.PublicMessageRequest.#ctor(System.String,Sfs2X.Entities.Data.ISFSObject,Sfs2X.Entities.Room)">
            <summary>
            Creates a new PublicMessageRequest instance.
            </summary>
            
            <remarks>
            The instance must be passed to the <see cref="M:Sfs2X.SmartFox.Send(Sfs2X.Requests.IRequest)">SmartFox.Send</see> method for the request to be performed.
            </remarks>
            
            <param name="message">The message to be sent to all the users in the target Room.</param>
            <param name="parameters">An instance of <see cref="T:Sfs2X.Entities.Data.SFSObject"/> containing additional custom parameters to be sent to the message recipients (for example the color of the text, etc). Default value is <c>null</c>.</param>
            <param name="targetRoom">The object corresponding to the Room where the message should be dispatched; if <c>null</c>, the last Room joined by the user is used (default = <c>null</c>).</param>
        </member>
        <member name="M:Sfs2X.Requests.PublicMessageRequest.#ctor(System.String,Sfs2X.Entities.Data.ISFSObject)">
            <summary>
            See <em>PublicMessageRequest(string, ISFSObject, Room)</em> constructor.
            </summary>
        </member>
        <member name="M:Sfs2X.Requests.PublicMessageRequest.#ctor(System.String)">
            <summary>
            See <em>PublicMessageRequest(string, ISFSObject, Room)</em> constructor.
            </summary>
        </member>
        <member name="T:Sfs2X.Requests.RequestType">
            <exclude/>
        </member>
        <member name="T:Sfs2X.Requests.RoomEvents">
            <summary>
            The RoomEvents class contains a specific subset of the RoomSettings required to create a Room.
            </summary>
            
            <remarks>
            This class defines which events related to the Room will be fired by the SmartFox client.
            </remarks>
            
            <seealso cref="P:Sfs2X.Requests.RoomSettings.Events"/>
            <seealso cref="T:Sfs2X.Requests.CreateRoomRequest"/>
        </member>
        <member name="M:Sfs2X.Requests.RoomEvents.#ctor">
            <summary>
            Creates a new RoomEvents instance.
            </summary>
            
            <remarks>
            The <see cref="P:Sfs2X.Requests.RoomSettings.Events">RoomSettings.Events</see> property must be set to this instance during Room creation.
            </remarks>
            
            <seealso cref="P:Sfs2X.Requests.RoomSettings.Events"/>
        </member>
        <member name="P:Sfs2X.Requests.RoomEvents.AllowUserEnter">
            <summary>
            Indicates whether the <see cref="F:Sfs2X.Core.SFSEvent.USER_ENTER_ROOM"/> event should be dispatched whenever a user joins the Room or not.
            </summary>
            
            <remarks>
            The default value is <c>false</c>.
            </remarks>
            
            <seealso cref="F:Sfs2X.Core.SFSEvent.USER_ENTER_ROOM"/>
        </member>
        <member name="P:Sfs2X.Requests.RoomEvents.AllowUserExit">
            <summary>
            Indicates whether the <see cref="F:Sfs2X.Core.SFSEvent.USER_EXIT_ROOM"/> event should be dispatched whenever a user leaves the Room or not.
            </summary>
            
            <remarks>
            The default value is <c>false</c>.
            </remarks>
            
            <seealso cref="F:Sfs2X.Core.SFSEvent.USER_ENTER_ROOM"/>
        </member>
        <member name="P:Sfs2X.Requests.RoomEvents.AllowUserCountChange">
            <summary>
            Indicates whether or not the <see cref="F:Sfs2X.Core.SFSEvent.USER_COUNT_CHANGE"/> event should be dispatched whenever the users (or players+spectators) count changes in the Room.
            </summary>
            
            <remarks>
            The default value is <c>false</c>.
            </remarks>
            
            <seealso cref="F:Sfs2X.Core.SFSEvent.USER_COUNT_CHANGE"/>
        </member>
        <member name="P:Sfs2X.Requests.RoomEvents.AllowUserVariablesUpdate">
            <summary>
            Indicates whether or not the <see cref="F:Sfs2X.Core.SFSEvent.USER_VARIABLES_UPDATE"/> event should be dispatched whenever a user in the Room updates his User Variables.
            </summary>
            
            <remarks>
            The default value is <c>false</c>.
            </remarks>
            
            <seealso cref="F:Sfs2X.Core.SFSEvent.USER_VARIABLES_UPDATE"/>
        </member>
        <member name="T:Sfs2X.Requests.RoomExtension">
            <summary>
            The RoomExtension class contains a specific subset of the RoomSettings required to create a Room.
            </summary>
            
            <remarks>
            This class defines which server-side Extension should be attached to the Room upon creation.
            <para/>
            The client can communicate with the Room Extension by means of the <see cref="T:Sfs2X.Requests.ExtensionRequest"/> request.
            </remarks>
            
            <seealso cref="P:Sfs2X.Requests.RoomSettings.Extension"/>
            <seealso cref="T:Sfs2X.Requests.CreateRoomRequest"/>
        </member>
        <member name="M:Sfs2X.Requests.RoomExtension.#ctor(System.String,System.String)">
            <summary>
            Creates a new RoomExtension instance.
            </summary>
            
            <remarks>
            The <see cref="P:Sfs2X.Requests.RoomSettings.Extension">RoomSettings.Extension</see> property must be set to this instance during Room creation.
            </remarks>
            
            <param name="id">The name of the Extension as deployed on the server; it's the name of the folder containing the Extension classes inside the main <em>[sfs2x-install-folder]/SFS2X/extensions</em> folder.</param>
            <param name="className">The fully qualified name of the main class of the Extension.</param>
            
            <seealso cref="P:Sfs2X.Requests.RoomSettings.Extension"/>
        </member>
        <member name="P:Sfs2X.Requests.RoomExtension.Id">
            <summary>
            Returns the name of the Extension to be attached to the Room.
            </summary>
            
            <remarks>
            This is the name of the server-side folder containing the Extension classes inside the main <em>[sfs2x-install-folder]/SFS2X/extensions</em> folder.
            </remarks>
        </member>
        <member name="P:Sfs2X.Requests.RoomExtension.ClassName">
            <summary>
            Returns the fully qualified name of the main class of the Extension.
            </summary>
        </member>
        <member name="P:Sfs2X.Requests.RoomExtension.PropertiesFile">
            <summary>
            Defines the name of an optional properties file that should be loaded on the server-side during the Extension initialization.
            </summary>
            
            <remarks>
            The file must be located in the server-side folder containing the Extension classes.
            </remarks>
        </member>
        <member name="T:Sfs2X.Requests.RoomPermissions">
            <summary>
            The RoomPermissions class contains a specific subset of the RoomSettings required to create a Room.
            </summary>
            
            <remarks>
            This class defines which operations users will be able to execute on the Room after its creation.
            </remarks>
            
            <seealso cref="P:Sfs2X.Requests.RoomSettings.Permissions"/>
            <seealso cref="T:Sfs2X.Requests.CreateRoomRequest"/>
        </member>
        <member name="M:Sfs2X.Requests.RoomPermissions.#ctor">
            <summary>
            Creates a new RoomPermissions instance.
            </summary>
            
            <remarks>
            The <see cref="P:Sfs2X.Requests.RoomSettings.Permissions">RoomSettings.Permissions</see> property must be set to this instance during Room creation.
            </remarks>
        </member>
        <member name="P:Sfs2X.Requests.RoomPermissions.AllowNameChange">
            <summary>
            Indicates whether changing the Room name after its creation is allowed or not.
            </summary>
            
            <remarks>
            The Room name can be changed by means of the <see cref="T:Sfs2X.Requests.ChangeRoomNameRequest"/> request.
            <para/>
            The default value is <c>false</c>.
            </remarks>
            
            <seealso cref="T:Sfs2X.Requests.ChangeRoomNameRequest"/>
        </member>
        <member name="P:Sfs2X.Requests.RoomPermissions.AllowPasswordStateChange">
            <summary>
            Indicates whether changing (or removing) the Room password after its creation is allowed or not.
            </summary>
            
            <remarks>
            The Room password can be changed by means of the <see cref="T:Sfs2X.Requests.ChangeRoomPasswordStateRequest"/> request.
            <para/>
            The default value is <c>false</c>.
            </remarks>
            
            <seealso cref="T:Sfs2X.Requests.ChangeRoomPasswordStateRequest"/>
        </member>
        <member name="P:Sfs2X.Requests.RoomPermissions.AllowPublicMessages">
            <summary>
            Indicates whether users inside the Room are allowed to send public messages or not.
            </summary>
            
            <remarks>
            Public messages can be sent by means of the <see cref="T:Sfs2X.Requests.PublicMessageRequest"/> request.
            <para/>
            The default value is <c>false</c>.
            </remarks>
            
            <seealso cref="T:Sfs2X.Requests.PublicMessageRequest"/>
        </member>
        <member name="P:Sfs2X.Requests.RoomPermissions.AllowResizing">
            <summary>
            Indicates whether the Room capacity can be changed after its creation or not.
            </summary>
            
            <remarks>
            The capacity is the maximum number of users and spectators (in Game Rooms) allowed to enter the Room. It can be changed by means of the <see cref="T:Sfs2X.Requests.ChangeRoomCapacityRequest"/> request.
            <para/>
            The default value is <c>false</c>.
            </remarks>
            
            <seealso cref="T:Sfs2X.Requests.ChangeRoomCapacityRequest"/>
        </member>
        <member name="T:Sfs2X.Requests.RoomSettings">
            <summary>
            The RoomSettings class is a container for the settings required to create a Room.
            </summary>
            
            <seealso cref="T:Sfs2X.Requests.CreateRoomRequest"/>
        </member>
        <member name="M:Sfs2X.Requests.RoomSettings.#ctor(System.String)">
            <summary>
            Creates a new RoomSettings instance.
            </summary>
            
            <remarks>
            The instance must be passed to the <see cref="T:Sfs2X.Requests.CreateRoomRequest"/> class constructor.
            </remarks>
            
            <param name="name">The name of the Room to be created.</param>
            
            <seealso cref="T:Sfs2X.Requests.CreateRoomRequest"/>
        </member>
        <member name="P:Sfs2X.Requests.RoomSettings.Name">
            <summary>
            Defines the name of the Room.
            </summary>
        </member>
        <member name="P:Sfs2X.Requests.RoomSettings.Password">
            <summary>
            Defines the password of the Room.
            </summary>
            
            <remarks>
            If the password is set to an empty string, the Room won't be password protected.
            <para/>
            The default value is an empty string.
            </remarks>
        </member>
        <member name="P:Sfs2X.Requests.RoomSettings.IsGame">
            <summary>
            Indicates whether the Room is a Game Room or not.
            </summary>
            
            <remarks>
            The default value is <em>false</em>.
            </remarks>
        </member>
        <member name="P:Sfs2X.Requests.RoomSettings.MaxUsers">
            <summary>
            Defines the maximum number of users allowed in the Room.
            </summary>
            
            <remarks>
            In case of Game Rooms, this is the maximum number of players.
            <para/>
            The default value is <em>10</em>.
            </remarks>
            
            <seealso cref="P:Sfs2X.Requests.RoomSettings.MaxSpectators"/>
        </member>
        <member name="P:Sfs2X.Requests.RoomSettings.MaxVariables">
            <summary>
            Defines the maximum number of Room Variables allowed for the Room.
            </summary>
            
            <remarks>
            The default value is <em>5</em>.
            </remarks>
        </member>
        <member name="P:Sfs2X.Requests.RoomSettings.MaxSpectators">
            <summary>
            Defines the maximum number of spectators allowed in the Room (only for Game Rooms).
            </summary>
            
            <remarks>
            The default value is <em>0</em>.
            </remarks>
            
            <seealso cref="P:Sfs2X.Requests.RoomSettings.MaxUsers"/>
        </member>
        <member name="P:Sfs2X.Requests.RoomSettings.Variables">
            <summary>
            Defines a list of RooomVariable objects to be attached to the Room.
            </summary>
            
            <remarks>
            The default value is <c>null</c>.
            </remarks>
            
            <seealso cref="T:Sfs2X.Entities.Variables.RoomVariable"/>
        </member>
        <member name="P:Sfs2X.Requests.RoomSettings.Permissions">
            <summary>
            Defines the flags indicating which operations are permitted on the Room.
            </summary>
            
            <remarks>
            Permissions include: name and password change, maximum users change and public messaging. If set to <c>null</c>,
            the permissions configured on the server-side are used (see the SmartFoxServer 2X Administration Tool documentation).
            <para/>
            The default value is <c>null</c>.
            </remarks>
        </member>
        <member name="P:Sfs2X.Requests.RoomSettings.Events">
            <summary>
            Defines the flags indicating which events related to the Room are dispatched by the <em>SmartFox</em> client.
            </summary>
            
            <remarks>
            Room events include: users entering or leaving the room, user count change and user variables update. If set to <c>null</c>,
            the events configured on the server-side are used (see the SmartFoxServer 2X Administration Tool documentation).
            <para/>
            The default value is <c>null</c>.
            </remarks>
        </member>
        <member name="P:Sfs2X.Requests.RoomSettings.Extension">
            <summary>
            Defines the Extension that must be attached to the Room on the server-side, and its settings.
            </summary>
        </member>
        <member name="P:Sfs2X.Requests.RoomSettings.GroupId">
            <summary>
            Defines the id of the Group to which the Room should belong.
            </summary>
            
            <remarks>
            If the Group doesn't exist yet, a new one is created before assigning the Room to it.
            <para/>
            The default value is <em>default</em>.
            </remarks>
            
            <seealso cref="P:Sfs2X.Entities.Room.GroupId"/>
        </member>
        <member name="P:Sfs2X.Requests.RoomSettings.AllowOwnerOnlyInvitation">
            <summary>
            Specifies if the Room allows "Join Room" invitations to be sent by any user or just by its owner.
            </summary>
            
            <remarks>
            The default value is <em>true</em>.
            </remarks>
            
            <seealso cref="T:Sfs2X.Requests.Game.JoinRoomInvitationRequest"/>
        </member>
        <member name="T:Sfs2X.Requests.SetRoomVariablesRequest">
            <summary>
            Sets one or more custom Room Variables in a Room.
            </summary>
            
            <remarks>
            When a Room Variable is set, the <see cref="F:Sfs2X.Core.SFSEvent.ROOM_VARIABLES_UPDATE"/> event is dispatched to all the users in the target Room, including the user who updated it.
            Also, if the Room Variable is global (see the <see cref="T:Sfs2X.Entities.Variables.SFSRoomVariable"/> class description), the event is dispatched to all users who subscribed the Group to which the target Room is associated.
            </remarks>
            
            <example>
            The following example sets a number of Room Variables and handles the respective update event:
            <code>
            void SomeMethod() {
            	sfs.AddEventListener(SFSEvent.ROOM_VARIABLES_UPDATE, OnRoomVarsUpdate);
            	
            	// Create some Room Variables
            	List&lt;RoomVariable&gt; roomVars = new List&lt;RoomVariable&gt;();
            	roomVars.Add( new SFSRoomVariable("gameStarted", false) );
            	roomVars.Add( new SFSRoomVariable("gameType", "Snooker") );
            	roomVars.Add( new SFSRoomVariable("minRank", 10) );
            
            	sfs.Send( new SetRoomVariablesRequest(roomVars) );
            }
            
            void OnRoomVarsUpdate(BaseEvent evt) {
            	List&lt;String&gt; changedVars = (List&lt;String&gt;)evt.Params["changedVars"];
            	Room room = (Room)evt.Params["room"];
            	
            	// Check if the gameStarted variable was changed
            	if (changedVars.Contains ("gameStarted")) {
            		if (room.GetVariable("gameStarted").GetBoolValue()) {
            			Console.WriteLine("Game started");                          // .Net / Unity
            	        System.Diagnostics.Debug.WriteLine("Game started");         // UWP
            		} else {
            			Console.WriteLine("Game stopped");                          // .Net / Unity
            	        System.Diagnostics.Debug.WriteLine("Game stopped");         // UWP
            		}
            	}
            }
            </code>
            </example>
            
            <seealso cref="F:Sfs2X.Core.SFSEvent.ROOM_VARIABLES_UPDATE"/>
            <seealso cref="T:Sfs2X.Entities.Variables.SFSRoomVariable"/>
        </member>
        <member name="F:Sfs2X.Requests.SetRoomVariablesRequest.KEY_VAR_ROOM">
            <exclude/>
        </member>
        <member name="F:Sfs2X.Requests.SetRoomVariablesRequest.KEY_VAR_LIST">
            <exclude/>
        </member>
        <member name="M:Sfs2X.Requests.SetRoomVariablesRequest.#ctor(System.Collections.Generic.ICollection{Sfs2X.Entities.Variables.RoomVariable},Sfs2X.Entities.Room)">
            <summary>
            Creates a new SetRoomVariablesRequest instance.
            </summary>
            
            <remarks>
            The instance must be passed to the <see cref="M:Sfs2X.SmartFox.Send(Sfs2X.Requests.IRequest)">SmartFox.Send</see> method for the request to be performed.
            </remarks>
            
            <param name="roomVariables">A collection of objects representing the Room Variables to be set.</param>
            <param name="room">An object representing the Room where to set the Room Variables; if <c>null</c>, the last Room joined by the current user is used (default = <c>null</c>).</param>
        </member>
        <member name="M:Sfs2X.Requests.SetRoomVariablesRequest.#ctor(System.Collections.Generic.ICollection{Sfs2X.Entities.Variables.RoomVariable})">
            <summary>
            See <em>SetRoomVariablesRequest(ICollection&lt;RoomVariable&gt;, Room)</em> constructor.
            </summary>
        </member>
        <member name="M:Sfs2X.Requests.SetRoomVariablesRequest.Validate(Sfs2X.SmartFox)">
            <exclude/>
        </member>
        <member name="M:Sfs2X.Requests.SetRoomVariablesRequest.Execute(Sfs2X.SmartFox)">
            <exclude/>
        </member>
        <member name="T:Sfs2X.Requests.SetUserVariablesRequest">
            <summary>
            Sets one or more custom User Variables for the current user.
            </summary>
            
            <remarks>
            When a User Variable is set, the <see cref="F:Sfs2X.Core.SFSEvent.USER_VARIABLES_UPDATE"/> event is dispatched to all the users in all the Rooms joined by the current user, including himself.
            <para/>
            <b>NOTE</b>: the <see cref="F:Sfs2X.Core.SFSEvent.USER_VARIABLES_UPDATE"/> event is dispatched to users in a specific Room
            only if it is configured to allow this event (see the <see cref="P:Sfs2X.Requests.RoomSettings.Permissions">RoomSettings.Permissions</see> parameter).
            </remarks>
            
            <example>
            The following example sets a number of User Variables and handles the respective update event:
            <code>
            void SomeMethod() {
            	sfs.AddEventListener(SFSEvent.USER_VARIABLES_UPDATE, OnUserVarsUpdate);
            	
            	// Create some User Variables
            	List&lt;UserVariable&gt; userVars = new List&lt;UserVariable&gt;();
            	userVars.Add( new SFSUserVariable("avatarType", "SwedishCook") );
            	userVars.Add( new SFSUserVariable("country", "Sweden") );
            	userVars.Add( new SFSUserVariable("x", 10) );
            	userVars.Add( new SFSUserVariable("y", 5) );
            
            	sfs.Send( new SetUserVariablesRequest(userVars) );
            }
            
            void OnUserVarsUpdate(BaseEvent evt) {
            	List&lt;String&gt; changedVars = (List&lt;String&gt;)evt.Params["changedVars"];
            	User user = (User)evt.Params["user"];
            	
            	// Check if the user changed his x and y User Variables
            	if (changedVars.Contains("x") || changedVars.Contains("y"))
            	{
            		// Move the character to a new position...
            		UpdateClientPosition(user);
            	}
            }
            </code>
            </example>
            
            <seealso cref="F:Sfs2X.Core.SFSEvent.USER_VARIABLES_UPDATE"/>
            <seealso cref="T:Sfs2X.Entities.Variables.SFSUserVariable"/>
        </member>
        <member name="F:Sfs2X.Requests.SetUserVariablesRequest.KEY_USER">
            <exclude/>
        </member>
        <member name="F:Sfs2X.Requests.SetUserVariablesRequest.KEY_VAR_LIST">
            <exclude/>
        </member>
        <member name="M:Sfs2X.Requests.SetUserVariablesRequest.#ctor(System.Collections.Generic.ICollection{Sfs2X.Entities.Variables.UserVariable})">
            <summary>
            Creates a new SetUserVariablesRequest instance.
            </summary>
            
            <remarks>
            The instance must be passed to the <see cref="M:Sfs2X.SmartFox.Send(Sfs2X.Requests.IRequest)">SmartFox.Send</see> method for the request to be performed.
            </remarks>
            
            <param name="userVariables">A collection of objects representing the User Variables to be set.</param>
        </member>
        <member name="M:Sfs2X.Requests.SetUserVariablesRequest.Validate(Sfs2X.SmartFox)">
            <exclude/>
        </member>
        <member name="M:Sfs2X.Requests.SetUserVariablesRequest.Execute(Sfs2X.SmartFox)">
            <exclude/>
        </member>
        <member name="T:Sfs2X.Requests.SpectatorToPlayerRequest">
            <summary>
            Turns the current user from spectator to player in a Game Room.
            </summary>
            
            <remarks>
            If the operation is successful, all the users in the target Room are notified with the <see cref="F:Sfs2X.Core.SFSEvent.SPECTATOR_TO_PLAYER"/> event.
            The operation could fail if no player slots are available in the Game Room at the time of the request;
            in this case the <see cref="F:Sfs2X.Core.SFSEvent.SPECTATOR_TO_PLAYER_ERROR"/> event is dispatched to the requester's client.
            </remarks>
            
            <example>
            The following example turns the current user from spectator to player in the last joined Game Room:
            <code>
            void SomeMethod() {
            	sfs.AddEventListener(SFSEvent.SPECTATOR_TO_PLAYER, OnSpectatorToPlayerSwitch);
            	sfs.AddEventListener(SFSEvent.SPECTATOR_TO_PLAYER_ERROR, OnSpectatorToPlayerSwitchError);
            	
            	// Switch spectator to player
            	sfs.Send( new PlayerToSpectatorRequest() );
            }
            
            void OnSpectatorToPlayerSwitch(BaseEvent evt) {
            	User user = (User)evt.Params["user"];
            	Console.WriteLine("Spectator " + user.Name + " is now a player");                           // .Net / Unity
            	System.Diagnostics.Debug.WriteLine("Spectator " + user.Name + " is now a player");          // UWP
            }
            
            void OnSpectatorToPlayerSwitchError(BaseEvent evt) {
            	Console.WriteLine("Unable to become a player due to the following error: " + (string)evt.Params["errorMessage"]);                       // .Net / Unity
            	System.Diagnostics.Debug.WriteLine("Unable to become a player due to the following error: " + (string)evt.Params["errorMessage"]);      // UWP
            }
            </code>
            </example>
            
            <seealso cref="F:Sfs2X.Core.SFSEvent.SPECTATOR_TO_PLAYER"/>
            <seealso cref="F:Sfs2X.Core.SFSEvent.SPECTATOR_TO_PLAYER_ERROR"/>
            <seealso cref="T:Sfs2X.Requests.PlayerToSpectatorRequest"/>
        </member>
        <member name="F:Sfs2X.Requests.SpectatorToPlayerRequest.KEY_ROOM_ID">
            <exclude/>
        </member>
        <member name="F:Sfs2X.Requests.SpectatorToPlayerRequest.KEY_USER_ID">
            <exclude/>
        </member>
        <member name="F:Sfs2X.Requests.SpectatorToPlayerRequest.KEY_PLAYER_ID">
            <exclude/>
        </member>
        <member name="M:Sfs2X.Requests.SpectatorToPlayerRequest.#ctor(Sfs2X.Entities.Room)">
            <summary>
            Creates a new SpectatorToPlayerRequest instance.
            </summary>
            
            <remarks>
            The instance must be passed to the <see cref="M:Sfs2X.SmartFox.Send(Sfs2X.Requests.IRequest)">SmartFox.Send</see> method for the request to be performed.
            </remarks>
            
            <param name="targetRoom">The object corresponding to the Room in which the spectator should be turned to player. If <c>null</c>, the last Room joined by the user is used (default = <c>null</c>).</param>
        </member>
        <member name="M:Sfs2X.Requests.SpectatorToPlayerRequest.#ctor">
            <summary>
            See <em>SpectatorToPlayerRequest(Room)</em> constructor.
            </summary>
        </member>
        <member name="M:Sfs2X.Requests.SpectatorToPlayerRequest.Validate(Sfs2X.SmartFox)">
            <exclude/>
        </member>
        <member name="M:Sfs2X.Requests.SpectatorToPlayerRequest.Execute(Sfs2X.SmartFox)">
            <exclude/>
        </member>
        <member name="T:Sfs2X.Requests.SubscribeRoomGroupRequest">
            <summary>
            Subscribes the current user to Room-related events occurring in the specified Group.
            </summary>
            
            <remarks>
            This allows the user to be notified of specific Room events even if he didn't join the Room from which the events originated, provided the Room belongs to the subscribed Group.
            <para/>
            If the subscription operation is successful, the current user receives a <see cref="F:Sfs2X.Core.SFSEvent.ROOM_GROUP_SUBSCRIBE"/> event; otherwise the <see cref="F:Sfs2X.Core.SFSEvent.ROOM_GROUP_SUBSCRIBE_ERROR"/> event is fired.
            </remarks>
            
            <example>
            The following example makes the current user subscribe a Group:
            <code>
            void SomeMethod() {
            	sfs.AddEventListener(SFSEvent.ROOM_GROUP_SUBSCRIBE, OnSubscribeRoomGroup);
            	sfs.AddEventListener(SFSEvent.ROOM_GROUP_SUBSCRIBE_ERROR, OnSubscribeRoomGroupError);
            	
            	// Subscribe the "card_games" group
            	sfs.Send( new SubscribeRoomGroupRequest("card_games") );
            }
            
            void OnSubscribeRoomGroup(BaseEvent evt) {
            	Console.WriteLine("Group subscribed. The following rooms are now accessible: " + (List&lt;Room&gt;)evt.Params["newRooms"]);                         // .Net / Unity
            	System.Diagnostics.Debug.WriteLine("Group subscribed. The following rooms are now accessible: " + (List&lt;Room&gt;)evt.Params["newRooms"]);        // UWP
            }
            
            void OnSubscribeRoomGroupError(BaseEvent evt) {
            	Console.WriteLine("Group subscription failed: " + (string)evt.Params["errorMessage"]);                          // .Net / Unity
            	System.Diagnostics.Debug.WriteLine("Group subscription failed: " + (string)evt.Params["errorMessage"]);         // UWP
            }
            </code>
            </example>
            
            <seealso cref="F:Sfs2X.Core.SFSEvent.ROOM_GROUP_SUBSCRIBE"/>
            <seealso cref="F:Sfs2X.Core.SFSEvent.ROOM_GROUP_SUBSCRIBE_ERROR"/>
            <seealso cref="T:Sfs2X.Requests.UnsubscribeRoomGroupRequest"/>
        </member>
        <member name="F:Sfs2X.Requests.SubscribeRoomGroupRequest.KEY_GROUP_ID">
            <exclude/>
        </member>
        <member name="F:Sfs2X.Requests.SubscribeRoomGroupRequest.KEY_ROOM_LIST">
            <exclude/>
        </member>
        <member name="M:Sfs2X.Requests.SubscribeRoomGroupRequest.#ctor(System.String)">
            <summary>
            Creates a new SubscribeRoomGroupRequest instance.
            </summary>
            
            <remarks>
            The instance must be passed to the <see cref="M:Sfs2X.SmartFox.Send(Sfs2X.Requests.IRequest)">SmartFox.Send</see> method for the request to be performed.
            </remarks>
            
            <param name="groupId">The name of the Room Group to subscribe.</param>
        </member>
        <member name="M:Sfs2X.Requests.SubscribeRoomGroupRequest.Validate(Sfs2X.SmartFox)">
            <exclude/>
        </member>
        <member name="M:Sfs2X.Requests.SubscribeRoomGroupRequest.Execute(Sfs2X.SmartFox)">
            <exclude/>
        </member>
        <member name="T:Sfs2X.Requests.UnsubscribeRoomGroupRequest">
            <summary>
            Unsubscribes the current user to Room-related events occurring in the specified Group. 
            </summary>
            
            <remarks>
            This allows the user to stop being notified of specific Room events occurring in Rooms belonging to the unsubscribed Group.
            <para/>
            If the operation is successful, the current user receives a <see cref="F:Sfs2X.Core.SFSEvent.ROOM_GROUP_UNSUBSCRIBE"/> event; otherwise the <see cref="F:Sfs2X.Core.SFSEvent.ROOM_GROUP_UNSUBSCRIBE_ERROR"/> event is fired.
            </remarks>
            
            <example>
            The following example makes the current user unsubscribe a Group:
            <code>
            void SomeMethod() {
            	sfs.AddEventListener(SFSEvent.ROOM_GROUP_UNSUBSCRIBE, OnUnsubscribeRoomGroup);
            	sfs.AddEventListener(SFSEvent.ROOM_GROUP_UNSUBSCRIBE_ERROR, OnUnsubscribeRoomGroupError);
            	
            	// Unsubscribe the "card_games" group
            	sfs.Send( new UnsubscribeRoomGroupRequest("card_games") );
            }
            
            void OnUnsubscribeRoomGroup(BaseEvent evt) {
            	Console.WriteLine("Group unsubscribed: " + (string)evt.Params["groupId"]);                          // .Net / Unity
            	System.Diagnostics.Debug.WriteLine("Group unsubscribed: " + (string)evt.Params["groupId"]);         // UWP
            }
            
            void OnUnsubscribeRoomGroupError(BaseEvent evt) {
            	Console.WriteLine("Group unsubscribing failed: " + (string)evt.Params["errorMessage"]);                         // .Net / Unity
            	System.Diagnostics.Debug.WriteLine("Group unsubscribing failed: " + (string)evt.Params["errorMessage"]);        // UWP
            }
            </code>
            </example>
            
            <seealso cref="F:Sfs2X.Core.SFSEvent.ROOM_GROUP_UNSUBSCRIBE"/>
            <seealso cref="F:Sfs2X.Core.SFSEvent.ROOM_GROUP_UNSUBSCRIBE_ERROR"/>
            <seealso cref="T:Sfs2X.Requests.SubscribeRoomGroupRequest"/>
        </member>
        <member name="F:Sfs2X.Requests.UnsubscribeRoomGroupRequest.KEY_GROUP_ID">
            <exclude/>
        </member>
        <member name="M:Sfs2X.Requests.UnsubscribeRoomGroupRequest.#ctor(System.String)">
            <summary>
            Creates a new UnsubscribeRoomGroupRequest instance.
            </summary>
            
            <remarks>
            The instance must be passed to the <see cref="M:Sfs2X.SmartFox.Send(Sfs2X.Requests.IRequest)">SmartFox.Send</see> method for the request to be performed.
            </remarks>
            
            <param name="groupId">The name of the Room Group to unsubscribe.</param>
        </member>
        <member name="M:Sfs2X.Requests.UnsubscribeRoomGroupRequest.Validate(Sfs2X.SmartFox)">
            <exclude/>
        </member>
        <member name="M:Sfs2X.Requests.UnsubscribeRoomGroupRequest.Execute(Sfs2X.SmartFox)">
            <exclude/>
        </member>
        <member name="T:Sfs2X.Requests.Buddylist.AddBuddyRequest">
            <summary>
            Adds a new buddy to the current user's buddies list.
            </summary>
            
            <remarks>
            In order to add a buddy, the current user must be online in the Buddy List system.
            If the buddy is added successfully, the operation is confirmed by a <see cref="F:Sfs2X.Core.SFSBuddyEvent.BUDDY_ADD"/> event;
            otherwise the <see cref="F:Sfs2X.Core.SFSBuddyEvent.BUDDY_ERROR"/> event is fired.
            <para/>
            This request can be sent if the Buddy List system was previously initialized only (see the <see cref="T:Sfs2X.Requests.Buddylist.InitBuddyListRequest"/> request description).
            </remarks>
            
            <example>
            The following example sends a request to add a buddy:
            <code>
            void SomeMethod() {
            	sfs.AddEventListener(SFSBuddyEvent.BUDDY_ADD, OnBuddyAdded);
            	sfs.AddEventListener(SFSBuddyEvent.BUDDY_ERROR, OnBuddyError);
            	
            	// Add Jack as a new buddy to my buddies list
            	sfs.Send(new AddBuddyRequest("Jack"));
            }
            
            void OnBuddyAdded(BaseEvent evt) {
            	Console.WriteLine("Buddy was added: " + (Buddy)evt.Params["buddy"]);                        // .Net / Unity
            	System.Diagnostics.Debug.WriteLine("Buddy was added: " + (Buddy)evt.Params["buddy"]);       // UWP
            }
            
            void OnBuddyError(BaseEvent evt) {
            	Console.WriteLine("The following error occurred while executing a buddy-related request: " + (string)evt.Params["errorMessage"]);                       // .Net / Unity
            	System.Diagnostics.Debug.WriteLine("The following error occurred while executing a buddy-related request: " + (string)evt.Params["errorMessage"]);      // UWP
            }
            </code>
            </example>
            
            <seealso cref="F:Sfs2X.Core.SFSBuddyEvent.BUDDY_ADD"/>
            <seealso cref="F:Sfs2X.Core.SFSBuddyEvent.BUDDY_ERROR"/>
            <seealso cref="T:Sfs2X.Requests.Buddylist.RemoveBuddyRequest"/>
        </member>
        <member name="F:Sfs2X.Requests.Buddylist.AddBuddyRequest.KEY_BUDDY_NAME">
            <exclude/>
        </member>
        <member name="M:Sfs2X.Requests.Buddylist.AddBuddyRequest.#ctor(System.String)">
            <summary>
            Creates a new AddBuddyRequest instance.
            </summary>
            
            <remarks>
            The instance must be passed to the <see cref="M:Sfs2X.SmartFox.Send(Sfs2X.Requests.IRequest)">SmartFox.Send</see> method for the request to be performed.
            </remarks>
            
            <param name="buddyName">The name of the user to be added as a buddy.</param>
        </member>
        <member name="M:Sfs2X.Requests.Buddylist.AddBuddyRequest.Validate(Sfs2X.SmartFox)">
            <exclude/>
        </member>
        <member name="M:Sfs2X.Requests.Buddylist.AddBuddyRequest.Execute(Sfs2X.SmartFox)">
            <exclude/>
        </member>
        <member name="T:Sfs2X.Requests.Buddylist.BlockBuddyRequest">
            <summary>
            Blocks or unblocks a buddy in the current user's buddies list. Blocked buddies won't be able to send messages or requests to that user.
            </summary>
            
            <remarks>
            In order to block a buddy, the current user must be online in the Buddy List system.
            If the operation is successful, a <see cref="F:Sfs2X.Core.SFSBuddyEvent.BUDDY_BLOCK"/> confirmation event is dispatched; otherwise the <see cref="F:Sfs2X.Core.SFSBuddyEvent.BUDDY_ERROR"/> event is fired.
            <para/>
            This request can be sent if the Buddy List system was previously initialized only (see the <see cref="T:Sfs2X.Requests.Buddylist.InitBuddyListRequest"/> request description).
            </remarks>
            
            <example>
            The following example sends a request to block a buddy:
            <code>
            void SomeMethod() {
            	sfs.AddEventListener(SFSBuddyEvent.BUDDY_BLOCK, onBuddyBlock);
            	sfs.AddEventListener(SFSBuddyEvent.BUDDY_ERROR, OnBuddyError);
            	
            	// Block Jack in my buddies list
            	sfs.Send(new BlockBuddyRequest("Jack", true));
            }
            
            void onBuddyBlock(BaseEvent evt) {
            	Buddy buddy = (Buddy)evt.Params["buddy"];
            	Console.WriteLine("Buddy " + buddy.Name + " is now " + (buddy.IsBlocked ? "blocked" : "unblocked"));                        // .Net / Unity
            	System.Diagnostics.Debug.WriteLine("Buddy " + buddy.Name + " is now " + (buddy.IsBlocked ? "blocked" : "unblocked"));       // UWP
            }
            
            void OnBuddyError(BaseEvent evt) {
            	Console.WriteLine("The following error occurred while executing a buddy-related request: " + (string)evt.Params["errorMessage"]);                       // .Net / Unity
            	System.Diagnostics.Debug.WriteLine("The following error occurred while executing a buddy-related request: " + (string)evt.Params["errorMessage"]);      // UWP
            }
            </code>
            </example>
            
            <seealso cref="F:Sfs2X.Core.SFSBuddyEvent.BUDDY_BLOCK"/>
            <seealso cref="F:Sfs2X.Core.SFSBuddyEvent.BUDDY_ERROR"/>
        </member>
        <member name="F:Sfs2X.Requests.Buddylist.BlockBuddyRequest.KEY_BUDDY_NAME">
            <exclude/>
        </member>
        <member name="F:Sfs2X.Requests.Buddylist.BlockBuddyRequest.KEY_BUDDY_BLOCK_STATE">
            <exclude/>
        </member>
        <member name="F:Sfs2X.Requests.Buddylist.BlockBuddyRequest.KEY_BUDDY">
            <exclude/>
        </member>
        <member name="M:Sfs2X.Requests.Buddylist.BlockBuddyRequest.#ctor(System.String,System.Boolean)">
            <summary>
            Creates a new BlockBuddyRequest instance.
            </summary>
            
            <remarks>
            The instance must be passed to the <see cref="M:Sfs2X.SmartFox.Send(Sfs2X.Requests.IRequest)">SmartFox.Send</see> method for the request to be performed.
            </remarks>
            
            <param name="buddyName">The name of the buddy to be blocked or unblocked.</param>
            <param name="blocked"><c>true</c> if the buddy must be blocked; <c>false</c> if he must be unblocked.</param>
        </member>
        <member name="M:Sfs2X.Requests.Buddylist.BlockBuddyRequest.Validate(Sfs2X.SmartFox)">
            <exclude/>
        </member>
        <member name="M:Sfs2X.Requests.Buddylist.BlockBuddyRequest.Execute(Sfs2X.SmartFox)">
            <exclude/>
        </member>
        <member name="T:Sfs2X.Requests.Buddylist.BuddyMessageRequest">
            <summary>
            Sends a message to a buddy in the current user's buddies list.
            </summary>
            
            <remarks>
            Messages sent to buddies using the <see cref="T:Sfs2X.Requests.Buddylist.BuddyMessageRequest"/> request are similar to the standard private messages (see the <see cref="T:Sfs2X.Requests.PrivateMessageRequest"/> request)
            but are specifically designed for the Buddy List system: they don't require any Room parameter, nor they require that users joined a Room.
            Additionally, buddy messages are subject to specific validation, such as making sure that the recipient is in the sender's buddies list and the sender is not blocked by the recipient.
            <para/>
            If the operation is successful, a <see cref="F:Sfs2X.Core.SFSBuddyEvent.BUDDY_MESSAGE"/> event is dispatched in both the sender and recipient clients.
            <para/>
            This request can be sent if the Buddy List system was previously initialized only (see the <see cref="T:Sfs2X.Requests.Buddylist.InitBuddyListRequest"/> request description).
            </remarks>
            
            <example>
            The following example sends a message to a buddy and handles the related event:
            <code>
            void SomeMethod() {
            	sfs.AddEventListener(SFSBuddyEvent.BUDDY_MESSAGE, OnBuddyMessage);
            	
            	// Obtain the recipient of the message
            	Buddy kermitTheFrog = sfs.BuddyListManager.GetBuddyByName("KermitTheFrog");
            	
            	// Block a buddy in the current buddy list
            	sfs.Send(new BuddyMessageRequest("Hello Kermit!", kermitTheFrog));
            }
            
            void OnBuddyMessage(BaseEvent evt) {
            	bool isItMe = (bool)evt.Params["isItMe"];
            	Buddy buddy = (Buddy)evt.Params["buddy"];
            	
            	if (isItMe)
            	{
            		Console.WriteLine("I said: " + (string)evt.Params["message"]);                      // .Net / Unity
            	    System.Diagnostics.Debug.WriteLine("I said: " + (string)evt.Params["message"]);     // UWP
            	}
            	else
            	{
            		Console.WriteLine(buddy.Name + " said: " + (string)evt.Params["message"]);                      // .Net / Unity
            	    System.Diagnostics.Debug.WriteLine(buddy.Name + " said: " + (string)evt.Params["message"]);     // UWP
            	}
            }
            </code>
            </example>
            
            <seealso cref="F:Sfs2X.Core.SFSBuddyEvent.BUDDY_MESSAGE"/>
        </member>
        <member name="M:Sfs2X.Requests.Buddylist.BuddyMessageRequest.#ctor(System.String,Sfs2X.Entities.Buddy,Sfs2X.Entities.Data.ISFSObject)">
            <summary>
            Creates a new BuddyMessageRequest instance.
            </summary>
            
            <remarks>
            The instance must be passed to the <see cref="M:Sfs2X.SmartFox.Send(Sfs2X.Requests.IRequest)">SmartFox.Send</see> method for the request to be performed.
            </remarks>
            
            <param name="message">The message to be sent to a buddy.</param>
            <param name="targetBuddy">The Buddy object corresponding to the message recipient.</param>
            <param name="parameters">An instance of <see cref="T:Sfs2X.Entities.Data.SFSObject"/> containing additional custom parameters (e.g. the message color, an emoticon id, etc). Default is <c>null</c>.</param>
        </member>
        <member name="M:Sfs2X.Requests.Buddylist.BuddyMessageRequest.#ctor(System.String,Sfs2X.Entities.Buddy)">
            <summary>
            See <em>BuddyMessageRequest(String, Buddy, ISFSObject)</em> constructor.
            </summary>
        </member>
        <member name="T:Sfs2X.Requests.Buddylist.GoOnlineRequest">
            <summary>
            Toggles the current user's online/offline state as buddy in other users' buddies lists.
            </summary>
            
            <remarks>
            All clients who have the current user as buddy in their buddies list will receive the <see cref="F:Sfs2X.Core.SFSBuddyEvent.BUDDY_ONLINE_STATE_UPDATE"/> event and see the <see cref="P:Sfs2X.Entities.Buddy.IsOnline"/> property change accordingly.
            The same event is also dispatched to the current user, who sent the request, so that the application interface can be updated accordingly. Going online/offline as buddy doesn't affect the user connection, the currently joined Zone and Rooms, etc.
            <para/>
            The online state of a user in a buddy list is handled by means of a reserved and persistent Buddy Variable.
            <para/>
            This request can be sent if the Buddy List system was previously initialized only (see the <see cref="T:Sfs2X.Requests.Buddylist.InitBuddyListRequest"/> request description).
            </remarks>
            
            <example>
            The following example changes the user online state in the Buddy List system:
            <code>
            void SomeMethod() {
            	sfs.AddEventListener(SFSBuddyEvent.BUDDY_ONLINE_STATE_UPDATE, OnBuddyOnlineStateUpdate);
            	
            	// Put myself offline in the Buddy List system
            	sfs.Send(new GoOnlineRequest(false));
            }
            
            void OnBuddyOnlineStateUpdate(BaseEvent evt) {
            	
            	// As the state change event is dispatched to me too,
                // I have to check if I am the one who changed his state
            	bool isItMe = (bool)evt.Params["isItMe"];
            	Buddy buddy = (Buddy)evt.Params["buddy"];
            	
            	if (isItMe)
            	{
            		Console.WriteLine("I'm now " + (sfs.BuddyManager.MyOnlineState ? "online" : "offline"));                        // .Net / Unity
            	    System.Diagnostics.Debug.WriteLine("I'm now " + (sfs.BuddyManager.MyOnlineState ? "online" : "offline"));       // UWP
                }
            	else
            	{
            		Console.WriteLine("My buddy " + buddy.Name + " is now", (buddy.IsOnline ? "online" : "offline"));                       // .Net / Unity
            	    System.Diagnostics.Debug.WriteLine("My buddy " + buddy.Name + " is now", (buddy.IsOnline ? "online" : "offline"));      // UWP
                }
            }
            </code>
            </example>
            
            <seealso cref="F:Sfs2X.Core.SFSBuddyEvent.BUDDY_ONLINE_STATE_UPDATE"/>
            <seealso cref="P:Sfs2X.Entities.Buddy.IsOnline"/>
            <seealso cref="P:Sfs2X.Entities.Managers.IBuddyManager.MyOnlineState"/>
            <seealso cref="T:Sfs2X.Entities.Variables.ReservedBuddyVariables"/>
        </member>
        <member name="F:Sfs2X.Requests.Buddylist.GoOnlineRequest.KEY_ONLINE">
            <exclude/>
        </member>
        <member name="F:Sfs2X.Requests.Buddylist.GoOnlineRequest.KEY_BUDDY_NAME">
            <exclude/>
        </member>
        <member name="F:Sfs2X.Requests.Buddylist.GoOnlineRequest.KEY_BUDDY_ID">
            <exclude/>
        </member>
        <member name="M:Sfs2X.Requests.Buddylist.GoOnlineRequest.#ctor(System.Boolean)">
            <summary>
            Creates a new GoOnlineRequest instance.
            </summary>
            
            <remarks>
            The instance must be passed to the <see cref="M:Sfs2X.SmartFox.Send(Sfs2X.Requests.IRequest)">SmartFox.Send</see> method for the request to be performed.
            </remarks>
            
            <param name="online"><c>true</c> to make the current user available (online) in the Buddy List system; <c>false</c> to make him not available (offline).</param>
        </member>
        <member name="M:Sfs2X.Requests.Buddylist.GoOnlineRequest.Validate(Sfs2X.SmartFox)">
            <exclude/>
        </member>
        <member name="M:Sfs2X.Requests.Buddylist.GoOnlineRequest.Execute(Sfs2X.SmartFox)">
            <exclude/>
        </member>
        <member name="T:Sfs2X.Requests.Buddylist.InitBuddyListRequest">
            <summary>
            Initializes the Buddy List system on the current client.
            </summary>
            
            <remarks>
            Buddy List system initialization involves loading any previously stored buddy-specific data from the server, such as the current user's buddies list,
            his previous state and the persistent Buddy Variables. The initialization request is <b>the first operation to be executed</b> in order to be able
            to use the Buddy List system features. Once the initialization is completed, the <see cref="F:Sfs2X.Core.SFSBuddyEvent.BUDDY_LIST_INIT"/> event id fired
            and the user has access to all his previously set data and can start to interact with his buddies; if the initialization failed, a <see cref="F:Sfs2X.Core.SFSBuddyEvent.BUDDY_ERROR"/> event id fired.
            </remarks>
            
            <example>
            The following example initializes the Buddy List system:
            <code>
            void SomeMethod() {
            	sfs.AddEventListener(SFSBuddyEvent.BUDDY_LIST_INIT, OnBuddyInited);
            	sfs.AddEventListener(SFSBuddyEvent.BUDDY_ERROR, OnBuddyError);
            	
            	// Initialize the Buddy List system
            	sfs.Send(new InitBuddyListRequest());
            }
            
            void OnBuddyInited(BaseEvent evt) {
            	Console.WriteLine("Buddy List system initialized successfully");                        // .Net / Unity
            	System.Diagnostics.Debug.WriteLine("Buddy List system initialized successfully");       // UWP
            	
            	// Retrieve my buddies list
            	List&lt;Buddy&gt; buddies = sfs.BuddyManager.BuddyList;
            	
            	// Display the online buddies in a list component in the application interface
            	...
            }
            
            void OnBuddyError(BaseEvent evt) {
            	Console.WriteLine("The following error occurred while executing a buddy-related request: " + (string)evt.Params["errorMessage"]);                       // .Net / Unity
            	System.Diagnostics.Debug.WriteLine("The following error occurred while executing a buddy-related request: " + (string)evt.Params["errorMessage"]);      // UWP
            }
            </code>
            </example>
            
            <seealso cref="F:Sfs2X.Core.SFSBuddyEvent.BUDDY_LIST_INIT"/>
            <seealso cref="F:Sfs2X.Core.SFSBuddyEvent.BUDDY_ERROR"/>
        </member>
        <member name="F:Sfs2X.Requests.Buddylist.InitBuddyListRequest.KEY_BLIST">
            <exclude/>
        </member>
        <member name="F:Sfs2X.Requests.Buddylist.InitBuddyListRequest.KEY_BUDDY_STATES">
            <exclude/>
        </member>
        <member name="F:Sfs2X.Requests.Buddylist.InitBuddyListRequest.KEY_MY_VARS">
            <exclude/>
        </member>
        <member name="M:Sfs2X.Requests.Buddylist.InitBuddyListRequest.#ctor">
            <summary>
            Creates a new InitBuddyListRequest instance.
            </summary>
            
            <remarks>
            The instance must be passed to the <see cref="M:Sfs2X.SmartFox.Send(Sfs2X.Requests.IRequest)">SmartFox.Send</see> method for the request to be performed.
            </remarks>
        </member>
        <member name="M:Sfs2X.Requests.Buddylist.InitBuddyListRequest.Validate(Sfs2X.SmartFox)">
            <exclude/>
        </member>
        <member name="M:Sfs2X.Requests.Buddylist.InitBuddyListRequest.Execute(Sfs2X.SmartFox)">
            <exclude/>
        </member>
        <member name="T:Sfs2X.Requests.Buddylist.RemoveBuddyRequest">
            <summary>
            Removes a buddy from the current user's buddies list.
            </summary>
            
            <remarks>
            In order to remove a buddy, the current user must be online in the Buddy List system. If the buddy is removed successfully,
            the operation is confirmed by a <see cref="F:Sfs2X.Core.SFSBuddyEvent.BUDDY_REMOVE"/> event; otherwise the <see cref="F:Sfs2X.Core.SFSBuddyEvent.BUDDY_ERROR"/> event is fired.
            <para/>
            This request can be sent if the Buddy List system was previously initialized only (see the <see cref="T:Sfs2X.Requests.Buddylist.InitBuddyListRequest"/> request description).
            </remarks>
            
            <example>
            The following example sends a request to remove a buddy:
            <code>
            void SomeMethod() {
            	sfs.AddEventListener(SFSBuddyEvent.BUDDY_REMOVE, OnBuddyRemoved);
            	sfs.AddEventListener(SFSBuddyEvent.BUDDY_ERROR, OnBuddyError);
            	
            	// Remove Jack from my buddies list
            	sfs.Send(new RemoveBuddyRequest("Jack"));
            }
            
            void OnBuddyRemoved(BaseEvent evt) {
            	Console.WriteLine("This buddy was removed: " + (Buddy)evt.Params["buddy"]);                         // .Net / Unity
            	System.Diagnostics.Debug.WriteLine("This buddy was removed: " + (Buddy)evt.Params["buddy"]);        // UWP
            }
            
            void OnBuddyError(BaseEvent evt) {
            	Console.WriteLine("The following error occurred while executing a buddy-related request: " + (string)evt.Params["errorMessage"]);                           // .Net / Unity
            	System.Diagnostics.Debug.WriteLine("The following error occurred while executing a buddy-related request: " + (string)evt.Params["errorMessage"]);          // UWP
            }
            </code>
            </example>
            
            <seealso cref="F:Sfs2X.Core.SFSBuddyEvent.BUDDY_REMOVE"/>
            <seealso cref="F:Sfs2X.Core.SFSBuddyEvent.BUDDY_ERROR"/>
            <seealso cref="T:Sfs2X.Requests.Buddylist.AddBuddyRequest"/>
        </member>
        <member name="F:Sfs2X.Requests.Buddylist.RemoveBuddyRequest.KEY_BUDDY_NAME">
            <exclude/>
        </member>
        <member name="M:Sfs2X.Requests.Buddylist.RemoveBuddyRequest.#ctor(System.String)">
            <summary>
            Creates a new RemoveBuddyRequest instance.
            </summary>
            
            <remarks>
            The instance must be passed to the <see cref="M:Sfs2X.SmartFox.Send(Sfs2X.Requests.IRequest)">SmartFox.Send</see> method for the request to be performed.
            </remarks>
            
            <param name="buddyName">The name of the buddy to be removed from the user's buddies list.</param>
        </member>
        <member name="M:Sfs2X.Requests.Buddylist.RemoveBuddyRequest.Validate(Sfs2X.SmartFox)">
            <exclude/>
        </member>
        <member name="M:Sfs2X.Requests.Buddylist.RemoveBuddyRequest.Execute(Sfs2X.SmartFox)">
            <exclude/>
        </member>
        <member name="T:Sfs2X.Requests.Buddylist.SetBuddyVariablesRequest">
            <summary>
            Sets one or more Buddy Variables for the current user.
            </summary>
            
            <remarks>
            This operation updates the Buddy object representing the user in all the buddies lists in which the user was added as a buddy.
            If the operation is successful, a <see cref="F:Sfs2X.Core.SFSBuddyEvent.BUDDY_VARIABLES_UPDATE"/> event is dispatched to all the
            owners of those buddies lists and to the user who updated his variables too.
            <para/>
            The Buddy Variables can be persisted, which means that their value will be saved even it the user disconnects and it will be restored when he connects again.
            In order to make a variable persistent, put the constant <see cref="F:Sfs2X.Entities.Variables.SFSBuddyVariable.OFFLINE_PREFIX">SFSBuddyVariable.OFFLINE_PREFIX</see> before its name.
            Read the SmartFoxServer 2X documentaion about the Buddy List API for more informations.
            <para/>
            This request can be sent if the Buddy List system was previously initialized only (see the <see cref="T:Sfs2X.Requests.Buddylist.InitBuddyListRequest"/> request description) and the current user state in the system is "online".
            </remarks>
            
            <example>
            The following example sets some Buddy Variables for the current user, one of which is persistent; the example also handles changes made by the user or by his buddies:
            <code>
            void SomeMethod() {
            	// Add event listener for BuddyVariables
            	sfs.AddEventListener(SFSBuddyEvent.BUDDY_VARIABLES_UPDATE, OnBuddyVarsUpdate);
            	
            	// Create two Buddy Variables containing the title and artist of the song I'm listening to
            	BuddyVariable songTitle = new SFSBuddyVariable("songTitle", "Ascension");
            	BuddyVariable songAuthor = new SFSBuddyVariable("songAuthor", "Mike Oldfield");
            	
            	// Create a persistent Buddy Variable containing my mood message
            	BuddyVariable mood = new SFSBuddyVariable(SFSBuddyVariable.OFFLINE_PREFIX + "mood", "I Need SmartFoxServer 2X desperately!");
            	
            	// Set my Buddy Variables
            	List&lt;BuddyVariable&gt; myVars = new List&lt;BuddyVariable&gt;();
            	myVars.Add(songTitle);
            	myVars.Add(songAuthor);
            	myVars.Add(mood);
            	sfs.Send(new SetBuddyVariablesRequest(myVars));
            }
            
            void OnBuddyVarsUpdate(BaseEvent evt) {
            	// As the update event is dispatched to me too,
            	// I have to check if I am the one who changed his Buddy Variables
            	
            	Buddy buddy = (Buddy)evt.Params["buddy"]);
            	bool isItMe = (bool)evt.Params["isItMe"];
            	List&lt;string&gt; changedVars = (List&lt;string&gt;)evt.Params["changedVars"];
            	
            	if (isItMe)
            	{
            	    Console.WriteLine("I've updated the following Buddy Variables:");                       // .Net / Unity
            	    System.Diagnostics.Debug.WriteLine("I've updated the following Buddy Variables:");      // UWP
            	    
            	    for (int i = 0; i &lt; changedVars.Count; i++)
            	    {
            	        string bVarName = changedVars[i];
            	        Console.WriteLine(bVarName + ": " + sfs.BuddyManager.GetMyVariable(bVarName).Value());                      // .Net / Unity
            	        System.Diagnostics.Debug.WriteLine(bVarName + ": " + sfs.BuddyManager.GetMyVariable(bVarName).Value());     // UWP
            	    }
            	}
            	else
            	{
            	    string buddyName = buddy.Name;
            	    
            	    Console.WriteLine("My buddy " + buddyName + " updated the following Buddy Variables:");                     // .Net / Unity
            	    System.Diagnostics.Debug.WriteLine("My buddy " + buddyName + " updated the following Buddy Variables:");    // UWP
            	    
            	    for (int i = 0; i &lt; changedVars.Count; i++)
            	    {
            	        var bVarName:String = changedVars[i];
            	        Console.WriteLine(bVarName + ": " + sfs.BuddyManager.GetBuddyByName(buddyName).GetVariable(bVarName).Value());                      // .Net / Unity
            	        System.Diagnostics.Debug.WriteLine(bVarName + ": " + sfs.BuddyManager.GetBuddyByName(buddyName).GetVariable(bVarName).Value());     // UWP
            	    }
            	}
            }
            </code>
            </example>
            
            <seealso cref="F:Sfs2X.Core.SFSBuddyEvent.BUDDY_VARIABLES_UPDATE"/>
            <seealso cref="T:Sfs2X.Entities.Variables.SFSBuddyVariable"/>
        </member>
        <member name="F:Sfs2X.Requests.Buddylist.SetBuddyVariablesRequest.KEY_BUDDY_NAME">
            <exclude/>
        </member>
        <member name="F:Sfs2X.Requests.Buddylist.SetBuddyVariablesRequest.KEY_BUDDY_VARS">
            <exclude/>
        </member>
        <member name="M:Sfs2X.Requests.Buddylist.SetBuddyVariablesRequest.#ctor(System.Collections.Generic.List{Sfs2X.Entities.Variables.BuddyVariable})">
            <summary>
            Creates a new SetBuddyVariablesRequest instance.
            </summary>
            
            <remarks>
            The instance must be passed to the <see cref="M:Sfs2X.SmartFox.Send(Sfs2X.Requests.IRequest)">SmartFox.Send</see> method for the request to be performed.
            </remarks>
            
            <param name="buddyVariables">A list of objects representing the Buddy Variables to be set.</param>
        </member>
        <member name="M:Sfs2X.Requests.Buddylist.SetBuddyVariablesRequest.Validate(Sfs2X.SmartFox)">
            <exclude/>
        </member>
        <member name="M:Sfs2X.Requests.Buddylist.SetBuddyVariablesRequest.Execute(Sfs2X.SmartFox)">
            <exclude/>
        </member>
        <member name="T:Sfs2X.Requests.Game.CreateSFSGameRequest">
            <summary>
            Creates a new public or private game, including player matching criteria, invitations settings and more.
            </summary>
            
            <remarks>
            A game is created through the istantiation of a <em>SFSGame</em> on the server-side, a specialized Room type that provides advanced features during the creation phase of a game.
            Specific game-configuration settings are passed by means of the <see cref="T:Sfs2X.Requests.Game.SFSGameSettings"/> class.
            <para/>
            If the creation is successful, a <see cref="F:Sfs2X.Core.SFSEvent.ROOM_ADD"/> event is dispatched to all the users who subscribed the Group to which the Room is associated,
            including the game creator. Otherwise, a <see cref="F:Sfs2X.Core.SFSEvent.ROOM_CREATION_ERROR"/> event is returned to the creator's client.
            <para/>
            Also, if the settings passed in the <see cref="T:Sfs2X.Requests.Game.SFSGameSettings"/> object cause invitations to join the game to be sent, an invitation event is dispatched to all the recipient clients.
            <para/>
            Check the SmartFoxServer 2X documentation for a more in-depth overview of the GAME API.
            </remarks>
            
            <example>
            The following example creates a new game:
            <code>
            void SomeMethod() {
            	sfs.AddEventListener(SFSEvent.ROOM_ADD, OnRoomCreated);
            	sfs.AddEventListener(SFSEvent.ROOM_CREATION_ERROR, OnRoomError);
            	
            	// Prepare the settings for a public game
            	SFSGameSettings settings = new SFSGameSettings("DartsGame");
            	settings.MaxUsers = 2;
            	settings.MaxSpectators = 8;
            	settings.IsPublic = true;
            	settings.MinPlayersToStartGame = 2;
            	settings.NotifyGameStarted = true;
            	
            	// Set the matching expression to filter users joining the Room
            	settings.PlayerMatchExpression = new MatchExpression("bestScore", NumberMatch.GREATER_THAN, 100);
            	
            	// Set a Room Variable containing the description of the game
            	List&lt;RoomVariable&gt; roomVars = new List&lt;RoomVariable&gt;();
            	roomVars.Add(new SFSRoomVariable("desc", "Darts game, public, bestScore > 100"));
            	settings.variables = roomVars;
            	
            	// Create the game
            	smartFox.Send( new CreateSFSGameRequest(settings) );
            }
            
            void OnRoomCreated(BaseEvent evt) {
            	Console.WriteLine("Room created: " + (Room)evt.Params["room"]);                         // .Net / Unity
            	System.Diagnostics.Debug.WriteLine("Room created: " + (Room)evt.Params["room"]);        // UWP
            }
            
            void OnRoomError(BaseEvent evt) {
            	Console.WriteLine("Room creation failed: " + (string)evt.Params["errorMessage"]);                           // .Net / Unity
            	System.Diagnostics.Debug.WriteLine("Room creation failed: " + (string)evt.Params["errorMessage"]);          // UWP
            }
            </code>
            </example>
            
            <seealso cref="F:Sfs2X.Core.SFSEvent.ROOM_ADD"/>
            <seealso cref="F:Sfs2X.Core.SFSEvent.ROOM_CREATION_ERROR"/>
            <seealso cref="F:Sfs2X.Core.SFSEvent.INVITATION"/>
        </member>
        <member name="F:Sfs2X.Requests.Game.CreateSFSGameRequest.KEY_IS_PUBLIC">
            <exclude/>
        </member>
        <member name="F:Sfs2X.Requests.Game.CreateSFSGameRequest.KEY_MIN_PLAYERS">
            <exclude/>
        </member>
        <member name="F:Sfs2X.Requests.Game.CreateSFSGameRequest.KEY_INVITED_PLAYERS">
            <exclude/>
        </member>
        <member name="F:Sfs2X.Requests.Game.CreateSFSGameRequest.KEY_SEARCHABLE_ROOMS">
            <exclude/>
        </member>
        <member name="F:Sfs2X.Requests.Game.CreateSFSGameRequest.KEY_PLAYER_MATCH_EXP">
            <exclude/>
        </member>
        <member name="F:Sfs2X.Requests.Game.CreateSFSGameRequest.KEY_SPECTATOR_MATCH_EXP">
            <exclude/>
        </member>
        <member name="F:Sfs2X.Requests.Game.CreateSFSGameRequest.KEY_INVITATION_EXPIRY">
            <exclude/>
        </member>
        <member name="F:Sfs2X.Requests.Game.CreateSFSGameRequest.KEY_LEAVE_ROOM">
            <exclude/>
        </member>
        <member name="F:Sfs2X.Requests.Game.CreateSFSGameRequest.KEY_NOTIFY_GAME_STARTED">
            <exclude/>
        </member>
        <member name="F:Sfs2X.Requests.Game.CreateSFSGameRequest.KEY_INVITATION_PARAMS">
            <exclude/>
        </member>
        <member name="M:Sfs2X.Requests.Game.CreateSFSGameRequest.#ctor(Sfs2X.Requests.Game.SFSGameSettings)">
            <summary>
            Creates a new CreateSFSGameRequest instance.
            </summary>
            
            <remarks>
            The instance must be passed to the <see cref="M:Sfs2X.SmartFox.Send(Sfs2X.Requests.IRequest)">SmartFox.Send</see> method for the request to be performed.
            </remarks>
            
            <param name="settings">An object containing the SFSGame configuration settings.</param>
            
            <seealso cref="T:Sfs2X.Requests.Game.SFSGameSettings"/>
        </member>
        <member name="M:Sfs2X.Requests.Game.CreateSFSGameRequest.Validate(Sfs2X.SmartFox)">
            <exclude/>
        </member>
        <member name="M:Sfs2X.Requests.Game.CreateSFSGameRequest.Execute(Sfs2X.SmartFox)">
            <exclude/>
        </member>
        <member name="T:Sfs2X.Requests.Game.InvitationReplyRequest">
            <summary>
            Replies to an invitation received by the current user.
            </summary>
            
            <remarks>
            Users who receive an invitation sent by means of the <see cref="T:Sfs2X.Requests.Game.InviteUsersRequest"/> request can either accept or refuse it using this request.
            The reply causes an <see cref="F:Sfs2X.Core.SFSEvent.INVITATION_REPLY"/> event to be dispatched to the inviter; if a reply is not sent, or it is sent after the invitation expiration,
            the system will react as if the invitation was refused.
            <para/>
            If an error occurs while the reply is delivered to the inviter user (for example the invitation is already expired), an <see cref="F:Sfs2X.Core.SFSEvent.INVITATION_REPLY_ERROR"/> event is returned to the current user.
            </remarks>
            
            <example>
            The following example receives an invitation and accepts it automatically; in a real case scenario, the application interface usually allows the user choosing to accept or refuse the invitation, or even ignore it:
            <code>
            void SomeMethod() {
            	sfs.AddEventListener(SFSEvent.INVITATION, OnInvitationReceived);
            	sfs.AddEventListener(SFSEvent.INVITATION_REPLY_ERROR, OnInvitationReplyError);
            }
            
            void OnInvitationReceived(BaseEvent evt) {
            	// Let's accept this invitation
            	sfs.Send( new InvitationReplyRequest((Invitation)evt.Params["invitation"], InvitationReply.ACCEPT) );
            }
            
            void OnInvitationReplyError(BaseEvent evt) {
            	Console.WriteLine("Failed to reply to invitation due to the following problem: " + (string)evt.Params["errorMessage"]);                         // .Net / Unity
            	System.Diagnostics.Debug.WriteLine("Failed to reply to invitation due to the following problem: " + (string)evt.Params["errorMessage"]);        // UWP
            }
            </code>
            </example>
            
            <seealso cref="F:Sfs2X.Core.SFSEvent.INVITATION_REPLY"/>
            <seealso cref="F:Sfs2X.Core.SFSEvent.INVITATION_REPLY_ERROR"/>
            <seealso cref="T:Sfs2X.Requests.Game.InviteUsersRequest"/>
        </member>
        <member name="F:Sfs2X.Requests.Game.InvitationReplyRequest.KEY_INVITATION_ID">
            <exclude/>
        </member>
        <member name="F:Sfs2X.Requests.Game.InvitationReplyRequest.KEY_INVITATION_REPLY">
            <exclude/>
        </member>
        <member name="F:Sfs2X.Requests.Game.InvitationReplyRequest.KEY_INVITATION_PARAMS">
            <exclude/>
        </member>
        <member name="M:Sfs2X.Requests.Game.InvitationReplyRequest.#ctor(Sfs2X.Entities.Invitation.Invitation,Sfs2X.Entities.Invitation.InvitationReply,Sfs2X.Entities.Data.ISFSObject)">
            <summary>
            Creates a new InvitationReplyRequest instance.
            </summary>
            
            <remarks>
            The instance must be passed to the <see cref="M:Sfs2X.SmartFox.Send(Sfs2X.Requests.IRequest)">SmartFox.Send</see> method for the request to be performed.
            </remarks>
            
            <param name="invitation">An instance of the Invitation class containing the invitation details (inviter, custom parameters, etc).</param>
            <param name="reply">The answer to be sent to the inviter, among those available as constants in the <see cref="T:Sfs2X.Entities.Invitation.InvitationReply"/> class.</param>
            <param name="parameters">An instance of <see cref="T:Sfs2X.Entities.Data.SFSObject"/> containing custom parameters to be returned to the inviter together with the reply (for example a message describing the reason of refusal). Default is <c>null</c>.</param>
            
            <seealso cref="T:Sfs2X.Entities.Invitation.InvitationReply"/>
        </member>
        <member name="M:Sfs2X.Requests.Game.InvitationReplyRequest.#ctor(Sfs2X.Entities.Invitation.Invitation,Sfs2X.Entities.Invitation.InvitationReply)">
            <summary>
            See <em>InvitationReplyRequest(Invitation, InvitationReply, ISFSObject)</em> constructor.
            </summary>
        </member>
        <member name="M:Sfs2X.Requests.Game.InvitationReplyRequest.Validate(Sfs2X.SmartFox)">
            <exclude/>
        </member>
        <member name="M:Sfs2X.Requests.Game.InvitationReplyRequest.Execute(Sfs2X.SmartFox)">
            <exclude/>
        </member>
        <member name="T:Sfs2X.Requests.Game.InviteUsersRequest">
             <summary>
             Sends a generic invitation to a list of users.
             </summary>
             
             <remarks>
             Invitations can be used for different purposes, such as requesting users to join a game or visit a specific Room, asking the permission to add them as buddies, etc.
             Invited users receive the invitation as an <see cref="F:Sfs2X.Core.SFSEvent.INVITATION"/> event dispatched to their clients: they can accept or refuse it
             by means of the InvitationReplyRequest request, which must be sent within the specified amount of time.
             </remarks>
             
             <example>
             The following example sends an invitation to join the current user in his private Room; the invitation contains a custom message and the Room name and password, so that the recipient clients can join the Room if the users accept the invitation:
             <code>
             void SomeMethod() {
             	// Add a listener to the invitation reply
             	sfs.AddEventListener(SFSEvent.INVITATION_REPLY, OnInvitationReply);
             	
             	// Choose the invitation recipients
             	User friend1 = sfs.UserManager.GetUserByName("Piggy");
             	User friend2 = sfs.UserManager.GetUserByName("Gonzo");
             	
             	List&lt;object&gt; invitedUsers = new List&lt;object&gt;();
             	invitedUsers.Add(friend1);
             	invitedUsers.Add(friend2);
             	
             	// Set the custom invitation details
             	ISFSObject parameters = new SFSObject();
             	parameters.PutUtfString("msg", "Would you like to join me in my private room?");
             	parameters.PutUtfString("roomName", "Kermit's room");
             	parameters.PutUtfString("roomPwd", "drowssap");
             	
             	// Send the invitation; recipients have 20 seconds to reply before the invitation expires
             	sfs.Send( new InviteUsersRequest(invitedUsers, 20, parameters) );
             }
            
             void OnInvitationReply(BaseEvent evt) {	
             	// If at least one recipient accepted the invitation, make me join my private Room to meet him there
             	if ((InvitationReply)evt.Params["reply"] == InvitationReply.ACCEPT) {
             		Room currentRoom = sfs.LastJoinedRoom;
             		if (currentRoom.name != "Kermit's room")
             			sfs.Send(new JoinRoomRequest("Kermit's room"));
             	}
             	else ((InvitationReply)evt.Params["reply"] == InvitationReply.REFUSE) {
             		Console.WriteLine((User)evt.Params["invitee"] + " refused the invitation");                         // .Net / Unity
             	    System.Diagnostics.Debug.WriteLine((User)evt.Params["invitee"] + " refused the invitation");        // UWP
             	}
             }
             </code>
             </example>
             
             <seealso cref="F:Sfs2X.Core.SFSEvent.INVITATION"/>
             <seealso cref="T:Sfs2X.Requests.Game.InvitationReplyRequest"/>
        </member>
        <member name="F:Sfs2X.Requests.Game.InviteUsersRequest.KEY_USER">
            <exclude/>
        </member>
        <member name="F:Sfs2X.Requests.Game.InviteUsersRequest.KEY_USER_ID">
            <exclude/>
        </member>
        <member name="F:Sfs2X.Requests.Game.InviteUsersRequest.KEY_INVITATION_ID">
            <exclude/>
        </member>
        <member name="F:Sfs2X.Requests.Game.InviteUsersRequest.KEY_TIME">
            <exclude/>
        </member>
        <member name="F:Sfs2X.Requests.Game.InviteUsersRequest.KEY_PARAMS">
            <exclude/>
        </member>
        <member name="F:Sfs2X.Requests.Game.InviteUsersRequest.KEY_INVITEE_ID">
            <exclude/>
        </member>
        <member name="F:Sfs2X.Requests.Game.InviteUsersRequest.KEY_INVITED_USERS">
            <exclude/>
        </member>
        <member name="F:Sfs2X.Requests.Game.InviteUsersRequest.KEY_REPLY_ID">
            <exclude/>
        </member>
        <member name="F:Sfs2X.Requests.Game.InviteUsersRequest.MAX_INVITATIONS_FROM_CLIENT_SIDE">
            <exclude/>
        </member>
        <member name="F:Sfs2X.Requests.Game.InviteUsersRequest.MIN_EXPIRY_TIME">
            <exclude/>
        </member>
        <member name="F:Sfs2X.Requests.Game.InviteUsersRequest.MAX_EXPIRY_TIME">
            <exclude/>
        </member>
        <member name="M:Sfs2X.Requests.Game.InviteUsersRequest.#ctor(System.Collections.Generic.List{System.Object},System.Int32,Sfs2X.Entities.Data.ISFSObject)">
            <summary>
            Creates a new InviteUsersRequest instance.
            </summary>
            
            <remarks>
            The instance must be passed to the <see cref="M:Sfs2X.SmartFox.Send(Sfs2X.Requests.IRequest)">SmartFox.Send</see> method for the request to be performed.
            </remarks>
            
            <param name="invitedUsers">A list of objects representing the users to send the invitation to.</param>
            <param name="secondsForReply">The number of seconds available to each invited user to reply to the invitation (recommended range: 15 to 40 seconds).</param>
            <param name="parameters">An instance of <see cref="T:Sfs2X.Entities.Data.SFSObject"/> containing custom parameters which specify the invitation details.</param>
        </member>
        <member name="M:Sfs2X.Requests.Game.InviteUsersRequest.Validate(Sfs2X.SmartFox)">
            <exclude/>
        </member>
        <member name="M:Sfs2X.Requests.Game.InviteUsersRequest.Execute(Sfs2X.SmartFox)">
            <exclude/>
        </member>
        <member name="T:Sfs2X.Requests.Game.QuickJoinGameRequest">
             <summary>
             Quickly joins the current user in a public game.
             </summary>
             
             <remarks>
             By providing a matching expression and a list of Rooms or Groups, SmartFoxServer can search for a matching public Game Room and immediately join the user into that Room as a player.
             <para/>
             If a game could be found and joined, the <see cref="F:Sfs2X.Core.SFSEvent.ROOM_JOIN"/> event is dispatched to the requester's client.
             </remarks>
             
             <example>
             The following example makes the user quickly join a public game:
             <code>
             void SomeMethod() {
             	sfs.AddEventListener(SFSEvent.ROOM_JOIN, onRoomJoin);
             	
             	// Create a matching expression to find a Darts game with a "maxBet" variable less than 100
             	MatchExpression exp = new MatchExpression("type", StringMatch.EQUALS, "Darts").And("maxBet", NumberMatch.LESS_THAN, 100);
             	
             	// Search and join a public game within the "games" Group, leaving the last joined Room
             	sfs.Send( new QuickJoinGameRequest(exp, new List&lt;string&gt;(){"games"}, sfs.LastJoinedRoom) );
             }
            
             void OnRoomJoin(BaseEvent evt) {	
             	Console.WriteLine("Successfully joined Room: " + (Room)evt.Params["room"]);                         // .Net / Unity
             	System.Diagnostics.Debug.WriteLine("Successfully joined Room: " + (Room)evt.Params["room"]);        // UWP
             }
             </code>
             </example>
             
             <seealso cref="F:Sfs2X.Core.SFSEvent.ROOM_JOIN"/>
        </member>
        <member name="F:Sfs2X.Requests.Game.QuickJoinGameRequest.KEY_ROOM_LIST">
            <exclude/>
        </member>
        <member name="F:Sfs2X.Requests.Game.QuickJoinGameRequest.KEY_GROUP_LIST">
            <exclude/>
        </member>
        <member name="F:Sfs2X.Requests.Game.QuickJoinGameRequest.KEY_ROOM_TO_LEAVE">
            <exclude/>
        </member>
        <member name="F:Sfs2X.Requests.Game.QuickJoinGameRequest.KEY_MATCH_EXPRESSION">
            <exclude/>
        </member>
        <member name="M:Sfs2X.Requests.Game.QuickJoinGameRequest.#ctor(Sfs2X.Entities.Match.MatchExpression,System.Collections.Generic.List{System.String},Sfs2X.Entities.Room)">
            <summary>
            Creates a new QuickJoinGameRequest instance.
            </summary>
            
            <remarks>
            The instance must be passed to the <see cref="M:Sfs2X.SmartFox.Send(Sfs2X.Requests.IRequest)">SmartFox.Send</see> method for the request to be performed.
            </remarks>
            
            <param name="matchExpression">A matching expression that the system will use to search a Game Room where to join the current user.</param>
            <param name="whereToSearch">A list of Group names to which the matching expression should be applied. The maximum number of elements in this list is 32.</param>
            <param name="roomToLeave">An object representing the Room that the user should leave when joining the game. Default is <c>null</c>.</param>
            
            <seealso cref="T:Sfs2X.Entities.Match.MatchExpression"/>
        </member>
        <member name="M:Sfs2X.Requests.Game.QuickJoinGameRequest.#ctor(Sfs2X.Entities.Match.MatchExpression,System.Collections.Generic.List{System.String})">
            <summary>
            See <em>QuickJoinGameRequest(MatchExpression, List&lt;string&gt;, Room)</em> constructor.
            </summary>
        </member>
        <member name="M:Sfs2X.Requests.Game.QuickJoinGameRequest.#ctor(Sfs2X.Entities.Match.MatchExpression,System.Collections.Generic.List{Sfs2X.Entities.Room},Sfs2X.Entities.Room)">
            <summary>
            Creates a new QuickJoinGameRequest instance.
            </summary>
            
            <remarks>
            The instance must be passed to the <see cref="M:Sfs2X.SmartFox.Send(Sfs2X.Requests.IRequest)">SmartFox.Send</see> method for the request to be performed.
            </remarks>
            
            <param name="matchExpression">A matching expression that the system will use to search a Game Room where to join the current user.</param>
            <param name="whereToSearch">A list of Room objects to which the matching expression should be applied. The maximum number of elements in this list is 32.</param>
            <param name="roomToLeave">An object representing the Room that the user should leave when joining the game. Default is <c>null</c>.</param>
        </member>
        <member name="M:Sfs2X.Requests.Game.QuickJoinGameRequest.#ctor(Sfs2X.Entities.Match.MatchExpression,System.Collections.Generic.List{Sfs2X.Entities.Room})">
            <summary>
            See <em>QuickJoinGameRequest(MatchExpression, List&lt;Room&gt;, Room)</em> constructor.
            </summary>
        </member>
        <member name="M:Sfs2X.Requests.Game.QuickJoinGameRequest.Validate(Sfs2X.SmartFox)">
            <exclude/>
        </member>
        <member name="M:Sfs2X.Requests.Game.QuickJoinGameRequest.Execute(Sfs2X.SmartFox)">
            <exclude/>
        </member>
        <member name="T:Sfs2X.Requests.Game.SFSGameSettings">
            <summary>
            The SFSGameSettings class is a container for the settings required to create a Game Room using the CreateSFSGameRequest request.
            </summary>
            
            <remarks>
            On the server-side, a Game Room is represented by the <em>SFSGame</em> Java class which extends the <see cref="T:Sfs2X.Entities.Room"/> class providing new advanced features such as player matching,
            game invitations, public and private games, quick game joining, etc. On the client side Game Rooms are regular Rooms with their <see cref="P:Sfs2X.Entities.Room.IsGame">Room.IsGame</see> property set to true.
            </remarks>
            
            <seealso cref="T:Sfs2X.Requests.Game.CreateSFSGameRequest"/>
        </member>
        <member name="M:Sfs2X.Requests.Game.SFSGameSettings.#ctor(System.String)">
            <summary>
            Creates a new SFSGameSettings instance.
            </summary>
            
            <remarks>
            The instance must be passed to the <see cref="T:Sfs2X.Requests.Game.CreateSFSGameRequest"/> class constructor.
            </remarks>
            
            <param name="name">The name of the Game Room to be created.</param>
            
            <seealso cref="T:Sfs2X.Requests.Game.CreateSFSGameRequest"/>
        </member>
        <member name="P:Sfs2X.Requests.Game.SFSGameSettings.IsPublic">
            <summary>
            Indicates whether the game is public or private.
            </summary>
            
            <remarks>
            A public game can be joined by any player whose User Variables match the <see cref="P:Sfs2X.Requests.Game.SFSGameSettings.PlayerMatchExpression"/> assigned to the Game Room.
            A private game can be joined by users invited by the game creator by means of <see cref="P:Sfs2X.Requests.Game.SFSGameSettings.InvitedPlayers"/> list.
            <para/>
            The default value is <c>true</c>.
            </remarks>
        </member>
        <member name="P:Sfs2X.Requests.Game.SFSGameSettings.MinPlayersToStartGame">
            <summary>
            Defines the minimum number of players required to start the game.
            </summary>
            
            <remarks>
            If the <see cref="P:Sfs2X.Requests.Game.SFSGameSettings.NotifyGameStarted"/> property is set to <c>true</c>, when this number is reached, the game start is notified.
            <para/>
            The default value is <c>2</c>.
            </remarks>
        </member>
        <member name="P:Sfs2X.Requests.Game.SFSGameSettings.InvitedPlayers">
            <summary>
            In private games, defines a list of User objects or Buddy objects representing players to be invited to join the game.
            </summary>
            
            <remarks>
            If the invitations are less than the minimum number of players required to start the game (see the <see cref="P:Sfs2X.Requests.Game.SFSGameSettings.MinPlayersToStartGame"/> property),
            the server will send additional invitations automatically, searching users in the Room Groups specified in the <see cref="P:Sfs2X.Requests.Game.SFSGameSettings.SearchableRooms"/> list
            and filtering them by means of the object passed to the <see cref="P:Sfs2X.Requests.Game.SFSGameSettings.PlayerMatchExpression"/> property.
            <para/>
            The game matching criteria contained in the <see cref="P:Sfs2X.Requests.Game.SFSGameSettings.PlayerMatchExpression"/> property do not apply to the users specified in this list.
            <para/>
            The default value is an empty list.
            </remarks>
        </member>
        <member name="P:Sfs2X.Requests.Game.SFSGameSettings.SearchableRooms">
            <summary>
            In private games, defines a list of Groups names where to search players to invite.
            </summary>
            
            <remarks>
            If the users invited to join the game (specified through the <see cref="P:Sfs2X.Requests.Game.SFSGameSettings.InvitedPlayers"/> property) are less than the minimum number of players
            required to start the game (see the <see cref="P:Sfs2X.Requests.Game.SFSGameSettings.MinPlayersToStartGame"/> property), the server will invite others automatically,
            searching them in Rooms belonging to the Groups specified in this list and filtering them by means of the object passed to the <see cref="P:Sfs2X.Requests.Game.SFSGameSettings.PlayerMatchExpression"/> property.
            <para/>
            The default value is <c>null</c>.
            </remarks>
        </member>
        <member name="P:Sfs2X.Requests.Game.SFSGameSettings.InvitationExpiryTime">
            <summary>
            In private games, defines the number of seconds that the users invited to join the game have to reply to the invitation.
            </summary>
            
            <remarks>
            The suggested range is 10 to 40 seconds. Default value is <c>15</c>.
            </remarks>
        </member>
        <member name="P:Sfs2X.Requests.Game.SFSGameSettings.LeaveLastJoinedRoom">
            <summary>
            In private games, indicates whether the players must leave the previous Room when joining the game or not.
            </summary>
            
            <remarks>
            This setting applies to private games only because users join the Game Room automatically when they accept the invitation to play,
            while public games require a <see cref="T:Sfs2X.Requests.JoinRoomRequest"/> request to be sent, where this behavior can be determined manually.
            <para/>
            The default value is <c>true</c>.
            </remarks>
        </member>
        <member name="P:Sfs2X.Requests.Game.SFSGameSettings.NotifyGameStarted">
            <summary>
            Indicates if a game state change must be notified when the minimum number of players is reached.
            </summary>
            
            <remarks>
            If this setting is true, the game state (started or stopped) is handled by means of the reserved Room Variable represented by the <see cref="F:Sfs2X.Entities.Variables.ReservedRoomVariables.RV_GAME_STARTED">ReservedRoomVariables.RV_GAME_STARTED</see> constant.
            Listening to the <see cref="F:Sfs2X.Core.SFSEvent.ROOM_VARIABLES_UPDATE"/> event for this variable allows clients to be notified when the game can start due to minimum number of players being reached.
            <para/>
            As the used Room Variable is created as <em>global</em> (see the <see cref="T:Sfs2X.Entities.Variables.SFSRoomVariable"/> class description), its update is broadcast outside the Room too:
            this can be used on the client-side, for example, to show the game state in a list of available games.
            <para/>
            The default value is <c>false</c>.
            </remarks>
        </member>
        <member name="P:Sfs2X.Requests.Game.SFSGameSettings.PlayerMatchExpression">
            <summary>
            Defines the game matching expression to be used to filters players.
            </summary>
            
            <remarks>
            Filtering is applied when:
            <ol>
            	<li>users try to join a public Game Room as players (their User Variables must match the matching criteria);</li>
            	<li>the server selects additional users to be invited to join a private game (see the <see cref="P:Sfs2X.Requests.Game.SFSGameSettings.SearchableRooms"/> property).</li>
            </ol>
            Filtering is not applied to users invited by the creator to join a private game (see the <see cref="P:Sfs2X.Requests.Game.SFSGameSettings.InvitedPlayers"/> property).
            <para/>
            The default value is <c>null</c>.
            </remarks>
            <seealso cref="P:Sfs2X.Requests.Game.SFSGameSettings.SpectatorMatchExpression"/>
        </member>
        <member name="P:Sfs2X.Requests.Game.SFSGameSettings.SpectatorMatchExpression">
            <summary>
            Defines the game matching expression to be used to filters spectators.
            </summary>
            
            <remarks>
            Filtering is applied when users try to join a public Game Room as spectators (their User Variables must match the matching criteria).
            <para/>
            The default value is <c>null</c>.
            </remarks>
            
            <seealso cref="P:Sfs2X.Requests.Game.SFSGameSettings.PlayerMatchExpression"/>
        </member>
        <member name="P:Sfs2X.Requests.Game.SFSGameSettings.InvitationParams">
            <summary>
            In private games, defines an optional object containing additional custom parameters to be sent together with the invitation.
            </summary>
            
            <remarks>
            This object must be an instance of <see cref="T:Sfs2X.Entities.Data.SFSObject"/>. Possible custom parameters to be transferred to the invitees are a message
            for the recipient, the game details (title, type...), the inviter details, etc.
            <para/>
            The default value is <c>null</c>.
            </remarks>
        </member>
        <member name="T:Sfs2X.Requests.Game.JoinRoomInvitationRequest">
             <summary>
             Sends an invitation to other users/players to join a specific Room.
             </summary>
             
             <remarks>
             Invited users receive the invitation as an <see cref="F:Sfs2X.Core.SFSEvent.INVITATION"/> event dispatched to their clients: they can accept or refuse it
             by means of the InvitationReplyRequest request, which must be sent within the specified amount of time.
             <para/>
             Depending on the Room's settings this invitation can be sent by the Room's owner only or by any other user.
             This behavior can be set via the RoomSettings.AllowOwnerOnlyInvitation parameter.
             <para/>
             <b>NOTE:</b> spectators in a Game Room are not allowed to invite other users; only players are.
             <para/>
             An invitation can also specify the amount of time given to each invitee to reply. Default is 30 seconds.
             A positive answer will attempt to join the user in the designated Room. For Game Rooms the <em>asSpectator</em> flag can be toggled to join the invitee as player or spectator (default = player).
             <para/>
             There aren't any specific notifications sent back to the inviter after the invitee's response. Users that have accepted the invitation will join the Room while those who didn't reply or turned down the invitation won't generate any event.
             In order to send specific messages (e.g. chat), just send a private message back to the inviter.
             </remarks>
             
             <example>
             The following example invites two more users in the current game:
             <code>
             void SomeMethod() {
             	sfs.AddEventListener(SFSEvent.USER_ENTER_ROOM, onUserJoin);
             	
             	List&lt;string&gt; invitedUsers = new List&lt;string&gt;(){"Fozzie", "Piggy"};
            		Room room = sfs.GetRoomByName("The Garden");
            		
             	// Add message to be shown to the invited users
             	ISFSObject params = SFSObject.NewInstance();
             	params.PutUtfString("msg", "You are invited in this Room: " + room.Name);
             	
             	// Send the request
             	sfs.Send( new JoinRoomInvitationRequest(room, invitedUsers, params) );
             }
            
             void onUserJoin(BaseEvent evt) {
             	User user = (User)evt.Params["user"];
             	
             	Console.WriteLine("Room joined by: " + user.Name);						// .Net / Unity
             	System.Diagnostics.Debug.WriteLine("Room joined by: " + user.Name);		// UWP
             }
             </code>
             </example>
             
             <seealso cref="T:Sfs2X.Requests.RoomSettings"/>
        </member>
        <member name="F:Sfs2X.Requests.Game.JoinRoomInvitationRequest.KEY_ROOM_ID">
            <exclude/>
        </member>
        <member name="F:Sfs2X.Requests.Game.JoinRoomInvitationRequest.KEY_EXPIRY_SECONDS">
            <exclude/>
        </member>
        <member name="F:Sfs2X.Requests.Game.JoinRoomInvitationRequest.KEY_INVITED_NAMES">
            <exclude/>
        </member>
        <member name="F:Sfs2X.Requests.Game.JoinRoomInvitationRequest.KEY_AS_SPECT">
            <exclude/>
        </member>
        <member name="F:Sfs2X.Requests.Game.JoinRoomInvitationRequest.KEY_OPTIONAL_PARAMS">
            <exclude/>
        </member>
        <member name="M:Sfs2X.Requests.Game.JoinRoomInvitationRequest.#ctor(Sfs2X.Entities.Room,System.Collections.Generic.List{System.String},Sfs2X.Entities.Data.ISFSObject,System.Int32,System.Boolean)">
            <summary>
            Creates a new JoinRoomInvitationRequest instance.
            </summary>
            
            <remarks>
            The instance must be passed to the <see cref="M:Sfs2X.SmartFox.Send(Sfs2X.Requests.IRequest)">SmartFox.Send</see> method for the request to be performed.
            </remarks>
            
            <param name="targetRoom">The Room to join (must have free user/player slots).</param>
            <param name="invitedUserNames">A list of user names to invite.</param>
            <param name="parameters">An instance of <see cref="T:Sfs2X.Entities.Data.SFSObject"/> containing any relevant parameter or message to be sent to the invited users (for example an invitation message). Default is <c>null</c>.</param>
            <param name="expirySeconds">The time given to the invitee to reply to the invitation. Default is 30.</param>
            <param name="asSpectator">In Game Rooms only, indicates if the invited user(s) should join as spectator(s) instead of player(s). Default is <c>false</c>.</param>
        </member>
        <member name="M:Sfs2X.Requests.Game.JoinRoomInvitationRequest.#ctor(Sfs2X.Entities.Room,System.Collections.Generic.List{System.String},Sfs2X.Entities.Data.ISFSObject,System.Int32)">
            <summary>
            See <em>JoinRoomInvitationRequest(Room, List&lt;string&gt;, ISFSObject, int, bool)</em> constructor.
            </summary>
        </member>
        <member name="M:Sfs2X.Requests.Game.JoinRoomInvitationRequest.#ctor(Sfs2X.Entities.Room,System.Collections.Generic.List{System.String},Sfs2X.Entities.Data.ISFSObject)">
            <summary>
            See <em>JoinRoomInvitationRequest(Room, List&lt;string&gt;, ISFSObject, int, bool)</em> constructor.
            </summary>
        </member>
        <member name="M:Sfs2X.Requests.Game.JoinRoomInvitationRequest.#ctor(Sfs2X.Entities.Room,System.Collections.Generic.List{System.String})">
            <summary>
            See <em>JoinRoomInvitationRequest(Room, List&lt;string&gt;, ISFSObject, int, bool)</em> constructor.
            </summary>
        </member>
        <member name="M:Sfs2X.Requests.Game.JoinRoomInvitationRequest.Validate(Sfs2X.SmartFox)">
            <exclude/>
        </member>
        <member name="M:Sfs2X.Requests.Game.JoinRoomInvitationRequest.Execute(Sfs2X.SmartFox)">
            <exclude/>
        </member>
        <member name="T:Sfs2X.Requests.MMO.MMORoomSettings">
            <summary>
            The MMORoomSettings class is a container for the settings required to create an MMORoom using the CreateRoomRequest request.
            </summary>
            
            <seealso cref="T:Sfs2X.Requests.CreateRoomRequest"/>
            <seealso cref="T:Sfs2X.Entities.MMORoom"/>
        </member>
        <member name="M:Sfs2X.Requests.MMO.MMORoomSettings.#ctor(System.String)">
            <summary>
            Creates a new MMORoomSettings instance.
            </summary>
            
            <remarks>
            The instance must be passed to the <see cref="T:Sfs2X.Requests.CreateRoomRequest"/> class constructor.
            </remarks>
            
            <param name="name">The name of the MMORoom to be created.</param>
            
            <seealso cref="T:Sfs2X.Requests.CreateRoomRequest"/>
        </member>
        <member name="P:Sfs2X.Requests.MMO.MMORoomSettings.DefaultAOI">
            <summary>
            Defines the Area of Interest (AoI) for the MMORoom.
            </summary>
            
            <remarks>
            This value represents the area/range around the user that will be affected by server events and other users events.
            It is represented by a <em>Vec3D</em> object providing 2D or 3D coordinates.
            <para/>
            Setting this value is mandatory.
            </remarks>
            
            <example>
            A <c>Vec3D(50,50)</c> describes a range of 50 units (e.g. pixels) in all four directions (top, bottom, left, right) with respect to the user position in a 2D coordinates system.
            
            A <c>Vec3D(120,120,60)</c> describes a range of 120 units in all four directions (top, bottom, left, right) and 60 units along the two Z-axis directions (backward, forward) with respect to the user position in a 3D coordinates system.
            </example>
        </member>
        <member name="P:Sfs2X.Requests.MMO.MMORoomSettings.MapLimits">
            <summary>
            Defines the limits of the virtual environment represented by the MMORoom.
            </summary>
            
            <remarks>
            When specified, this property must contain two non-null <em>Vec3D</em> objects representing the minimum and maximum limits of the 2D/3D coordinates systems.
            Any positional value that falls outside the provided limit will be refused by the server.
            <para/>
            This setting is optional but its usage is highly recommended.
            </remarks>
        </member>
        <member name="P:Sfs2X.Requests.MMO.MMORoomSettings.UserMaxLimboSeconds">
            <summary>
            Defines the time limit before a user without a physical position set inside the MMORoom is kicked from the Room.
            </summary>
            
            <remarks>
            As soon as the MMORoom is joined, the user still doesn't have a physical position set in the coordinates system, therefore it is
            considered in a "limbo" state. At this point the user is expected to set his position (via the <see cref="T:Sfs2X.Requests.MMO.SetUserPositionRequest"/> request) within the amount of seconds expressed by this value.
            <para/>
            The default value is <c>50</c> seconds.
            </remarks>
        </member>
        <member name="P:Sfs2X.Requests.MMO.MMORoomSettings.ProximityListUpdateMillis">
            <summary>
            Configures the speed at which the PROXIMITY_LIST_UPDATE event is sent by the server.
            </summary>
            
            <remarks>
            In an MMORoom, the regular users list is replaced by a proximity list, which keeps an updated view of the users currently within the Area of Interest
            of the current user. The speed at which these updates are fired by the server is regulated by this parameter, which sets the minimum time between two subsequent updates.
            <para/>
            The default value is <c>250</c> milliseconds.
            <para/>
            <b>NOTE:</b> values below the default might be unnecessary for most applications unless they are in realtime.
            </remarks>
            
            <seealso cref="F:Sfs2X.Core.SFSEvent.PROXIMITY_LIST_UPDATE"/>
        </member>
        <member name="P:Sfs2X.Requests.MMO.MMORoomSettings.SendAOIEntryPoint">
            <summary>
            Sets if the users entry points in the current user's Area of Interest should be transmitted in the PROXIMITY_LIST_UPDATE event.
            </summary>
            
            <remarks>
            If this setting is set to <c>true</c>, when a user enters the AoI of another user, the server will also send the coordinates
            at which the former "appeared" within the AoI. This option should be turned off in case these coordinates are not needed, in order to save bandwidth.
            <para/>
            The default value is <c>true</c>.
            </remarks>
            
            <seealso cref="P:Sfs2X.Entities.User.AOIEntryPoint"/>
            <seealso cref="P:Sfs2X.Entities.MMOItem.AOIEntryPoint"/>
            <seealso cref="F:Sfs2X.Core.SFSEvent.PROXIMITY_LIST_UPDATE"/>
        </member>
        <member name="T:Sfs2X.Requests.MMO.MapLimits">
            <summary>
            The MapLimits class is used to set the limits of the virtual environment represented by an MMORoom when creating it.
            </summary>
            
            <remarks>
            The limits represent the minimum and maximum coordinate values (2D or 3D) that the MMORoom should expect.
            </remarks>
            
            <seealso cref="T:Sfs2X.Requests.MMO.MMORoomSettings"/>
            <seealso cref="T:Sfs2X.Entities.MMORoom"/>
            <seealso cref="T:Sfs2X.Entities.Data.Vec3D"/>
        </member>
        <member name="M:Sfs2X.Requests.MMO.MapLimits.#ctor(Sfs2X.Entities.Data.Vec3D,Sfs2X.Entities.Data.Vec3D)">
            <summary>
            Creates a new MapLimits instance.
            </summary>
            
            <remarks>
            The <see cref="P:Sfs2X.Requests.MMO.MMORoomSettings.MapLimits"/> property must be set to this instance during the MMORoom creation.
            </remarks>
            
            <param name="lowerLimit">The lower coordinates limit of the virtual environment along the X,Y,Z axes.</param>
            <param name="higherLimit">The higher coordinates limit of the virtual environment along the X,Y,Z axes.</param>
        </member>
        <member name="P:Sfs2X.Requests.MMO.MapLimits.LowerLimit">
            <summary>
            Returns the lower coordinates limit of the virtual environment along the X,Y,Z axes.
            </summary>
        </member>
        <member name="P:Sfs2X.Requests.MMO.MapLimits.HigherLimit">
            <summary>
            Returns the higher coordinates limit of the virtual environment along the X,Y,Z axes.
            </summary>
        </member>
        <member name="T:Sfs2X.Requests.MMO.SetMMOItemVariables">
            <exclude/>
        </member>
        <member name="T:Sfs2X.Requests.MMO.SetUserPositionRequest">
             <summary>
             Updates the User position inside an MMORoom.
             </summary>
             
             <remarks>
             MMORooms represent virtual environments and can host any number of users. Based on their position, the system allows users within a certain range
             from each other (Area of Interest, or AoI) to interact.
             <para/>
             This request allows the current user to update his position inside the MMORoom, which in turn will trigger a
             <see cref="F:Sfs2X.Core.SFSEvent.PROXIMITY_LIST_UPDATE">PROXIMITY_LIST_UPDATE</see> event for all users that fall within his AoI.
             </remarks>
             
             <example>
             The following example changes the position of the user in a 2D coordinates space and handles the related event:
             <code>
             private void UpdatePlayerPosition(int px, int py)
             {
             	var newPos = new Vec3D(px, py);
             	sfs.Send(new SetUserPositionRequest(newPos));
             }
            
             private void OnProximityListUpdate(BaseEvent evt)
             {
             	var added = (List&lt;User&gt;) evt.params["addedUsers"];
             	var removed = (List&lt;User&gt;) evt.params["removedUsers"];
            
             	// Add users that entered the proximity list
             	foreach (User user in added)
             	{
             		// Obtain the coordinates at which the user "appeared" in our range
             		Vec3D entryPoint = user.AoiEntryPoint;
            
             		// Add new avatar in the scene
             		var avatarSprite = new AvatarSprite();
             		avatarSprite.x = entryPoint.px;
             		avatarSprite.y = entryPoint.py;
             		...
             	}
            
             	// Remove users that left the proximity list
             	foreach (User user in removed)
             	{
             		// Remove the avatar from the scene
             		...
             	}
             }
             </code>
             </example>
             
             <seealso cref="F:Sfs2X.Core.SFSEvent.PROXIMITY_LIST_UPDATE"/>
             <seealso cref="T:Sfs2X.Entities.MMORoom"/>
        </member>
        <member name="F:Sfs2X.Requests.MMO.SetUserPositionRequest.KEY_ROOM">
            <exclude/>
        </member>
        <member name="F:Sfs2X.Requests.MMO.SetUserPositionRequest.KEY_VEC3D">
            <exclude/>
        </member>
        <member name="F:Sfs2X.Requests.MMO.SetUserPositionRequest.KEY_PLUS_USER_LIST">
            <exclude/>
        </member>
        <member name="F:Sfs2X.Requests.MMO.SetUserPositionRequest.KEY_MINUS_USER_LIST">
            <exclude/>
        </member>
        <member name="F:Sfs2X.Requests.MMO.SetUserPositionRequest.KEY_PLUS_ITEM_LIST">
            <exclude/>
        </member>
        <member name="F:Sfs2X.Requests.MMO.SetUserPositionRequest.KEY_MINUS_ITEM_LIST">
            <exclude/>
        </member>
        <member name="M:Sfs2X.Requests.MMO.SetUserPositionRequest.#ctor(Sfs2X.Entities.Data.Vec3D,Sfs2X.Entities.Room)">
            <summary>
            Creates a new SetUserPositionRequest instance.
            </summary>
            
            <remarks>
            The instance must be passed to the <see cref="M:Sfs2X.SmartFox.Send(Sfs2X.Requests.IRequest)">SmartFox.Send</see> method for the request to be performed.
            </remarks>
            
            <param name="position">The user position.</param>
            <param name="room">The <em>MMORoom</em> object corresponding to the Room where the position should be set; if <c>null</c>, the last Room joined by the user is used.</param>
        </member>
        <member name="M:Sfs2X.Requests.MMO.SetUserPositionRequest.#ctor(Sfs2X.Entities.Data.Vec3D)">
            <summary>
            See <em>SetUserPositionRequest(Vec3D, Room)</em> constructor.
            </summary>
        </member>
        <member name="M:Sfs2X.Requests.MMO.SetUserPositionRequest.Validate(Sfs2X.SmartFox)">
            <exclude/>
        </member>
        <member name="M:Sfs2X.Requests.MMO.SetUserPositionRequest.Execute(Sfs2X.SmartFox)">
            <exclude/>
        </member>
        <member name="T:Sfs2X.Requests.Cluster.ClusterJoinOrCreateRequest">
             <summary>
             In SmartFoxServer 2X Cluster environment, quickly joins the current user in a public game on a Game Node, or creates a new game if none is found.
             </summary>
             
             <remarks>
             The Lobby Node searches for a public Game Room that meets the criteria expressed by the passed matching expression in the passed Room Groups.
             If no suitable Game Room can be found or a null matching expression is passed, and if the <i>settings</i> parameter is set, a new Game Room
             is created on a Game Node selected by the cluster's load balancing system.
             <para/>
             In any case, if a game to join can be found or is created, the <see cref="F:Sfs2X.Core.SFSClusterEvent.CONNECTION_REQUIRED"/> event is dispatched to the requester's client,
             followed by a <see cref="F:Sfs2X.Core.SFSEvent.ROOM_JOIN"/> event after the connection and login process is completed.
             In case the client is already connected to the target Game Node, the <see cref="F:Sfs2X.Core.SFSEvent.ROOM_JOIN"/> event is received immediately.
             </remarks>
             
             <example>
             The following example makes the user quickly join a public game:
             <code>
             void SomeMethod() {
             	sfsLobby.AddEventListener(SFSClusterEvent.CONNECTION_REQUIRED, OnGameNodeConnectionRequired);
            
            		// Create a matching expression to find a Darts game with a "maxBet" variable less than 100
             	MatchExpression exp = new MatchExpression("type", StringMatch.EQUALS, "Darts").And("maxBet", NumberMatch.LESS_THAN, 100);
            		
            		// Set the Room settings to create a new game Room if one is not found
            		ClusterRoomSettings settings = new ClusterRoomSettings("NewRoom__" + new System.Random().Next());
            		settings.GroupId = "games";
            		settings.IsPublic = true;
            		settings.IsGame = true;
            		settings.MaxUsers = 10;
            	    settings.MinPlayersToStartGame = 2;
            
            		// Search (or create) and join a public game within the "games" Group
            		sfsLobby.Send(new ClusterJoinOrCreateRequest(exp, new List&lt;string&gt;(){"games"}, settings));
             }
             
             void OnGameNodeConnectionRequired(BaseEvent evt)
             {
                 // Retrieve connection settings
                 ConfigData cfg = (ConfigData)evt.Params["configData"];
             
                 // Retrieve and save login details
                 gameUsername = (string)evt.Params["userName"];
                 gamePassword = (string)evt.Params["password"];
             
                 // Initialize SmartFox client used to connect to the cluster game node
             	sfsGame = new SmartFox();
             
                 // Add event listeners
                 sfsGame.AddEventListener(SFSEvent.CONNECTION, OnGameNodeConnection);
                 sfsGame.AddEventListener(SFSEvent.LOGIN, OnGameNodeLogin);
                 sfsGame.AddEventListener(SFSEvent.ROOM_JOIN, OnGameRoomJoin);
             
                 // Establish a connection to the game node; a game room will be joined automatically after login
                 sfsGame.Connect(cfg);
             }
            
             void OnGameNodeConnection(BaseEvent evt)
             {
                 if ((bool)evt.Params["success"])
                 {
                     // Login
                     sfsGame.Send(new LoginRequest(gameUsername, gamePassword));
                 }
             }
            
             void OnGameNodeLogin(BaseEvent evt)
             {
                 // Nothing to do; a game Room-autojoin is triggered by the server
             }
            
             void OnGameRoomJoin(BaseEvent evt) {	
             	Console.WriteLine("Successfully joined Room: " + (Room)evt.Params["room"]);                         // .Net / Unity
             	System.Diagnostics.Debug.WriteLine("Successfully joined Room: " + (Room)evt.Params["room"]);        // UWP
             }
             </code>
             </example>
             
             <seealso cref="F:Sfs2X.Core.SFSClusterEvent.CONNECTION_REQUIRED"/>
             <seealso cref="F:Sfs2X.Core.SFSEvent.ROOM_JOIN"/>
        </member>
        <member name="F:Sfs2X.Requests.Cluster.ClusterJoinOrCreateRequest.KEY_GROUP_LIST">
            <exclude/>
        </member>
        <member name="F:Sfs2X.Requests.Cluster.ClusterJoinOrCreateRequest.KEY_ROOM_SETTINGS">
            <exclude/>
        </member>
        <member name="F:Sfs2X.Requests.Cluster.ClusterJoinOrCreateRequest.KEY_MATCH_EXPRESSION">
            <exclude/>
        </member>
        <member name="F:Sfs2X.Requests.Cluster.ClusterJoinOrCreateRequest.KEY_IS_PUBLIC">
            <exclude/>
        </member>
        <member name="F:Sfs2X.Requests.Cluster.ClusterJoinOrCreateRequest.KEY_MIN_PLAYERS">
            <exclude/>
        </member>
        <member name="F:Sfs2X.Requests.Cluster.ClusterJoinOrCreateRequest.KEY_INVITED_PLAYERS">
            <exclude/>
        </member>
        <member name="F:Sfs2X.Requests.Cluster.ClusterJoinOrCreateRequest.KEY_INVITATION_EXPIRY">
            <exclude/>
        </member>
        <member name="F:Sfs2X.Requests.Cluster.ClusterJoinOrCreateRequest.KEY_NOTIFY_GAME_STARTED">
            <exclude/>
        </member>
        <member name="F:Sfs2X.Requests.Cluster.ClusterJoinOrCreateRequest.KEY_INVITATION_PARAMS">
            <exclude/>
        </member>
        <member name="M:Sfs2X.Requests.Cluster.ClusterJoinOrCreateRequest.#ctor(Sfs2X.Entities.Match.MatchExpression,System.Collections.Generic.List{System.String},Sfs2X.Requests.RoomSettings)">
            <summary>
            Creates a new ClusterJoinOrCreateRequest instance.
            </summary>
            
            <param name="matchExpression">A matching expression that the system will use to search a Game Room where to join the current user; if <c>null</c>, a new Game Room will be created.</param>
            <param name="groupNames">A list of group names to further filter the search; if <c>null</c>, all groups will be searched.</param>
            <param name="settings">If no Rooms are found through the matching expression, a new Room with the passed settings will be created and the user will auto-join it.</param>
            
            <seealso cref="T:Sfs2X.Entities.Match.MatchExpression"/>
            <seealso cref="T:Sfs2X.Requests.Cluster.ClusterRoomSettings"/>
        </member>
        <member name="M:Sfs2X.Requests.Cluster.ClusterJoinOrCreateRequest.#ctor(Sfs2X.Entities.Match.MatchExpression,System.Collections.Generic.List{System.String})">
            <summary>
            See <em>ClusterJoinOrCreateRequest(MatchExpression, List&lt;string&gt;, RoomSettings)</em> constructor.
            </summary>
        </member>
        <member name="M:Sfs2X.Requests.Cluster.ClusterJoinOrCreateRequest.#ctor(Sfs2X.Entities.Match.MatchExpression)">
            <summary>
            See <em>ClusterJoinOrCreateRequest(MatchExpression, List&lt;string&gt;, RoomSettings)</em> constructor.
            </summary>
        </member>
        <member name="M:Sfs2X.Requests.Cluster.ClusterJoinOrCreateRequest.#ctor(Sfs2X.Requests.RoomSettings)">
            <summary>
            See <em>ClusterJoinOrCreateRequest(MatchExpression, List&lt;string&gt;, RoomSettings)</em> constructor.
            </summary>
        </member>
        <member name="M:Sfs2X.Requests.Cluster.ClusterJoinOrCreateRequest.Validate(Sfs2X.SmartFox)">
            <exclude/>
        </member>
        <member name="M:Sfs2X.Requests.Cluster.ClusterJoinOrCreateRequest.Execute(Sfs2X.SmartFox)">
            <exclude/>
        </member>
        <member name="T:Sfs2X.Requests.Cluster.ClusterRoomSettings">
            <summary>
            The ClusterRoomSettings class is a container for the settings required to create a Game Room on a Game Node in a SmartFoxServer 2X Cluster.
            </summary>
            
            <remarks>
            On the server-side, a Game Room is represented on the Game Node by the <em>SFSGame</em> Java class which extends the <see cref="T:Sfs2X.Entities.Room"/> class providing advanced features such as player matching,
            game invitations, public and private games, quick game joining, etc. On the client side Game Rooms are regular Rooms with their <see cref="P:Sfs2X.Entities.Room.IsGame">Room.IsGame</see> property set to true.
            </remarks>
            
            <seealso cref="T:Sfs2X.Requests.Cluster.ClusterJoinOrCreateRequest"/>
        </member>
        <member name="M:Sfs2X.Requests.Cluster.ClusterRoomSettings.#ctor(System.String)">
            <summary>
            Creates a new ClusterRoomSettings instance.
            </summary>
            
            <remarks>
            The instance must be passed to the <see cref="T:Sfs2X.Requests.Cluster.ClusterJoinOrCreateRequest"/> class constructor.
            </remarks>
            
            <param name="name">The name of the Game Room to be created.</param>
            
            <seealso cref="T:Sfs2X.Requests.Cluster.ClusterJoinOrCreateRequest"/>
        </member>
        <member name="P:Sfs2X.Requests.Cluster.ClusterRoomSettings.IsPublic">
            <summary>
            Indicates whether the game is public or private.
            </summary>
            
            <remarks>
            A public game can be joined by any player.
            A private game can only be joined by users invited by the game creator by means of <see cref="P:Sfs2X.Requests.Cluster.ClusterRoomSettings.InvitedPlayers"/> list.
            <para/>
            The default value is <c>true</c>.
            </remarks>
        </member>
        <member name="P:Sfs2X.Requests.Cluster.ClusterRoomSettings.MinPlayersToStartGame">
            <summary>
            Defines the minimum number of players required to start the game.
            </summary>
            
            <remarks>
            If the <see cref="P:Sfs2X.Requests.Cluster.ClusterRoomSettings.NotifyGameStarted"/> property is set to <c>true</c>, when this number is reached, the game start is notified.
            <para/>
            The default value is <c>2</c>.
            </remarks>
        </member>
        <member name="P:Sfs2X.Requests.Cluster.ClusterRoomSettings.InvitedPlayers">
            <summary>
            In private games, defines a list of Buddy or User objects representing players to be invited to join the game.
            </summary>
            
            <remarks>
            The default value is an empty list.
            </remarks>
        </member>
        <member name="P:Sfs2X.Requests.Cluster.ClusterRoomSettings.InvitationExpiryTime">
            <summary>
            In private games, defines the number of seconds that the users invited to join the game have to reply to the invitation.
            </summary>
            
            <remarks>
            The suggested range is 30 to 60 seconds. Default value is <c>30</c>.
            </remarks>
        </member>
        <member name="P:Sfs2X.Requests.Cluster.ClusterRoomSettings.NotifyGameStarted">
            <summary>
            Indicates if a game state change must be notified when the minimum number of players is reached.
            </summary>
            
            <remarks>
            If this setting is true, the game state (started or stopped) is handled by means of the reserved Room Variable represented by the <see cref="F:Sfs2X.Entities.Variables.ReservedRoomVariables.RV_GAME_STARTED">ReservedRoomVariables.RV_GAME_STARTED</see> constant.
            Listening to the <see cref="F:Sfs2X.Core.SFSEvent.ROOM_VARIABLES_UPDATE"/> event for this variable allows clients to be notified when the game can start due to minimum number of players being reached.
            <para/>
            The default value is <c>false</c>.
            </remarks>
        </member>
        <member name="P:Sfs2X.Requests.Cluster.ClusterRoomSettings.InvitationParams">
            <summary>
            In private games, defines an optional object containing additional custom parameters to be sent together with the invitation.
            </summary>
            
            <remarks>
            This object must be an instance of <see cref="T:Sfs2X.Entities.Data.SFSObject"/>. Possible custom parameters to be transferred to the invitees are a message
            for the recipient, the game details (title, type...), the inviter details, etc.
            <para/>
            The default value is <c>null</c>.
            </remarks>
        </member>
        <member name="T:Sfs2X.Requests.Cluster.ClusterTarget">
            <summary>
            The ClusterTarget class is a container for the identifier of a Room on a Game Node in a SmartFoxServer 2X Cluster.
            </summary>
            
            <seealso cref="T:Sfs2X.Requests.Cluster.ClusterInviteUsersRequest"/>
        </member>
        <member name="M:Sfs2X.Requests.Cluster.ClusterTarget.#ctor(System.String,System.Int32)">
            <summary>
            Creates a new ClusterTarget instance.
            </summary>
            
            <remarks>
            The instance must be passed to the <see cref="T:Sfs2X.Requests.Cluster.ClusterInviteUsersRequest"/> class constructor.
            </remarks>
            
            <param name="serverId">The identifier of the Game Node where the Room is located.</param>
            <param name="roomId">The identifier of the Room on the Game Node.</param>
            
            <seealso cref="T:Sfs2X.Requests.Cluster.ClusterInviteUsersRequest"/>
        </member>
        <member name="P:Sfs2X.Requests.Cluster.ClusterTarget.ServerId">
            <summary>
            Indicates the identifier of the Game Node where the Room is located.
            </summary>
        </member>
        <member name="P:Sfs2X.Requests.Cluster.ClusterTarget.RoomId">
            <summary>
            Indicates the identifier of the Room on the Game Node.
            </summary>
        </member>
        <member name="T:Sfs2X.Requests.Cluster.ClusterInviteUsersRequest">
            <summary>
            In the SmartFoxServer 2X Cluster environment, sends a generic invitation to a list of users to join a Room on a Game Node.
            </summary>
            
            <remarks>
            Invited users receive the invitation as an <see cref="F:Sfs2X.Core.SFSEvent.INVITATION"/> event dispatched to their clients:
            they can accept or refuse it by means of the InvitationReplyRequest request, which must be sent within the specified amount of time.
            <para/>
            If the invitation is accepted, and the invited user is not yet connected to the target Game Node, the <see cref="F:Sfs2X.Core.SFSClusterEvent.CONNECTION_REQUIRED"/> event
            is dispatched to the their client, followed by a <see cref="F:Sfs2X.Core.SFSEvent.ROOM_JOIN"/> event after the connection and login process is completed.
            In case the client is already connected to the target Game Node, the <see cref="F:Sfs2X.Core.SFSEvent.ROOM_JOIN"/> event is received immediately.
            </remarks>
            
            <seealso cref="F:Sfs2X.Core.SFSEvent.INVITATION"/>
            <seealso cref="T:Sfs2X.Requests.Game.InvitationReplyRequest"/>
        </member>
        <member name="F:Sfs2X.Requests.Cluster.ClusterInviteUsersRequest.KEY_USER">
            <exclude/>
        </member>
        <member name="F:Sfs2X.Requests.Cluster.ClusterInviteUsersRequest.KEY_USER_ID">
            <exclude/>
        </member>
        <member name="F:Sfs2X.Requests.Cluster.ClusterInviteUsersRequest.KEY_INVITATION_ID">
            <exclude/>
        </member>
        <member name="F:Sfs2X.Requests.Cluster.ClusterInviteUsersRequest.KEY_TIME">
            <exclude/>
        </member>
        <member name="F:Sfs2X.Requests.Cluster.ClusterInviteUsersRequest.KEY_PARAMS">
            <exclude/>
        </member>
        <member name="F:Sfs2X.Requests.Cluster.ClusterInviteUsersRequest.KEY_INVITEE_ID">
            <exclude/>
        </member>
        <member name="F:Sfs2X.Requests.Cluster.ClusterInviteUsersRequest.KEY_INVITED_USERS">
            <exclude/>
        </member>
        <member name="F:Sfs2X.Requests.Cluster.ClusterInviteUsersRequest.KEY_SERVER_ID">
            <exclude/>
        </member>
        <member name="F:Sfs2X.Requests.Cluster.ClusterInviteUsersRequest.KEY_ROOM_ID">
            <exclude/>
        </member>
        <member name="F:Sfs2X.Requests.Cluster.ClusterInviteUsersRequest.KEY_REPLY_ID">
            <exclude/>
        </member>
        <member name="F:Sfs2X.Requests.Cluster.ClusterInviteUsersRequest.MAX_INVITATIONS_FROM_CLIENT_SIDE">
            <exclude/>
        </member>
        <member name="F:Sfs2X.Requests.Cluster.ClusterInviteUsersRequest.MIN_EXPIRY_TIME">
            <exclude/>
        </member>
        <member name="F:Sfs2X.Requests.Cluster.ClusterInviteUsersRequest.MAX_EXPIRY_TIME">
            <exclude/>
        </member>
        <member name="M:Sfs2X.Requests.Cluster.ClusterInviteUsersRequest.#ctor(Sfs2X.Requests.Cluster.ClusterTarget,System.Collections.Generic.List{System.Object},System.Int32,Sfs2X.Entities.Data.ISFSObject)">
            <summary>
            Creates a new ClusterInviteUsersRequest instance.
            </summary>
            
            <remarks>
            The instance must be passed to the <see cref="M:Sfs2X.SmartFox.Send(Sfs2X.Requests.IRequest)">SmartFox.Send</see> method for the request to be performed.
            </remarks>
            
            <param name="target">An instance of <see cref="T:Sfs2X.Requests.Cluster.ClusterTarget"/> containing the identifiers of the Game Node and Room the users are invited to join.</param>
            <param name="invitedUsers">A list of objects representing the users to send the invitation to.</param>
            <param name="secondsForReply">The number of seconds available to each invited user to reply to the invitation (recommended range: 15 to 40 seconds).</param>
            <param name="parameters">An instance of <see cref="T:Sfs2X.Entities.Data.SFSObject"/> containing custom parameters which specify the invitation details.</param>
        </member>
        <member name="M:Sfs2X.Requests.Cluster.ClusterInviteUsersRequest.Validate(Sfs2X.SmartFox)">
            <exclude/>
        </member>
        <member name="M:Sfs2X.Requests.Cluster.ClusterInviteUsersRequest.Execute(Sfs2X.SmartFox)">
            <exclude/>
        </member>
        <member name="T:Sfs2X.Requests.QuickJoinOrCreateRoomRequest">
             <summary>
             Quickly joins the current user in a public Room, or creates a new Room if none is found.
             </summary>
             
             <remarks>
             SmartFoxServer searches for a public Room that meets the criteria expressed by the passed matching expression in the passed Room Groups.
             If no suitable Room can be found, a new Room is created, based on the passed settings.
             <para/>
             If a Room is created, the <see cref="F:Sfs2X.Core.SFSEvent.ROOM_ADD"/> event is dispatched to all the users who subscribed the Group to which the Room is associated,
             including the Room creator. In any case, if a Room to join could be found or was created, the <see cref="F:Sfs2X.Core.SFSEvent.ROOM_JOIN"/> event is then dispatched.
             <para />
             Error conditions (Room creation error, Room join error) should always be checked adding the appropriate listeners.
             </remarks>
             
             <example>
             The following example makes the user quickly join a Room:
             <code>
             void SomeMethod() {
             	sfs.AddEventListener(SFSEvent.ROOM_ADD, OnRoomAdd);
             	sfs.AddEventListener(SFSEvent.ROOM_JOIN, OnRoomJoin);
            
            		// Create a matching expression to find a Darts game with a "maxBet" variable less than 100
             	MatchExpression exp = new MatchExpression("type", StringMatch.EQUALS, "Darts").And("maxBet", NumberMatch.LESS_THAN, 100);
            		
            		// Set the Room settings to create a new Room if a matching one is not found
            		RoomSettings settings = new RoomSettings("NewRoom__" + new System.Random().Next());
            		settings.GroupId = "games";
            		settings.IsPublic = true;
            		settings.IsGame = true;
            		settings.MaxUsers = 10;
            	    settings.MinPlayersToStartGame = 2;
            
            		// Set requirements to allow users find the Room (see match expression above) in Room Variables
            		List&lt;RoomVariable&gt; roomVars = new List&lt;RoomVariable&gt;();
            		roomVars.Add(new SFSRoomVariable("type", "Darts"));
            		roomVars.Add(new SFSRoomVariable("maxBet", 50));
            		settings.Variables = roomVars;
            
            		// Search (or create) and join a public Room within the "games" Group
            		sfs.Send(new QuickJoinOrCreateRoomRequest(exp, new List&lt;string&gt;(){"games"}, settings));
             }
             
             void OnRoomAdd(BaseEvent evt) {	
             	Console.WriteLine("Room created: " + (Room)evt.Params["room"]);                         // .Net / Unity
             	System.Diagnostics.Debug.WriteLine("Room created: " + (Room)evt.Params["room"]);        // UWP
             }
             
             void OnRoomJoin(BaseEvent evt) {	
             	Console.WriteLine("Successfully joined Room: " + (Room)evt.Params["room"]);                         // .Net / Unity
             	System.Diagnostics.Debug.WriteLine("Successfully joined Room: " + (Room)evt.Params["room"]);        // UWP
             }
             </code>
             </example>
             
             <seealso cref="F:Sfs2X.Core.SFSEvent.ROOM_ADD"/>
             <seealso cref="F:Sfs2X.Core.SFSEvent.ROOM_CREATION_ERROR"/>
             <seealso cref="F:Sfs2X.Core.SFSEvent.ROOM_JOIN"/>
             <seealso cref="F:Sfs2X.Core.SFSEvent.ROOM_JOIN_ERROR"/>
        </member>
        <member name="F:Sfs2X.Requests.QuickJoinOrCreateRoomRequest.KEY_MATCH_EXPRESSION">
            <exclude/>
        </member>
        <member name="F:Sfs2X.Requests.QuickJoinOrCreateRoomRequest.KEY_GROUP_LIST">
            <exclude/>
        </member>
        <member name="F:Sfs2X.Requests.QuickJoinOrCreateRoomRequest.KEY_ROOM_SETTINGS">
            <exclude/>
        </member>
        <member name="F:Sfs2X.Requests.QuickJoinOrCreateRoomRequest.KEY_ROOM_TO_LEAVE">
            <exclude/>
        </member>
        <member name="M:Sfs2X.Requests.QuickJoinOrCreateRoomRequest.#ctor(Sfs2X.Entities.Match.MatchExpression,System.Collections.Generic.List{System.String},Sfs2X.Requests.RoomSettings,Sfs2X.Entities.Room)">
            <summary>
            Creates a new QuickJoinOrCreateRoomRequest instance.
            </summary>
            
            <remarks>
            The instance must be passed to the <see cref="M:Sfs2X.SmartFox.Send(Sfs2X.Requests.IRequest)">SmartFox.Send</see> method for the request to be performed.
            </remarks>
            
            <param name="matchExpression">A matching expression that the system will use to search a Room where to join the current user.</param>
            <param name="groupList">A list of group names to further filter the search; if null, all groups will be searched.</param>
            <param name="settings">If no Rooms are found through the matching expression, a new Room with the passed settings will be created and the user will auto-join it.</param>
            <param name="roomToLeave">An object representing the Room that the user should leave when joining the game. Default is <c>null</c>.</param>
        </member>
        <member name="M:Sfs2X.Requests.QuickJoinOrCreateRoomRequest.#ctor(Sfs2X.Entities.Match.MatchExpression,System.Collections.Generic.List{System.String},Sfs2X.Requests.RoomSettings)">
            <summary>
            See <em>QuickJoinOrCreateRoomRequest(MatchExpression, List&lt;string&gt;, RoomSettings, Room)</em> constructor.
            </summary>
        </member>
        <member name="M:Sfs2X.Requests.QuickJoinOrCreateRoomRequest.Validate(Sfs2X.SmartFox)">
            <exclude/>
        </member>
        <member name="M:Sfs2X.Requests.QuickJoinOrCreateRoomRequest.Execute(Sfs2X.SmartFox)">
            <exclude/>
        </member>
        <member name="T:Sfs2X.Util.BuddyOnlineState">
            <summary>
            Provide information on the Online Status of the Buddy.
            </summary>
            
            <exclude/>
        </member>
        <member name="F:Sfs2X.Util.BuddyOnlineState.ONLINE">
            <summary>
            The Buddy is online.
            </summary>
        </member>
        <member name="F:Sfs2X.Util.BuddyOnlineState.OFFLINE">
            <summary>
            The Buddy is offline in the Buddy List system.
            </summary>
        </member>
        <member name="F:Sfs2X.Util.BuddyOnlineState.LEFT_THE_SERVER">
            <summary>
            The Buddy left the server.
            </summary>
        </member>
        <member name="T:Sfs2X.Util.ClientDisconnectionReason">
            <summary>
            The ClientDisconnectionReason class contains the costants describing the possible reasons why a disconnection from the server occurred.
            </summary>
        </member>
        <member name="F:Sfs2X.Util.ClientDisconnectionReason.IDLE">
            <summary>
            Client was disconnected because it was idle for too long.
            </summary>
            
            <remarks>
            The connection timeout depends on the server settings.
            </remarks>
        </member>
        <member name="F:Sfs2X.Util.ClientDisconnectionReason.KICK">
            <summary>
            Client was kicked out of the server.
            </summary>
            
            <remarks>
            Kicking can occur automatically (i.e. for swearing, if the words filter is active) or due to the intervention of a user with enough privileges (i.e. an administrator or a moderator).
            </remarks>
        </member>
        <member name="F:Sfs2X.Util.ClientDisconnectionReason.BAN">
            <summary>
            Client was banned from the server.
            </summary>
            
            <remarks>
            Banning can occur automatically (i.e. for flooding, if the flood filter is active) or due to the intervention of a user with enough privileges (i.e. an administrator or a moderator).
            </remarks>
        </member>
        <member name="F:Sfs2X.Util.ClientDisconnectionReason.MANUAL">
            <summary>
            The client manually disconnected from the server.
            </summary>
            
            <remarks>
            The <see cref="M:Sfs2X.SmartFox.Disconnect"/> method on the <em>SmartFox</em> class was called.
            </remarks>
        </member>
        <member name="F:Sfs2X.Util.ClientDisconnectionReason.UNKNOWN">
            <summary>
            A generic network error occurred, and the client is unable to determine the cause of the disconnection.
            </summary>
            
            <remarks>
            The server-side log should be checked for possible error messages or warnings.
            </remarks>
        </member>
        <member name="M:Sfs2X.Util.ClientDisconnectionReason.GetReason(System.Int32)">
            <exclude/>
        </member>
        <member name="T:Sfs2X.Util.BlueBoxCfg">
            <summary>
            The BlueBoxCfg class stores the configuration parameters for the BlueBox connection. When a socket connection fails the BlueBox can help the client connect to the server via HTTP tunnel.
            </summary>
        </member>
        <member name="P:Sfs2X.Util.BlueBoxCfg.IsActive">
            <summary>
            Indicates whether the SmartFoxServer's BlueBox should be enabled or not.
            </summary>
            
            <remarks>
            The default value is <c>true</c>.
            </remarks>
        </member>
        <member name="P:Sfs2X.Util.BlueBoxCfg.UseHttps">
            <summary>
            Forces the BlueBox connection to use an HTTPS tunnel instead of standard HTTP.
            </summary>
            
            <remarks>
            <b>IMPORTANT NOTE</b>: this mode should be used exclusively if you're deploying your app to iOS devices, since Apple doesn't accept HTTP connections.
            All other platforms should <b>always use standard HTTP</b>, because the protocol is already encrypted when cryptography is activated. In other words the BlueBox transmits an encrypted protocol over a standard HTTP tunnel, which is perfectly secure.
            </remarks>
        </member>
        <member name="P:Sfs2X.Util.BlueBoxCfg.PollingRate">
            <summary>
            Specifies the BlueBox polling speed.
            </summary>
            
            <remarks>
            The default value is <c>750</c>.
            </remarks>
        </member>
        <member name="P:Sfs2X.Util.BlueBoxCfg.Proxy">
            <summary>
            Proxy server settings for the BlueBox.  
            </summary>
            
            <remarks>
            These should be used only if the client can only access HTTP services via a proxy server.
            Connection via proxy server is not supported under Universal Windows Platform.
            </remarks>
        </member>
        <member name="T:Sfs2X.Util.ProxyCfg">
            <summary>
            The ProxyCfg class stores the proxy server settings for the BlueBox.
            </summary>
            
            <remarks>
            Connection via proxy server is not supported under Universal Windows Platform.
            </remarks>
        </member>
        <member name="P:Sfs2X.Util.ProxyCfg.Host">
            <summary>
            Specifies the IP address of the proxy server.
            </summary>
        </member>
        <member name="P:Sfs2X.Util.ProxyCfg.Port">
            <summary>
            Specifies the port number of the proxy server.
            </summary>
        </member>
        <member name="P:Sfs2X.Util.ProxyCfg.BypassLocal">
            <summary>
            Indicates whether the proxy server should be bypassed for local addresses or not.
            </summary>
            
            <remarks>
            Default value is <c>true</c>.
            </remarks>
        </member>
        <member name="P:Sfs2X.Util.ProxyCfg.UserName">
            <summary>
            User name for the proxy server authentication.
            </summary>
            
            <remarks>
            Use only if the proxy server requires authentication.
            </remarks>
        </member>
        <member name="P:Sfs2X.Util.ProxyCfg.Password">
            <summary>
            Password for the proxy server authentication.
            </summary>
            /// 
            <remarks>
            Use only if the proxy server requires authentication.
            </remarks>
        </member>
        <member name="T:Sfs2X.Util.ConfigData">
             <summary>
             The ConfigData class stores the client configuration data loaded from an external XML file or passed directly to the deputy connect method.
             </summary>
             
             <remarks>
             The external configuration file is loaded by the <em>SmartFox</em> class when its <see cref="M:Sfs2X.SmartFox.LoadConfig">SmartFox.LoadConfig()</see> method is called.
             Otherwise it can be passed directly to one of the <see cref="M:Sfs2X.SmartFox.Connect(Sfs2X.Util.ConfigData)">SmartFox.Connect(ConfigData)</see> method overloads of the <em>SmartFox</em> class.
             </remarks>
             
             <seealso cref="P:Sfs2X.SmartFox.Config"/>
            
        </member>
        <member name="P:Sfs2X.Util.ConfigData.Host">
            <summary>
            Specifies the IP address or host name of the SmartFoxServer 2X instance to connect to (TCP connection).
            </summary>
            
            <remarks>
            The default value is <c>127.0.0.1</c>.
            <para/>
            When using a websocket connection to an IPv6 address, always wrap the address in square brackets.
            </remarks>
        </member>
        <member name="P:Sfs2X.Util.ConfigData.Port">
            <summary>
            Specifies the TCP port of the SmartFoxServer 2X instance to connect to (TCP connection).
            </summary>
            
            <remarks>
            The default value is <c>9933</c>.
            </remarks>
        </member>
        <member name="P:Sfs2X.Util.ConfigData.UdpHost">
            <summary>
            Specifies the IP address of the SmartFoxServer 2X instance to connect to (UDP connection).
            </summary>
            
            <remarks>
            The default value is <c>127.0.0.1</c>.
            </remarks>
        </member>
        <member name="P:Sfs2X.Util.ConfigData.UdpPort">
            <summary>
            Specifies the UDP port of the SmartFoxServer 2X instance to connect to (UDP connection).
            </summary>
            
            <remarks>
            The default value is <c>9933</c>.
            </remarks>
        </member>
        <member name="P:Sfs2X.Util.ConfigData.Zone">
            <summary>
            Specifies the Zone of the SmartFoxServer 2X instance to join.
            </summary>
            
            <remarks>
            The default value is <c>null</c>.
            </remarks>
        </member>
        <member name="P:Sfs2X.Util.ConfigData.Debug">
            <summary>
            Indicates whether the client-server messages debug should be enabled or not.
            </summary>
            
            <remarks>
            The default value is <c>false</c>.
            </remarks>
        </member>
        <member name="P:Sfs2X.Util.ConfigData.HttpPort">
            <summary>
            Specifies the port for generic HTTP communication.
            </summary>
            
            <remarks>
            The default value is <c>8080</c>.
            </remarks>
        </member>
        <member name="P:Sfs2X.Util.ConfigData.HttpsPort">
            <summary>
            Specifies the port for HTTPS communication.
            </summary>
            
            <remarks>
            For example this parameter is required during the initialization of an encrypted connection.
            The default value is <c>8443</c>.
            </remarks>
        </member>
        <member name="P:Sfs2X.Util.ConfigData.TcpNoDelay">
            <summary>
            Indicates whether SmartFoxServer's TCP socket is using the Nagle algorithm or not.
            </summary>
            
            <remarks>
            This setting must be <c>false</c> to use the Nagle algorithm; otherwise, <c>true</c>.
            The default value is <c>false</c>.
            </remarks>
        </member>
        <member name="P:Sfs2X.Util.ConfigData.BlueBox">
            <summary>
            Configuration parameters for the BlueBox connection. When a socket connection fails the BlueBox can help the client connect to the server via HTTP tunnel.
            </summary>
        </member>
        <member name="T:Sfs2X.Util.ConfigLoader">
            <exclude/>
        </member>
        <member name="M:Sfs2X.Util.ConfigLoader.LoadConfig(System.String)">
            <summary>
            By default load a file called sfs-config.xml located in the same folder of the application
            </summary>
            <param name="filePath">
            Path to config file
            </param>
        </member>
        <member name="T:Sfs2X.Util.PasswordUtil">
            <summary>
            Helper class for logging in with a pre-hashed password.
            </summary>
            
            <remarks>
            This is needed if your server-side database stores User passwords hashed with MD5.
            <para/>
            For more information see the <see href="http://docs2x.smartfoxserver.com/DevelopmentBasics/signup-assistant-basics" target="_blank">Sign Up Assistant component tutorial</see> (<b>Password Mode</b> section).
            </remarks>
        </member>
        <member name="M:Sfs2X.Util.PasswordUtil.MD5Password(System.String)">
            <summary>
            Generates the MD5 hash of the user password.
            </summary>
            
            <param name="pass">The plain text password.</param>
            
            <returns>The hashed password.</returns>
            
            <example>
            <code>
            string userName = "testName";
            string userPass = "testPass";
            
            string md5Pass = PasswordUtil.MD5Password(userPass);
            sfs.Send(new LoginRequest(userName, md5Pass, sfs.Config.Zone));
            </code>
            </example>
        </member>
        <member name="T:Sfs2X.Util.SFSErrorCodes">
            <summary>
            The SFSErrorCodes class provides a mean of translation between server error codes and their relative error messages.
            </summary>
            
            <remarks>
            Error messages are provided by default in the English language but they can be localized and substituted in any other language.
            The error messages contain special placeholders that are processed at runtime and substituted with runtime data.
            They are in the form of a number enclosed in curly brackets such as: {0}, {1}, etc. Please make sure you maintain these placeholders while translating the messages.
            <para/>
            For more informations please visit this link: <see href="http://docs2x.smartfoxserver.com/AdvancedTopics/client-error-messages" target="_blank">http://docs2x.smartfoxserver.com/AdvancedTopics/client-error-messages</see>.
            </remarks>
        </member>
        <member name="M:Sfs2X.Util.SFSErrorCodes.SetErrorMessage(System.Int32,System.String)">
            <summary>
            Sets the text of the error message corresponding to the passed error code.
            </summary>
            
            <remarks>
            Make sure to maintain all the placeholders while modifying the messages.
            </remarks>
            
            <param name="code">The code of the error message to be modified.</param>
            <param name="message">The new error message, including the placeholders for runtime informations.</param>
            
            <example>
            The following example shows how to translate error 13 to French language retaining the required placeholders:
            <code>
            SFSErrorCodes.SetErrorMessage(13, "Le Groupe demandé n'est pas disponible - Salle: {0}; Groupe: {1}");
            </code>
            </example>
        </member>
        <member name="M:Sfs2X.Util.SFSErrorCodes.GetErrorMessage(System.Int32,Sfs2X.Logging.Logger,System.Object[])">
            <exclude/>
        </member>
        <member name="T:Sfs2X.Util.LagMonitor.DefaultLagMonitor">
            <exclude/>
        </member>
        <member name="T:Sfs2X.Util.LagMonitor.ILagMonitor">
            <exclude/>
        </member>
        <member name="T:Sfs2X.Util.XMLNode">
            <exclude/>
        </member>
        <member name="T:Sfs2X.Util.XMLNodeList">
            <exclude/>
        </member>
        <member name="T:Sfs2X.Util.XMLParser">
            <exclude/>
        </member>
        <member name="T:Sfs2X.Util.UseWebSocket">
            <summary>
            The available websocket connection modes to be passed to the SmartFox class constructor.
            </summary>
            
            <seealso cref="M:Sfs2X.SmartFox.#ctor(Sfs2X.Util.UseWebSocket)"/>
        </member>
        <member name="F:Sfs2X.Util.UseWebSocket.WS">
            <summary>
            Unsecure, text-type websocket communication should be established when connecting to a SmartFoxServer 2X instance.
            </summary>
        </member>
        <member name="F:Sfs2X.Util.UseWebSocket.WSS">
            <summary>
            Secure, text-type websocket communication should be established when connecting to a SmartFoxServer 2X instance.
            </summary>
        </member>
        <member name="F:Sfs2X.Util.UseWebSocket.WS_BIN">
            <summary>
            Unsecure, binary-type websocket communication should be established when connecting to a SmartFoxServer 2X instance.
            </summary>
        </member>
        <member name="F:Sfs2X.Util.UseWebSocket.WSS_BIN">
            <summary>
            Secure, binary-type websocket communication should be established when connecting to a SmartFoxServer 2X instance.
            </summary>
        </member>
        <member name="T:Sfs2X.Util.CryptoInitializerV2">
            This version of the CryptoInitializerV2 class is used when building the project for native .Net and UWP only (not Unity).
            See CryptoinitializerV2-Unity.cs.
        </member>
        <member name="T:Sfs2X.WebSocketSharp.ByteOrder">
            <summary>
            Specifies the byte order.
            </summary>
        </member>
        <member name="F:Sfs2X.WebSocketSharp.ByteOrder.Little">
            <summary>
            Specifies Little-endian.
            </summary>
        </member>
        <member name="F:Sfs2X.WebSocketSharp.ByteOrder.Big">
            <summary>
            Specifies Big-endian.
            </summary>
        </member>
        <member name="T:Sfs2X.WebSocketSharp.CloseEventArgs">
            <summary>
            Represents the event data for the <see cref="E:Sfs2X.WebSocketSharp.WebSocket.OnClose"/> event.
            </summary>
            <remarks>
              <para>
              The close event occurs when the WebSocket connection has been closed.
              </para>
              <para>
              If you would like to get the reason for the connection close,
              you should access the <see cref="P:Sfs2X.WebSocketSharp.CloseEventArgs.Code"/> or <see cref="P:Sfs2X.WebSocketSharp.CloseEventArgs.Reason"/>
              property.
              </para>
            </remarks>
        </member>
        <member name="P:Sfs2X.WebSocketSharp.CloseEventArgs.Code">
            <summary>
            Gets the status code for the connection close.
            </summary>
            <value>
              <para>
              A <see cref="T:System.UInt16"/> that represents the status code for
              the connection close.
              </para>
              <para>
              1005 (no status) if not present.
              </para>
            </value>
        </member>
        <member name="P:Sfs2X.WebSocketSharp.CloseEventArgs.Reason">
            <summary>
            Gets the reason for the connection close.
            </summary>
            <value>
              <para>
              A <see cref="T:System.String"/> that represents the reason for
              the connection close.
              </para>
              <para>
              An empty string if not present.
              </para>
            </value>
        </member>
        <member name="P:Sfs2X.WebSocketSharp.CloseEventArgs.WasClean">
            <summary>
            Gets a value indicating whether the connection has been closed cleanly.
            </summary>
            <value>
            <c>true</c> if the connection has been closed cleanly; otherwise,
            <c>false</c>.
            </value>
        </member>
        <member name="T:Sfs2X.WebSocketSharp.CloseStatusCode">
            <summary>
            Indicates the status code for the WebSocket connection close.
            </summary>
            <remarks>
              <para>
              The values of this enumeration are defined in
              <see href="http://tools.ietf.org/html/rfc6455#section-7.4">
              Section 7.4</see> of RFC 6455.
              </para>
              <para>
              "Reserved value" cannot be sent as a status code in
              closing handshake by an endpoint.
              </para>
            </remarks>
        </member>
        <member name="F:Sfs2X.WebSocketSharp.CloseStatusCode.Normal">
            <summary>
            Equivalent to close status 1000. Indicates normal close.
            </summary>
        </member>
        <member name="F:Sfs2X.WebSocketSharp.CloseStatusCode.Away">
            <summary>
            Equivalent to close status 1001. Indicates that an endpoint is
            going away.
            </summary>
        </member>
        <member name="F:Sfs2X.WebSocketSharp.CloseStatusCode.ProtocolError">
            <summary>
            Equivalent to close status 1002. Indicates that an endpoint is
            terminating the connection due to a protocol error.
            </summary>
        </member>
        <member name="F:Sfs2X.WebSocketSharp.CloseStatusCode.UnsupportedData">
            <summary>
            Equivalent to close status 1003. Indicates that an endpoint is
            terminating the connection because it has received a type of
            data that it cannot accept.
            </summary>
        </member>
        <member name="F:Sfs2X.WebSocketSharp.CloseStatusCode.Undefined">
            <summary>
            Equivalent to close status 1004. Still undefined. A Reserved value.
            </summary>
        </member>
        <member name="F:Sfs2X.WebSocketSharp.CloseStatusCode.NoStatus">
            <summary>
            Equivalent to close status 1005. Indicates that no status code was
            actually present. A Reserved value.
            </summary>
        </member>
        <member name="F:Sfs2X.WebSocketSharp.CloseStatusCode.Abnormal">
            <summary>
            Equivalent to close status 1006. Indicates that the connection was
            closed abnormally. A Reserved value.
            </summary>
        </member>
        <member name="F:Sfs2X.WebSocketSharp.CloseStatusCode.InvalidData">
            <summary>
            Equivalent to close status 1007. Indicates that an endpoint is
            terminating the connection because it has received a message that
            contains data that is not consistent with the type of the message.
            </summary>
        </member>
        <member name="F:Sfs2X.WebSocketSharp.CloseStatusCode.PolicyViolation">
            <summary>
            Equivalent to close status 1008. Indicates that an endpoint is
            terminating the connection because it has received a message that
            violates its policy.
            </summary>
        </member>
        <member name="F:Sfs2X.WebSocketSharp.CloseStatusCode.TooBig">
            <summary>
            Equivalent to close status 1009. Indicates that an endpoint is
            terminating the connection because it has received a message that
            is too big to process.
            </summary>
        </member>
        <member name="F:Sfs2X.WebSocketSharp.CloseStatusCode.MandatoryExtension">
            <summary>
            Equivalent to close status 1010. Indicates that a client is
            terminating the connection because it has expected the server to
            negotiate one or more extension, but the server did not return
            them in the handshake response.
            </summary>
        </member>
        <member name="F:Sfs2X.WebSocketSharp.CloseStatusCode.ServerError">
            <summary>
            Equivalent to close status 1011. Indicates that a server is
            terminating the connection because it has encountered an unexpected
            condition that prevented it from fulfilling the request.
            </summary>
        </member>
        <member name="F:Sfs2X.WebSocketSharp.CloseStatusCode.TlsHandshakeFailure">
            <summary>
            Equivalent to close status 1015. Indicates that the connection was
            closed due to a failure to perform a TLS handshake. A Reserved value.
            </summary>
        </member>
        <member name="T:Sfs2X.WebSocketSharp.CompressionMethod">
            <summary>
            Specifies the method for compression.
            </summary>
            <remarks>
            The methods are defined in
            <see href="https://tools.ietf.org/html/rfc7692">
            Compression Extensions for WebSocket</see>.
            </remarks>
        </member>
        <member name="F:Sfs2X.WebSocketSharp.CompressionMethod.None">
            <summary>
            Specifies no compression.
            </summary>
        </member>
        <member name="F:Sfs2X.WebSocketSharp.CompressionMethod.Deflate">
            <summary>
            Specifies DEFLATE.
            </summary>
        </member>
        <member name="T:Sfs2X.WebSocketSharp.ErrorEventArgs">
            <summary>
            Represents the event data for the <see cref="E:Sfs2X.WebSocketSharp.WebSocket.OnError"/> event.
            </summary>
            <remarks>
              <para>
              The error event occurs when the <see cref="T:Sfs2X.WebSocketSharp.WebSocket"/> interface
              gets an error.
              </para>
              <para>
              If you would like to get the error message, you should access
              the <see cref="P:Sfs2X.WebSocketSharp.ErrorEventArgs.Message"/> property.
              </para>
              <para>
              If the error is due to an exception, you can get it by accessing
              the <see cref="P:Sfs2X.WebSocketSharp.ErrorEventArgs.Exception"/> property.
              </para>
            </remarks>
        </member>
        <member name="P:Sfs2X.WebSocketSharp.ErrorEventArgs.Exception">
            <summary>
            Gets the exception that caused the error.
            </summary>
            <value>
              <para>
              An <see cref="T:System.Exception"/> instance that represents
              the cause of the error.
              </para>
              <para>
              <see langword="null"/> if not present.
              </para>
            </value>
        </member>
        <member name="P:Sfs2X.WebSocketSharp.ErrorEventArgs.Message">
            <summary>
            Gets the error message.
            </summary>
            <value>
            A <see cref="T:System.String"/> that represents the error message.
            </value>
        </member>
        <member name="T:Sfs2X.WebSocketSharp.Ext">
            <summary>
            Provides a set of static methods for websocket-sharp.
            </summary>
        </member>
        <member name="M:Sfs2X.WebSocketSharp.Ext.GetDescription(Sfs2X.WebSocketSharp.Net.HttpStatusCode)">
            <summary>
            Gets the description of the specified HTTP status code.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents the description of
            the HTTP status code.
            </returns>
            <param name="code">
              <para>
              One of the <see cref="T:Sfs2X.WebSocketSharp.Net.HttpStatusCode"/> enum values.
              </para>
              <para>
              It specifies the HTTP status code.
              </para>
            </param>
        </member>
        <member name="M:Sfs2X.WebSocketSharp.Ext.GetStatusDescription(System.Int32)">
            <summary>
            Gets the description of the specified HTTP status code.
            </summary>
            <returns>
              <para>
              A <see cref="T:System.String"/> that represents the description of
              the HTTP status code.
              </para>
              <para>
              An empty string if the description is not present.
              </para>
            </returns>
            <param name="code">
            An <see cref="T:System.Int32"/> that specifies the HTTP status code.
            </param>
        </member>
        <member name="M:Sfs2X.WebSocketSharp.Ext.IsCloseStatusCode(System.UInt16)">
            <summary>
            Determines whether the specified ushort is in the range of
            the status code for the WebSocket connection close.
            </summary>
            <remarks>
              <para>
              The ranges are the following:
              </para>
              <list type="bullet">
                <item>
                  <term>
                  1000-2999: These numbers are reserved for definition by
                  the WebSocket protocol.
                  </term>
                </item>
                <item>
                  <term>
                  3000-3999: These numbers are reserved for use by libraries,
                  frameworks, and applications.
                  </term>
                </item>
                <item>
                  <term>
                  4000-4999: These numbers are reserved for private use.
                  </term>
                </item>
              </list>
            </remarks>
            <returns>
            <c>true</c> if <paramref name="value"/> is in the range of
            the status code for the close; otherwise, <c>false</c>.
            </returns>
            <param name="value">
            A <see cref="T:System.UInt16"/> to test.
            </param>
        </member>
        <member name="M:Sfs2X.WebSocketSharp.Ext.IsEnclosedIn(System.String,System.Char)">
            <summary>
            Determines whether the specified string is enclosed in
            the specified character.
            </summary>
            <returns>
            <c>true</c> if <paramref name="value"/> is enclosed in
            <paramref name="c"/>; otherwise, <c>false</c>.
            </returns>
            <param name="value">
            A <see cref="T:System.String"/> to test.
            </param>
            <param name="c">
            A <see cref="T:System.Char"/> to find.
            </param>
        </member>
        <member name="M:Sfs2X.WebSocketSharp.Ext.IsHostOrder(Sfs2X.WebSocketSharp.ByteOrder)">
            <summary>
            Determines whether the specified byte order is host (this computer
            architecture) byte order.
            </summary>
            <returns>
            <c>true</c> if <paramref name="order"/> is host byte order; otherwise,
            <c>false</c>.
            </returns>
            <param name="order">
            One of the <see cref="T:Sfs2X.WebSocketSharp.ByteOrder"/> enum values to test.
            </param>
        </member>
        <member name="M:Sfs2X.WebSocketSharp.Ext.IsLocal(System.Net.IPAddress)">
            <summary>
            Determines whether the specified IP address is a local IP address.
            </summary>
            <remarks>
            This local means NOT REMOTE for the current host.
            </remarks>
            <returns>
            <c>true</c> if <paramref name="address"/> is a local IP address;
            otherwise, <c>false</c>.
            </returns>
            <param name="address">
            A <see cref="T:System.Net.IPAddress"/> to test.
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="address"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:Sfs2X.WebSocketSharp.Ext.IsNullOrEmpty(System.String)">
            <summary>
            Determines whether the specified string is <see langword="null"/> or
            an empty string.
            </summary>
            <returns>
            <c>true</c> if <paramref name="value"/> is <see langword="null"/> or
            an empty string; otherwise, <c>false</c>.
            </returns>
            <param name="value">
            A <see cref="T:System.String"/> to test.
            </param>
        </member>
        <member name="M:Sfs2X.WebSocketSharp.Ext.SubArray``1(``0[],System.Int32,System.Int32)">
            <summary>
            Retrieves a sub-array from the specified array. A sub-array starts at
            the specified index in the array.
            </summary>
            <returns>
            An array of T that receives a sub-array.
            </returns>
            <param name="array">
            An array of T from which to retrieve a sub-array.
            </param>
            <param name="startIndex">
            An <see cref="T:System.Int32"/> that specifies the zero-based index in the array
            at which retrieving starts.
            </param>
            <param name="length">
            An <see cref="T:System.Int32"/> that specifies the number of elements to retrieve.
            </param>
            <typeparam name="T">
            The type of elements in the array.
            </typeparam>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="array"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
              <para>
              <paramref name="startIndex"/> is less than zero.
              </para>
              <para>
              -or-
              </para>
              <para>
              <paramref name="startIndex"/> is greater than the end of the array.
              </para>
              <para>
              -or-
              </para>
              <para>
              <paramref name="length"/> is less than zero.
              </para>
              <para>
              -or-
              </para>
              <para>
              <paramref name="length"/> is greater than the number of elements from
              <paramref name="startIndex"/> to the end of the array.
              </para>
            </exception>
        </member>
        <member name="M:Sfs2X.WebSocketSharp.Ext.SubArray``1(``0[],System.Int64,System.Int64)">
            <summary>
            Retrieves a sub-array from the specified array. A sub-array starts at
            the specified index in the array.
            </summary>
            <returns>
            An array of T that receives a sub-array.
            </returns>
            <param name="array">
            An array of T from which to retrieve a sub-array.
            </param>
            <param name="startIndex">
            A <see cref="T:System.Int64"/> that specifies the zero-based index in the array
            at which retrieving starts.
            </param>
            <param name="length">
            A <see cref="T:System.Int64"/> that specifies the number of elements to retrieve.
            </param>
            <typeparam name="T">
            The type of elements in the array.
            </typeparam>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="array"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
              <para>
              <paramref name="startIndex"/> is less than zero.
              </para>
              <para>
              -or-
              </para>
              <para>
              <paramref name="startIndex"/> is greater than the end of the array.
              </para>
              <para>
              -or-
              </para>
              <para>
              <paramref name="length"/> is less than zero.
              </para>
              <para>
              -or-
              </para>
              <para>
              <paramref name="length"/> is greater than the number of elements from
              <paramref name="startIndex"/> to the end of the array.
              </para>
            </exception>
        </member>
        <member name="M:Sfs2X.WebSocketSharp.Ext.Times(System.Int32,System.Action{System.Int32})">
            <summary>
            Executes the specified delegate <paramref name="n"/> times.
            </summary>
            <param name="n">
            An <see cref="T:System.Int32"/> that specifies the number of times to execute.
            </param>
            <param name="action">
              <para>
              An <c>Action&lt;int&gt;</c> delegate to execute.
              </para>
              <para>
              The <see cref="T:System.Int32"/> parameter is the zero-based count of iteration.
              </para>
            </param>
        </member>
        <member name="M:Sfs2X.WebSocketSharp.Ext.Times(System.Int64,System.Action{System.Int64})">
            <summary>
            Executes the specified delegate <paramref name="n"/> times.
            </summary>
            <param name="n">
            A <see cref="T:System.Int64"/> that specifies the number of times to execute.
            </param>
            <param name="action">
              <para>
              An <c>Action&lt;long&gt;</c> delegate to execute.
              </para>
              <para>
              The <see cref="T:System.Int64"/> parameter is the zero-based count of iteration.
              </para>
            </param>
        </member>
        <member name="M:Sfs2X.WebSocketSharp.Ext.ToHostOrder(System.Byte[],Sfs2X.WebSocketSharp.ByteOrder)">
            <summary>
            Converts the order of elements in the specified byte array to
            host (this computer architecture) byte order.
            </summary>
            <returns>
              <para>
              An array of <see cref="T:System.Byte"/> converted from
              <paramref name="source"/>.
              </para>
              <para>
              <paramref name="source"/> if the number of elements in
              it is less than 2 or <paramref name="sourceOrder"/> is
              same as host byte order.
              </para>
            </returns>
            <param name="source">
            An array of <see cref="T:System.Byte"/> to convert.
            </param>
            <param name="sourceOrder">
              <para>
              One of the <see cref="T:Sfs2X.WebSocketSharp.ByteOrder"/> enum values.
              </para>
              <para>
              It specifies the order of elements in <paramref name="source"/>.
              </para>
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="source"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:Sfs2X.WebSocketSharp.Ext.ToString``1(``0[],System.String)">
            <summary>
            Converts the specified array to a string.
            </summary>
            <returns>
              <para>
              A <see cref="T:System.String"/> converted by concatenating each element of
              <paramref name="array"/> across <paramref name="separator"/>.
              </para>
              <para>
              An empty string if <paramref name="array"/> is an empty array.
              </para>
            </returns>
            <param name="array">
            An array of T to convert.
            </param>
            <param name="separator">
            A <see cref="T:System.String"/> used to separate each element of
            <paramref name="array"/>.
            </param>
            <typeparam name="T">
            The type of elements in <paramref name="array"/>.
            </typeparam>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="array"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:Sfs2X.WebSocketSharp.Ext.ToUri(System.String)">
            <summary>
            Converts the specified string to a <see cref="T:System.Uri"/>.
            </summary>
            <returns>
              <para>
              A <see cref="T:System.Uri"/> converted from <paramref name="value"/>.
              </para>
              <para>
              <see langword="null"/> if the conversion has failed.
              </para>
            </returns>
            <param name="value">
            A <see cref="T:System.String"/> to convert.
            </param>
        </member>
        <member name="T:Sfs2X.WebSocketSharp.Fin">
            <summary>
            Indicates whether a WebSocket frame is the final frame of a message.
            </summary>
            <remarks>
            The values of this enumeration are defined in
            <see href="http://tools.ietf.org/html/rfc6455#section-5.2">Section 5.2</see> of RFC 6455.
            </remarks>
        </member>
        <member name="F:Sfs2X.WebSocketSharp.Fin.More">
            <summary>
            Equivalent to numeric value 0. Indicates more frames of a message follow.
            </summary>
        </member>
        <member name="F:Sfs2X.WebSocketSharp.Fin.Final">
            <summary>
            Equivalent to numeric value 1. Indicates the final frame of a message.
            </summary>
        </member>
        <member name="T:Sfs2X.WebSocketSharp.LogData">
            <summary>
            Represents a log data used by the <see cref="T:Sfs2X.WebSocketSharp.Logger"/> class.
            </summary>
        </member>
        <member name="P:Sfs2X.WebSocketSharp.LogData.Caller">
            <summary>
            Gets the information of the logging method caller.
            </summary>
            <value>
            A <see cref="T:System.Diagnostics.StackFrame"/> that provides the information of
            the logging method caller.
            </value>
        </member>
        <member name="P:Sfs2X.WebSocketSharp.LogData.Date">
            <summary>
            Gets the date and time when the log data was created.
            </summary>
            <value>
            A <see cref="T:System.DateTime"/> that represents the date and time when
            the log data was created.
            </value>
        </member>
        <member name="P:Sfs2X.WebSocketSharp.LogData.Level">
            <summary>
            Gets the logging level of the log data.
            </summary>
            <value>
            One of the <see cref="T:Sfs2X.WebSocketSharp.LogLevel"/> enum values that represents
            the logging level of the log data.
            </value>
        </member>
        <member name="P:Sfs2X.WebSocketSharp.LogData.Message">
            <summary>
            Gets the message of the log data.
            </summary>
            <value>
            A <see cref="T:System.String"/> that represents the message of the log data.
            </value>
        </member>
        <member name="M:Sfs2X.WebSocketSharp.LogData.ToString">
            <summary>
            Returns a string that represents the current instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents the current instance.
            </returns>
        </member>
        <member name="T:Sfs2X.WebSocketSharp.LogLevel">
            <summary>
            Specifies the logging level.
            </summary>
        </member>
        <member name="F:Sfs2X.WebSocketSharp.LogLevel.Trace">
            <summary>
            Specifies the bottom logging level.
            </summary>
        </member>
        <member name="F:Sfs2X.WebSocketSharp.LogLevel.Debug">
            <summary>
            Specifies the 2nd logging level from the bottom.
            </summary>
        </member>
        <member name="F:Sfs2X.WebSocketSharp.LogLevel.Info">
            <summary>
            Specifies the 3rd logging level from the bottom.
            </summary>
        </member>
        <member name="F:Sfs2X.WebSocketSharp.LogLevel.Warn">
            <summary>
            Specifies the 3rd logging level from the top.
            </summary>
        </member>
        <member name="F:Sfs2X.WebSocketSharp.LogLevel.Error">
            <summary>
            Specifies the 2nd logging level from the top.
            </summary>
        </member>
        <member name="F:Sfs2X.WebSocketSharp.LogLevel.Fatal">
            <summary>
            Specifies the top logging level.
            </summary>
        </member>
        <member name="F:Sfs2X.WebSocketSharp.LogLevel.None">
            <summary>
            Specifies not to output logs.
            </summary>
        </member>
        <member name="T:Sfs2X.WebSocketSharp.Logger">
            <summary>
            Provides a set of methods and properties for logging.
            </summary>
            <remarks>
              <para>
              If you output a log with lower than the current logging level,
              it cannot be outputted.
              </para>
              <para>
              The default output method writes a log to the standard output
              stream and the text file if it has a valid path.
              </para>
              <para>
              If you would like to use the custom output method, you should
              specify it with the constructor or the <see cref="P:Sfs2X.WebSocketSharp.Logger.Output"/>
              property.
              </para>
            </remarks>
        </member>
        <member name="M:Sfs2X.WebSocketSharp.Logger.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Sfs2X.WebSocketSharp.Logger"/> class.
            </summary>
            <remarks>
            This constructor initializes the logging level with the Error level.
            </remarks>
        </member>
        <member name="M:Sfs2X.WebSocketSharp.Logger.#ctor(Sfs2X.WebSocketSharp.LogLevel)">
            <summary>
            Initializes a new instance of the <see cref="T:Sfs2X.WebSocketSharp.Logger"/> class with
            the specified logging level.
            </summary>
            <param name="level">
            One of the <see cref="T:Sfs2X.WebSocketSharp.LogLevel"/> enum values that specifies
            the logging level.
            </param>
        </member>
        <member name="M:Sfs2X.WebSocketSharp.Logger.#ctor(Sfs2X.WebSocketSharp.LogLevel,System.String,System.Action{Sfs2X.WebSocketSharp.LogData,System.String})">
            <summary>
            Initializes a new instance of the <see cref="T:Sfs2X.WebSocketSharp.Logger"/> class with
            the specified logging level, path to the log file, and delegate
            used to output a log.
            </summary>
            <param name="level">
            One of the <see cref="T:Sfs2X.WebSocketSharp.LogLevel"/> enum values that specifies
            the logging level.
            </param>
            <param name="file">
            A <see cref="T:System.String"/> that specifies the path to the log file.
            </param>
            <param name="output">
            An <see cref="T:System.Action{LogData, string}"/> that specifies
            the delegate used to output a log.
            </param>
        </member>
        <member name="P:Sfs2X.WebSocketSharp.Logger.File">
            <summary>
            Gets or sets the path to the log file.
            </summary>
            <value>
            A <see cref="T:System.String"/> that represents the path to the log file if any.
            </value>
        </member>
        <member name="P:Sfs2X.WebSocketSharp.Logger.Level">
            <summary>
            Gets or sets the current logging level.
            </summary>
            <remarks>
            A log with lower than the value of this property cannot be outputted.
            </remarks>
            <value>
              <para>
              One of the <see cref="T:Sfs2X.WebSocketSharp.LogLevel"/> enum values.
              </para>
              <para>
              It represents the current logging level.
              </para>
            </value>
        </member>
        <member name="P:Sfs2X.WebSocketSharp.Logger.Output">
            <summary>
            Gets or sets the delegate used to output a log.
            </summary>
            <value>
              <para>
              An <see cref="T:System.Action{LogData, string}"/> delegate.
              </para>
              <para>
              It references the method used to output a log.
              </para>
              <para>
              The string parameter passed to the delegate is the value of
              the <see cref="P:Sfs2X.WebSocketSharp.Logger.File"/> property.
              </para>
              <para>
              If the value to set is <see langword="null"/>, the default
              output method is set.
              </para>
            </value>
        </member>
        <member name="M:Sfs2X.WebSocketSharp.Logger.Debug(System.String)">
            <summary>
            Outputs the specified message as a log with the Debug level.
            </summary>
            <remarks>
            If the current logging level is higher than the Debug level,
            this method does not output the message as a log.
            </remarks>
            <param name="message">
            A <see cref="T:System.String"/> that specifies the message to output.
            </param>
        </member>
        <member name="M:Sfs2X.WebSocketSharp.Logger.Error(System.String)">
            <summary>
            Outputs the specified message as a log with the Error level.
            </summary>
            <remarks>
            If the current logging level is higher than the Error level,
            this method does not output the message as a log.
            </remarks>
            <param name="message">
            A <see cref="T:System.String"/> that specifies the message to output.
            </param>
        </member>
        <member name="M:Sfs2X.WebSocketSharp.Logger.Fatal(System.String)">
            <summary>
            Outputs the specified message as a log with the Fatal level.
            </summary>
            <param name="message">
            A <see cref="T:System.String"/> that specifies the message to output.
            </param>
        </member>
        <member name="M:Sfs2X.WebSocketSharp.Logger.Info(System.String)">
            <summary>
            Outputs the specified message as a log with the Info level.
            </summary>
            <remarks>
            If the current logging level is higher than the Info level,
            this method does not output the message as a log.
            </remarks>
            <param name="message">
            A <see cref="T:System.String"/> that specifies the message to output.
            </param>
        </member>
        <member name="M:Sfs2X.WebSocketSharp.Logger.Trace(System.String)">
            <summary>
            Outputs the specified message as a log with the Trace level.
            </summary>
            <remarks>
            If the current logging level is higher than the Trace level,
            this method does not output the message as a log.
            </remarks>
            <param name="message">
            A <see cref="T:System.String"/> that specifies the message to output.
            </param>
        </member>
        <member name="M:Sfs2X.WebSocketSharp.Logger.Warn(System.String)">
            <summary>
            Outputs the specified message as a log with the Warn level.
            </summary>
            <remarks>
            If the current logging level is higher than the Warn level,
            this method does not output the message as a log.
            </remarks>
            <param name="message">
            A <see cref="T:System.String"/> that specifies the message to output.
            </param>
        </member>
        <member name="T:Sfs2X.WebSocketSharp.Mask">
            <summary>
            Indicates whether the payload data of a WebSocket frame is masked.
            </summary>
            <remarks>
            The values of this enumeration are defined in
            <see href="http://tools.ietf.org/html/rfc6455#section-5.2">Section 5.2</see> of RFC 6455.
            </remarks>
        </member>
        <member name="F:Sfs2X.WebSocketSharp.Mask.Off">
            <summary>
            Equivalent to numeric value 0. Indicates not masked.
            </summary>
        </member>
        <member name="F:Sfs2X.WebSocketSharp.Mask.On">
            <summary>
            Equivalent to numeric value 1. Indicates masked.
            </summary>
        </member>
        <member name="T:Sfs2X.WebSocketSharp.MessageEventArgs">
            <summary>
            Represents the event data for the <see cref="E:Sfs2X.WebSocketSharp.WebSocket.OnMessage"/> event.
            </summary>
            <remarks>
              <para>
              The message event occurs when the <see cref="T:Sfs2X.WebSocketSharp.WebSocket"/> interface
              receives a message or a ping if the <see cref="P:Sfs2X.WebSocketSharp.WebSocket.EmitOnPing"/>
              property is set to <c>true</c>.
              </para>
              <para>
              If you would like to get the message data, you should access
              the <see cref="P:Sfs2X.WebSocketSharp.MessageEventArgs.Data"/> or <see cref="P:Sfs2X.WebSocketSharp.MessageEventArgs.RawData"/> property.
              </para>
            </remarks>
        </member>
        <member name="P:Sfs2X.WebSocketSharp.MessageEventArgs.Opcode">
            <summary>
            Gets the opcode for the message.
            </summary>
            <value>
            <see cref="F:Sfs2X.WebSocketSharp.Opcode.Text"/>, <see cref="F:Sfs2X.WebSocketSharp.Opcode.Binary"/>,
            or <see cref="F:Sfs2X.WebSocketSharp.Opcode.Ping"/>.
            </value>
        </member>
        <member name="P:Sfs2X.WebSocketSharp.MessageEventArgs.Data">
            <summary>
            Gets the message data as a <see cref="T:System.String"/>.
            </summary>
            <value>
              <para>
              A <see cref="T:System.String"/> that represents the message data
              if the message type is text or ping.
              </para>
              <para>
              <see langword="null"/> if the message type is binary or
              the message data could not be UTF-8-decoded.
              </para>
            </value>
        </member>
        <member name="P:Sfs2X.WebSocketSharp.MessageEventArgs.IsBinary">
            <summary>
            Gets a value indicating whether the message type is binary.
            </summary>
            <value>
            <c>true</c> if the message type is binary; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Sfs2X.WebSocketSharp.MessageEventArgs.IsPing">
            <summary>
            Gets a value indicating whether the message type is ping.
            </summary>
            <value>
            <c>true</c> if the message type is ping; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Sfs2X.WebSocketSharp.MessageEventArgs.IsText">
            <summary>
            Gets a value indicating whether the message type is text.
            </summary>
            <value>
            <c>true</c> if the message type is text; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Sfs2X.WebSocketSharp.MessageEventArgs.RawData">
            <summary>
            Gets the message data as an array of <see cref="T:System.Byte"/>.
            </summary>
            <value>
            An array of <see cref="T:System.Byte"/> that represents the message data.
            </value>
        </member>
        <member name="T:Sfs2X.WebSocketSharp.Opcode">
            <summary>
            Indicates the WebSocket frame type.
            </summary>
            <remarks>
            The values of this enumeration are defined in
            <see href="http://tools.ietf.org/html/rfc6455#section-5.2">
            Section 5.2</see> of RFC 6455.
            </remarks>
        </member>
        <member name="F:Sfs2X.WebSocketSharp.Opcode.Cont">
            <summary>
            Equivalent to numeric value 0. Indicates continuation frame.
            </summary>
        </member>
        <member name="F:Sfs2X.WebSocketSharp.Opcode.Text">
            <summary>
            Equivalent to numeric value 1. Indicates text frame.
            </summary>
        </member>
        <member name="F:Sfs2X.WebSocketSharp.Opcode.Binary">
            <summary>
            Equivalent to numeric value 2. Indicates binary frame.
            </summary>
        </member>
        <member name="F:Sfs2X.WebSocketSharp.Opcode.Close">
            <summary>
            Equivalent to numeric value 8. Indicates connection close frame.
            </summary>
        </member>
        <member name="F:Sfs2X.WebSocketSharp.Opcode.Ping">
            <summary>
            Equivalent to numeric value 9. Indicates ping frame.
            </summary>
        </member>
        <member name="F:Sfs2X.WebSocketSharp.Opcode.Pong">
            <summary>
            Equivalent to numeric value 10. Indicates pong frame.
            </summary>
        </member>
        <member name="F:Sfs2X.WebSocketSharp.PayloadData.Empty">
            <summary>
            Represents the empty payload data.
            </summary>
        </member>
        <member name="F:Sfs2X.WebSocketSharp.PayloadData.MaxLength">
            <summary>
            Represents the allowable max length of payload data.
            </summary>
            <remarks>
              <para>
              A <see cref="T:Sfs2X.WebSocketSharp.WebSocketException"/> is thrown when the length of
              incoming payload data is greater than the value of this field.
              </para>
              <para>
              If you would like to change the value of this field, it must be
              a number between <see cref="F:Sfs2X.WebSocketSharp.WebSocket.FragmentLength"/> and
              <see cref="F:System.Int64.MaxValue"/> inclusive.
              </para>
            </remarks>
        </member>
        <member name="T:Sfs2X.WebSocketSharp.Rsv">
            <summary>
            Indicates whether each RSV (RSV1, RSV2, and RSV3) of a WebSocket frame is non-zero.
            </summary>
            <remarks>
            The values of this enumeration are defined in
            <see href="http://tools.ietf.org/html/rfc6455#section-5.2">Section 5.2</see> of RFC 6455.
            </remarks>
        </member>
        <member name="F:Sfs2X.WebSocketSharp.Rsv.Off">
            <summary>
            Equivalent to numeric value 0. Indicates zero.
            </summary>
        </member>
        <member name="F:Sfs2X.WebSocketSharp.Rsv.On">
            <summary>
            Equivalent to numeric value 1. Indicates non-zero.
            </summary>
        </member>
        <member name="T:Sfs2X.WebSocketSharp.WebSocket">
            <summary>
            Implements the WebSocket interface.
            </summary>
            <remarks>
              <para>
              This class provides a set of methods and properties for two-way
              communication using the WebSocket protocol.
              </para>
              <para>
              The WebSocket protocol is defined in
              <see href="http://tools.ietf.org/html/rfc6455">RFC 6455</see>.
              </para>
            </remarks>
        </member>
        <member name="F:Sfs2X.WebSocketSharp.WebSocket.EmptyBytes">
            <summary>
            Represents the empty array of <see cref="T:System.Byte"/> used internally.
            </summary>
        </member>
        <member name="F:Sfs2X.WebSocketSharp.WebSocket.FragmentLength">
            <summary>
            Represents the length used to determine whether the data should
            be fragmented in sending.
            </summary>
            <remarks>
              <para>
              The data will be fragmented if its length is greater than
              the value of this field.
              </para>
              <para>
              If you would like to change the value, you must set it to
              a value between 125 and <c>Int32.MaxValue - 14</c> inclusive.
              </para>
            </remarks>
        </member>
        <member name="F:Sfs2X.WebSocketSharp.WebSocket.RandomNumber">
            <summary>
            Represents the random number generator used internally.
            </summary>
        </member>
        <member name="M:Sfs2X.WebSocketSharp.WebSocket.#ctor(System.String,System.String[])">
            <summary>
            Initializes a new instance of the <see cref="T:Sfs2X.WebSocketSharp.WebSocket"/> class with
            the specified URL and optionally subprotocols.
            </summary>
            <param name="url">
              <para>
              A <see cref="T:System.String"/> that specifies the URL to which to connect.
              </para>
              <para>
              The scheme of the URL must be ws or wss.
              </para>
              <para>
              The new instance uses a secure connection if the scheme is wss.
              </para>
            </param>
            <param name="protocols">
              <para>
              An array of <see cref="T:System.String"/> that specifies the names of
              the subprotocols if necessary.
              </para>
              <para>
              Each value of the array must be a token defined in
              <see href="http://tools.ietf.org/html/rfc2616#section-2.2">
              RFC 2616</see>.
              </para>
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="url"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
              <para>
              <paramref name="url"/> is an empty string.
              </para>
              <para>
              -or-
              </para>
              <para>
              <paramref name="url"/> is an invalid WebSocket URL string.
              </para>
              <para>
              -or-
              </para>
              <para>
              <paramref name="protocols"/> contains a value that is not a token.
              </para>
              <para>
              -or-
              </para>
              <para>
              <paramref name="protocols"/> contains a value twice.
              </para>
            </exception>
        </member>
        <member name="P:Sfs2X.WebSocketSharp.WebSocket.Compression">
            <summary>
            Gets or sets the compression method used to compress a message.
            </summary>
            <remarks>
            The set operation works if the current state of the interface is
            New or Closed.
            </remarks>
            <value>
              <para>
              One of the <see cref="T:Sfs2X.WebSocketSharp.CompressionMethod"/> enum values.
              </para>
              <para>
              It indicates the compression method used to compress a message.
              </para>
              <para>
              The default value is <see cref="F:Sfs2X.WebSocketSharp.CompressionMethod.None"/>.
              </para>
            </value>
            <exception cref="T:System.InvalidOperationException">
            The set operation is not available if the interface is not for
            the client.
            </exception>
        </member>
        <member name="P:Sfs2X.WebSocketSharp.WebSocket.Cookies">
            <summary>
            Gets the HTTP cookies included in the handshake request/response.
            </summary>
            <value>
              <para>
              An <see cref="T:System.Collections.Generic.IEnumerable{WebSocketSharp.Net.Cookie}"/>
              instance.
              </para>
              <para>
              It provides an enumerator which supports the iteration over
              the collection of the cookies.
              </para>
            </value>
        </member>
        <member name="P:Sfs2X.WebSocketSharp.WebSocket.Credentials">
            <summary>
            Gets the credentials for the HTTP authentication (Basic/Digest).
            </summary>
            <value>
              <para>
              A <see cref="T:Sfs2X.WebSocketSharp.Net.NetworkCredential"/> that represents the credentials
              used to authenticate the client.
              </para>
              <para>
              The default value is <see langword="null"/>.
              </para>
            </value>
        </member>
        <member name="P:Sfs2X.WebSocketSharp.WebSocket.EmitOnPing">
            <summary>
            Gets or sets a value indicating whether the message event is
            emitted when the interface receives a ping.
            </summary>
            <value>
              <para>
              <c>true</c> if the interface emits the message event when
              receives a ping; otherwise, <c>false</c>.
              </para>
              <para>
              The default value is <c>false</c>.
              </para>
            </value>
        </member>
        <member name="P:Sfs2X.WebSocketSharp.WebSocket.EnableRedirection">
            <summary>
            Gets or sets a value indicating whether the URL redirection for
            the handshake request is allowed.
            </summary>
            <remarks>
            The set operation works if the current state of the interface is
            New or Closed.
            </remarks>
            <value>
              <para>
              <c>true</c> if the interface allows the URL redirection for
              the handshake request; otherwise, <c>false</c>.
              </para>
              <para>
              The default value is <c>false</c>.
              </para>
            </value>
            <exception cref="T:System.InvalidOperationException">
            The set operation is not available if the interface is not for
            the client.
            </exception>
        </member>
        <member name="P:Sfs2X.WebSocketSharp.WebSocket.Extensions">
            <summary>
            Gets the extensions selected by the server.
            </summary>
            <value>
              <para>
              A <see cref="T:System.String"/> that represents a list of the extensions
              negotiated between the client and server.
              </para>
              <para>
              An empty string if not specified or selected.
              </para>
            </value>
        </member>
        <member name="P:Sfs2X.WebSocketSharp.WebSocket.IsAlive">
            <summary>
            Gets a value indicating whether the communication is possible.
            </summary>
            <value>
            <c>true</c> if the communication is possible; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Sfs2X.WebSocketSharp.WebSocket.IsSecure">
            <summary>
            Gets a value indicating whether the connection is secure.
            </summary>
            <value>
            <c>true</c> if the connection is secure; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Sfs2X.WebSocketSharp.WebSocket.Log">
            <summary>
            Gets the logging function.
            </summary>
            <remarks>
            The default logging level is <see cref="F:Sfs2X.WebSocketSharp.LogLevel.Error"/>.
            </remarks>
            <value>
            A <see cref="T:Sfs2X.WebSocketSharp.Logger"/> that provides the logging function.
            </value>
        </member>
        <member name="P:Sfs2X.WebSocketSharp.WebSocket.Origin">
            <summary>
            Gets or sets the value of the HTTP Origin header to send with
            the handshake request.
            </summary>
            <remarks>
              <para>
              The HTTP Origin header is defined in
              <see href="http://tools.ietf.org/html/rfc6454#section-7">
              Section 7 of RFC 6454</see>.
              </para>
              <para>
              The interface sends the Origin header if this property has any.
              </para>
              <para>
              The set operation works if the current state of the interface is
              New or Closed.
              </para>
            </remarks>
            <value>
              <para>
              A <see cref="T:System.String"/> that represents the value of the Origin
              header to send.
              </para>
              <para>
              The syntax is &lt;scheme&gt;://&lt;host&gt;[:&lt;port&gt;].
              </para>
              <para>
              The default value is <see langword="null"/>.
              </para>
            </value>
            <exception cref="T:System.InvalidOperationException">
            The set operation is not available if the interface is not for
            the client.
            </exception>
            <exception cref="T:System.ArgumentException">
              <para>
              The value specified for a set operation is not an absolute URI string.
              </para>
              <para>
              -or-
              </para>
              <para>
              The value specified for a set operation includes the path segments.
              </para>
            </exception>
        </member>
        <member name="P:Sfs2X.WebSocketSharp.WebSocket.Protocol">
            <summary>
            Gets the name of subprotocol selected by the server.
            </summary>
            <value>
              <para>
              A <see cref="T:System.String"/> that will be one of the names of
              subprotocols specified by client.
              </para>
              <para>
              An empty string if not specified or selected.
              </para>
            </value>
        </member>
        <member name="P:Sfs2X.WebSocketSharp.WebSocket.ReadyState">
            <summary>
            Gets the current state of the interface.
            </summary>
            <value>
              <para>
              One of the <see cref="T:Sfs2X.WebSocketSharp.WebSocketState"/> enum values.
              </para>
              <para>
              It indicates the current state of the interface.
              </para>
              <para>
              The default value is <see cref="F:Sfs2X.WebSocketSharp.WebSocketState.New"/>.
              </para>
            </value>
        </member>
        <member name="P:Sfs2X.WebSocketSharp.WebSocket.SslConfiguration">
            <summary>
            Gets the configuration for secure connection.
            </summary>
            <remarks>
            The configuration is used when the interface attempts to connect,
            so it must be configured before any connect method is called.
            </remarks>
            <value>
            A <see cref="T:Sfs2X.WebSocketSharp.Net.ClientSslConfiguration"/> that represents the
            configuration used to establish a secure connection.
            </value>
            <exception cref="T:System.InvalidOperationException">
              <para>
              The interface is not for the client.
              </para>
              <para>
              -or-
              </para>
              <para>
              The interface does not use a secure connection.
              </para>
            </exception>
        </member>
        <member name="P:Sfs2X.WebSocketSharp.WebSocket.Url">
            <summary>
            Gets the URL to which to connect.
            </summary>
            <value>
              <para>
              A <see cref="T:System.Uri"/> that represents the URL to which to connect.
              </para>
              <para>
              Also it represents the URL requested by the client if the interface
              is for the server.
              </para>
            </value>
        </member>
        <member name="P:Sfs2X.WebSocketSharp.WebSocket.WaitTime">
            <summary>
            Gets or sets the time to wait for the response to the ping or close.
            </summary>
            <remarks>
            The set operation works if the current state of the interface is
            New or Closed.
            </remarks>
            <value>
              <para>
              A <see cref="T:System.TimeSpan"/> that represents the time to wait for
              the response.
              </para>
              <para>
              The default value is the same as 5 seconds if the interface is
              for the client.
              </para>
            </value>
            <exception cref="T:System.ArgumentOutOfRangeException">
            The value specified for a set operation is zero or less.
            </exception>
        </member>
        <member name="E:Sfs2X.WebSocketSharp.WebSocket.OnClose">
            <summary>
            Occurs when the connection has been closed.
            </summary>
        </member>
        <member name="E:Sfs2X.WebSocketSharp.WebSocket.OnError">
            <summary>
            Occurs when the interface gets an error.
            </summary>
        </member>
        <member name="E:Sfs2X.WebSocketSharp.WebSocket.OnMessage">
            <summary>
            Occurs when the interface receives a message.
            </summary>
        </member>
        <member name="E:Sfs2X.WebSocketSharp.WebSocket.OnOpen">
            <summary>
            Occurs when the connection has been established.
            </summary>
        </member>
        <member name="M:Sfs2X.WebSocketSharp.WebSocket.Close">
            <summary>
            Closes the connection.
            </summary>
            <remarks>
            This method does nothing if the current state of the interface is
            Closing or Closed.
            </remarks>
        </member>
        <member name="M:Sfs2X.WebSocketSharp.WebSocket.Close(System.UInt16)">
            <summary>
            Closes the connection with the specified code.
            </summary>
            <remarks>
            This method does nothing if the current state of the interface is
            Closing or Closed.
            </remarks>
            <param name="code">
              <para>
              A <see cref="T:System.UInt16"/> that specifies the status code indicating
              the reason for the close.
              </para>
              <para>
              The status codes are defined in
              <see href="http://tools.ietf.org/html/rfc6455#section-7.4">
              Section 7.4</see> of RFC 6455.
              </para>
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="code"/> is less than 1000 or greater than 4999.
            </exception>
            <exception cref="T:System.ArgumentException">
              <para>
              <paramref name="code"/> is 1011 (server error).
              It cannot be used by a client.
              </para>
              <para>
              -or-
              </para>
              <para>
              <paramref name="code"/> is 1010 (mandatory extension).
              It cannot be used by a server.
              </para>
            </exception>
        </member>
        <member name="M:Sfs2X.WebSocketSharp.WebSocket.Close(Sfs2X.WebSocketSharp.CloseStatusCode)">
            <summary>
            Closes the connection with the specified code.
            </summary>
            <remarks>
            This method does nothing if the current state of the interface is
            Closing or Closed.
            </remarks>
            <param name="code">
              <para>
              One of the <see cref="T:Sfs2X.WebSocketSharp.CloseStatusCode"/> enum values.
              </para>
              <para>
              It specifies the status code indicating the reason for the close.
              </para>
            </param>
            <exception cref="T:System.ArgumentException">
              <para>
              <paramref name="code"/> is <see cref="F:Sfs2X.WebSocketSharp.CloseStatusCode.ServerError"/>.
              It cannot be used by a client.
              </para>
              <para>
              -or-
              </para>
              <para>
              <paramref name="code"/> is <see cref="F:Sfs2X.WebSocketSharp.CloseStatusCode.MandatoryExtension"/>.
              It cannot be used by a server.
              </para>
            </exception>
        </member>
        <member name="M:Sfs2X.WebSocketSharp.WebSocket.Close(System.UInt16,System.String)">
            <summary>
            Closes the connection with the specified code and reason.
            </summary>
            <remarks>
            This method does nothing if the current state of the interface is
            Closing or Closed.
            </remarks>
            <param name="code">
              <para>
              A <see cref="T:System.UInt16"/> that specifies the status code indicating
              the reason for the close.
              </para>
              <para>
              The status codes are defined in
              <see href="http://tools.ietf.org/html/rfc6455#section-7.4">
              Section 7.4</see> of RFC 6455.
              </para>
            </param>
            <param name="reason">
              <para>
              A <see cref="T:System.String"/> that specifies the reason for the close.
              </para>
              <para>
              Its size must be 123 bytes or less in UTF-8.
              </para>
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
              <para>
              <paramref name="code"/> is less than 1000 or greater than 4999.
              </para>
              <para>
              -or-
              </para>
              <para>
              The size of <paramref name="reason"/> is greater than 123 bytes.
              </para>
            </exception>
            <exception cref="T:System.ArgumentException">
              <para>
              <paramref name="code"/> is 1011 (server error).
              It cannot be used by a client.
              </para>
              <para>
              -or-
              </para>
              <para>
              <paramref name="code"/> is 1010 (mandatory extension).
              It cannot be used by a server.
              </para>
              <para>
              -or-
              </para>
              <para>
              <paramref name="code"/> is 1005 (no status) and
              <paramref name="reason"/> is specified.
              </para>
              <para>
              -or-
              </para>
              <para>
              <paramref name="reason"/> could not be UTF-8-encoded.
              </para>
            </exception>
        </member>
        <member name="M:Sfs2X.WebSocketSharp.WebSocket.Close(Sfs2X.WebSocketSharp.CloseStatusCode,System.String)">
            <summary>
            Closes the connection with the specified code and reason.
            </summary>
            <remarks>
            This method does nothing if the current state of the interface is
            Closing or Closed.
            </remarks>
            <param name="code">
              <para>
              One of the <see cref="T:Sfs2X.WebSocketSharp.CloseStatusCode"/> enum values.
              </para>
              <para>
              It specifies the status code indicating the reason for the close.
              </para>
            </param>
            <param name="reason">
              <para>
              A <see cref="T:System.String"/> that specifies the reason for the close.
              </para>
              <para>
              Its size must be 123 bytes or less in UTF-8.
              </para>
            </param>
            <exception cref="T:System.ArgumentException">
              <para>
              <paramref name="code"/> is <see cref="F:Sfs2X.WebSocketSharp.CloseStatusCode.ServerError"/>.
              It cannot be used by a client.
              </para>
              <para>
              -or-
              </para>
              <para>
              <paramref name="code"/> is <see cref="F:Sfs2X.WebSocketSharp.CloseStatusCode.MandatoryExtension"/>.
              It cannot be used by a server.
              </para>
              <para>
              -or-
              </para>
              <para>
              <paramref name="code"/> is <see cref="F:Sfs2X.WebSocketSharp.CloseStatusCode.NoStatus"/> and
              <paramref name="reason"/> is specified.
              </para>
              <para>
              -or-
              </para>
              <para>
              <paramref name="reason"/> could not be UTF-8-encoded.
              </para>
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            The size of <paramref name="reason"/> is greater than 123 bytes.
            </exception>
        </member>
        <member name="M:Sfs2X.WebSocketSharp.WebSocket.CloseAsync">
            <summary>
            Closes the connection asynchronously.
            </summary>
            <remarks>
              <para>
              This method does not wait for the close to be complete.
              </para>
              <para>
              This method does nothing if the current state of the interface is
              Closing or Closed.
              </para>
            </remarks>
        </member>
        <member name="M:Sfs2X.WebSocketSharp.WebSocket.CloseAsync(System.UInt16)">
            <summary>
            Closes the connection asynchronously with the specified code.
            </summary>
            <remarks>
              <para>
              This method does not wait for the close to be complete.
              </para>
              <para>
              This method does nothing if the current state of the interface is
              Closing or Closed.
              </para>
            </remarks>
            <param name="code">
              <para>
              A <see cref="T:System.UInt16"/> that specifies the status code indicating
              the reason for the close.
              </para>
              <para>
              The status codes are defined in
              <see href="http://tools.ietf.org/html/rfc6455#section-7.4">
              Section 7.4</see> of RFC 6455.
              </para>
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="code"/> is less than 1000 or greater than 4999.
            </exception>
            <exception cref="T:System.ArgumentException">
              <para>
              <paramref name="code"/> is 1011 (server error).
              It cannot be used by a client.
              </para>
              <para>
              -or-
              </para>
              <para>
              <paramref name="code"/> is 1010 (mandatory extension).
              It cannot be used by a server.
              </para>
            </exception>
        </member>
        <member name="M:Sfs2X.WebSocketSharp.WebSocket.CloseAsync(Sfs2X.WebSocketSharp.CloseStatusCode)">
            <summary>
            Closes the connection asynchronously with the specified code.
            </summary>
            <remarks>
              <para>
              This method does not wait for the close to be complete.
              </para>
              <para>
              This method does nothing if the current state of the interface is
              Closing or Closed.
              </para>
            </remarks>
            <param name="code">
              <para>
              One of the <see cref="T:Sfs2X.WebSocketSharp.CloseStatusCode"/> enum values.
              </para>
              <para>
              It specifies the status code indicating the reason for the close.
              </para>
            </param>
            <exception cref="T:System.ArgumentException">
              <para>
              <paramref name="code"/> is <see cref="F:Sfs2X.WebSocketSharp.CloseStatusCode.ServerError"/>.
              It cannot be used by a client.
              </para>
              <para>
              -or-
              </para>
              <para>
              <paramref name="code"/> is <see cref="F:Sfs2X.WebSocketSharp.CloseStatusCode.MandatoryExtension"/>.
              It cannot be used by a server.
              </para>
            </exception>
        </member>
        <member name="M:Sfs2X.WebSocketSharp.WebSocket.CloseAsync(System.UInt16,System.String)">
            <summary>
            Closes the connection asynchronously with the specified code and reason.
            </summary>
            <remarks>
              <para>
              This method does not wait for the close to be complete.
              </para>
              <para>
              This method does nothing if the current state of the interface is
              Closing or Closed.
              </para>
            </remarks>
            <param name="code">
              <para>
              A <see cref="T:System.UInt16"/> that specifies the status code indicating
              the reason for the close.
              </para>
              <para>
              The status codes are defined in
              <see href="http://tools.ietf.org/html/rfc6455#section-7.4">
              Section 7.4</see> of RFC 6455.
              </para>
            </param>
            <param name="reason">
              <para>
              A <see cref="T:System.String"/> that specifies the reason for the close.
              </para>
              <para>
              Its size must be 123 bytes or less in UTF-8.
              </para>
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
              <para>
              <paramref name="code"/> is less than 1000 or greater than 4999.
              </para>
              <para>
              -or-
              </para>
              <para>
              The size of <paramref name="reason"/> is greater than 123 bytes.
              </para>
            </exception>
            <exception cref="T:System.ArgumentException">
              <para>
              <paramref name="code"/> is 1011 (server error).
              It cannot be used by a client.
              </para>
              <para>
              -or-
              </para>
              <para>
              <paramref name="code"/> is 1010 (mandatory extension).
              It cannot be used by a server.
              </para>
              <para>
              -or-
              </para>
              <para>
              <paramref name="code"/> is 1005 (no status) and
              <paramref name="reason"/> is specified.
              </para>
              <para>
              -or-
              </para>
              <para>
              <paramref name="reason"/> could not be UTF-8-encoded.
              </para>
            </exception>
        </member>
        <member name="M:Sfs2X.WebSocketSharp.WebSocket.CloseAsync(Sfs2X.WebSocketSharp.CloseStatusCode,System.String)">
            <summary>
            Closes the connection asynchronously with the specified code and reason.
            </summary>
            <remarks>
              <para>
              This method does not wait for the close to be complete.
              </para>
              <para>
              This method does nothing if the current state of the interface is
              Closing or Closed.
              </para>
            </remarks>
            <param name="code">
              <para>
              One of the <see cref="T:Sfs2X.WebSocketSharp.CloseStatusCode"/> enum values.
              </para>
              <para>
              It specifies the status code indicating the reason for the close.
              </para>
            </param>
            <param name="reason">
              <para>
              A <see cref="T:System.String"/> that specifies the reason for the close.
              </para>
              <para>
              Its size must be 123 bytes or less in UTF-8.
              </para>
            </param>
            <exception cref="T:System.ArgumentException">
              <para>
              <paramref name="code"/> is <see cref="F:Sfs2X.WebSocketSharp.CloseStatusCode.ServerError"/>.
              It cannot be used by a client.
              </para>
              <para>
              -or-
              </para>
              <para>
              <paramref name="code"/> is <see cref="F:Sfs2X.WebSocketSharp.CloseStatusCode.MandatoryExtension"/>.
              It cannot be used by a server.
              </para>
              <para>
              -or-
              </para>
              <para>
              <paramref name="code"/> is <see cref="F:Sfs2X.WebSocketSharp.CloseStatusCode.NoStatus"/> and
              <paramref name="reason"/> is specified.
              </para>
              <para>
              -or-
              </para>
              <para>
              <paramref name="reason"/> could not be UTF-8-encoded.
              </para>
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            The size of <paramref name="reason"/> is greater than 123 bytes.
            </exception>
        </member>
        <member name="M:Sfs2X.WebSocketSharp.WebSocket.Connect">
            <summary>
            Establishes a connection.
            </summary>
            <remarks>
            This method does nothing if the current state of the interface is
            Connecting or Open.
            </remarks>
            <exception cref="T:System.InvalidOperationException">
              <para>
              The interface is not for the client.
              </para>
              <para>
              -or-
              </para>
              <para>
              A series of reconnecting has failed.
              </para>
            </exception>
        </member>
        <member name="M:Sfs2X.WebSocketSharp.WebSocket.ConnectAsync">
            <summary>
            Establishes a connection asynchronously.
            </summary>
            <remarks>
              <para>
              This method does not wait for the connect process to be complete.
              </para>
              <para>
              This method does nothing if the current state of the interface is
              Connecting or Open.
              </para>
            </remarks>
            <exception cref="T:System.InvalidOperationException">
              <para>
              The interface is not for the client.
              </para>
              <para>
              -or-
              </para>
              <para>
              A series of reconnecting has failed.
              </para>
            </exception>
        </member>
        <member name="M:Sfs2X.WebSocketSharp.WebSocket.Ping">
            <summary>
            Sends a ping to the remote endpoint.
            </summary>
            <returns>
            <c>true</c> if the send has successfully done and a pong has been
            received within a time; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Sfs2X.WebSocketSharp.WebSocket.Ping(System.String)">
            <summary>
            Sends a ping with the specified message to the remote endpoint.
            </summary>
            <returns>
            <c>true</c> if the send has successfully done and a pong has been
            received within a time; otherwise, <c>false</c>.
            </returns>
            <param name="message">
              <para>
              A <see cref="T:System.String"/> that specifies the message to send.
              </para>
              <para>
              Its size must be 125 bytes or less in UTF-8.
              </para>
            </param>
            <exception cref="T:System.ArgumentException">
            <paramref name="message"/> could not be UTF-8-encoded.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            The size of <paramref name="message"/> is greater than 125 bytes.
            </exception>
        </member>
        <member name="M:Sfs2X.WebSocketSharp.WebSocket.Send(System.Byte[])">
            <summary>
            Sends the specified data to the remote endpoint.
            </summary>
            <param name="data">
            An array of <see cref="T:System.Byte"/> that specifies the binary data to send.
            </param>
            <exception cref="T:System.InvalidOperationException">
            The current state of the interface is not Open.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="data"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:Sfs2X.WebSocketSharp.WebSocket.Send(System.IO.FileInfo)">
            <summary>
            Sends the specified file to the remote endpoint.
            </summary>
            <param name="fileInfo">
              <para>
              A <see cref="T:System.IO.FileInfo"/> that specifies the file to send.
              </para>
              <para>
              The file is sent as the binary data.
              </para>
            </param>
            <exception cref="T:System.InvalidOperationException">
            The current state of the interface is not Open.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="fileInfo"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
              <para>
              The file does not exist.
              </para>
              <para>
              -or-
              </para>
              <para>
              The file could not be opened.
              </para>
            </exception>
        </member>
        <member name="M:Sfs2X.WebSocketSharp.WebSocket.Send(System.String)">
            <summary>
            Sends the specified data to the remote endpoint.
            </summary>
            <param name="data">
            A <see cref="T:System.String"/> that specifies the text data to send.
            </param>
            <exception cref="T:System.InvalidOperationException">
            The current state of the interface is not Open.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="data"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="data"/> could not be UTF-8-encoded.
            </exception>
        </member>
        <member name="M:Sfs2X.WebSocketSharp.WebSocket.Send(System.IO.Stream,System.Int32)">
            <summary>
            Sends the data from the specified stream instance to the remote endpoint.
            </summary>
            <param name="stream">
              <para>
              A <see cref="T:System.IO.Stream"/> instance from which to read the data to send.
              </para>
              <para>
              The data is sent as the binary data.
              </para>
            </param>
            <param name="length">
            An <see cref="T:System.Int32"/> that specifies the number of bytes to send.
            </param>
            <exception cref="T:System.InvalidOperationException">
            The current state of the interface is not Open.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="stream"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
              <para>
              <paramref name="stream"/> cannot be read.
              </para>
              <para>
              -or-
              </para>
              <para>
              <paramref name="length"/> is less than 1.
              </para>
              <para>
              -or-
              </para>
              <para>
              No data could be read from <paramref name="stream"/>.
              </para>
            </exception>
        </member>
        <member name="M:Sfs2X.WebSocketSharp.WebSocket.SendAsync(System.Byte[],System.Action{System.Boolean})">
            <summary>
            Sends the specified data to the remote endpoint asynchronously.
            </summary>
            <remarks>
            This method does not wait for the send to be complete.
            </remarks>
            <param name="data">
            An array of <see cref="T:System.Byte"/> that specifies the binary data to send.
            </param>
            <param name="completed">
              <para>
              An <see cref="T:System.Action{bool}"/> delegate.
              </para>
              <para>
              The delegate invokes the method called when the send is complete.
              </para>
              <para>
              The <see cref="T:System.Boolean"/> parameter passed to the method is <c>true</c>
              if the send has successfully done; otherwise, <c>false</c>.
              </para>
              <para>
              <see langword="null"/> if not necessary.
              </para>
            </param>
            <exception cref="T:System.InvalidOperationException">
            The current state of the interface is not Open.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="data"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:Sfs2X.WebSocketSharp.WebSocket.SendAsync(System.IO.FileInfo,System.Action{System.Boolean})">
            <summary>
            Sends the specified file to the remote endpoint asynchronously.
            </summary>
            <remarks>
            This method does not wait for the send to be complete.
            </remarks>
            <param name="fileInfo">
              <para>
              A <see cref="T:System.IO.FileInfo"/> that specifies the file to send.
              </para>
              <para>
              The file is sent as the binary data.
              </para>
            </param>
            <param name="completed">
              <para>
              An <see cref="T:System.Action{bool}"/> delegate.
              </para>
              <para>
              The delegate invokes the method called when the send is complete.
              </para>
              <para>
              The <see cref="T:System.Boolean"/> parameter passed to the method is <c>true</c>
              if the send has successfully done; otherwise, <c>false</c>.
              </para>
              <para>
              <see langword="null"/> if not necessary.
              </para>
            </param>
            <exception cref="T:System.InvalidOperationException">
            The current state of the interface is not Open.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="fileInfo"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
              <para>
              The file does not exist.
              </para>
              <para>
              -or-
              </para>
              <para>
              The file could not be opened.
              </para>
            </exception>
        </member>
        <member name="M:Sfs2X.WebSocketSharp.WebSocket.SendAsync(System.String,System.Action{System.Boolean})">
            <summary>
            Sends the specified data to the remote endpoint asynchronously.
            </summary>
            <remarks>
            This method does not wait for the send to be complete.
            </remarks>
            <param name="data">
            A <see cref="T:System.String"/> that specifies the text data to send.
            </param>
            <param name="completed">
              <para>
              An <see cref="T:System.Action{bool}"/> delegate.
              </para>
              <para>
              The delegate invokes the method called when the send is complete.
              </para>
              <para>
              The <see cref="T:System.Boolean"/> parameter passed to the method is <c>true</c>
              if the send has successfully done; otherwise, <c>false</c>.
              </para>
              <para>
              <see langword="null"/> if not necessary.
              </para>
            </param>
            <exception cref="T:System.InvalidOperationException">
            The current state of the interface is not Open.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="data"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="data"/> could not be UTF-8-encoded.
            </exception>
        </member>
        <member name="M:Sfs2X.WebSocketSharp.WebSocket.SendAsync(System.IO.Stream,System.Int32,System.Action{System.Boolean})">
            <summary>
            Sends the data from the specified stream instance to the remote
            endpoint asynchronously.
            </summary>
            <remarks>
            This method does not wait for the send to be complete.
            </remarks>
            <param name="stream">
              <para>
              A <see cref="T:System.IO.Stream"/> instance from which to read the data to send.
              </para>
              <para>
              The data is sent as the binary data.
              </para>
            </param>
            <param name="length">
            An <see cref="T:System.Int32"/> that specifies the number of bytes to send.
            </param>
            <param name="completed">
              <para>
              An <see cref="T:System.Action{bool}"/> delegate.
              </para>
              <para>
              The delegate invokes the method called when the send is complete.
              </para>
              <para>
              The <see cref="T:System.Boolean"/> parameter passed to the method is <c>true</c>
              if the send has successfully done; otherwise, <c>false</c>.
              </para>
              <para>
              <see langword="null"/> if not necessary.
              </para>
            </param>
            <exception cref="T:System.InvalidOperationException">
            The current state of the interface is not Open.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="stream"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
              <para>
              <paramref name="stream"/> cannot be read.
              </para>
              <para>
              -or-
              </para>
              <para>
              <paramref name="length"/> is less than 1.
              </para>
              <para>
              -or-
              </para>
              <para>
              No data could be read from <paramref name="stream"/>.
              </para>
            </exception>
        </member>
        <member name="M:Sfs2X.WebSocketSharp.WebSocket.SetCookie(Sfs2X.WebSocketSharp.Net.Cookie)">
            <summary>
            Sets an HTTP cookie to send with the handshake request.
            </summary>
            <remarks>
            This method works if the current state of the interface is
            New or Closed.
            </remarks>
            <param name="cookie">
            A <see cref="T:Sfs2X.WebSocketSharp.Net.Cookie"/> that specifies the cookie to send.
            </param>
            <exception cref="T:System.InvalidOperationException">
            The interface is not for the client.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="cookie"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:Sfs2X.WebSocketSharp.WebSocket.SetCredentials(System.String,System.String,System.Boolean)">
            <summary>
            Sets the credentials for the HTTP authentication (Basic/Digest).
            </summary>
            <remarks>
            This method works if the current state of the interface is
            New or Closed.
            </remarks>
            <param name="username">
              <para>
              A <see cref="T:System.String"/> that specifies the username associated
              with the credentials.
              </para>
              <para>
              <see langword="null"/> or an empty string if initializes
              the credentials.
              </para>
            </param>
            <param name="password">
              <para>
              A <see cref="T:System.String"/> that specifies the password for the
              username associated with the credentials.
              </para>
              <para>
              <see langword="null"/> or an empty string if not necessary.
              </para>
            </param>
            <param name="preAuth">
            A <see cref="T:System.Boolean"/>: <c>true</c> if sends the credentials for
            the Basic authentication in advance with the first handshake
            request; otherwise, <c>false</c>.
            </param>
            <exception cref="T:System.InvalidOperationException">
            The interface is not for the client.
            </exception>
            <exception cref="T:System.ArgumentException">
              <para>
              <paramref name="username"/> contains an invalid character.
              </para>
              <para>
              -or-
              </para>
              <para>
              <paramref name="password"/> contains an invalid character.
              </para>
            </exception>
        </member>
        <member name="M:Sfs2X.WebSocketSharp.WebSocket.SetProxy(System.String,System.String,System.String)">
            <summary>
            Sets the URL of the HTTP proxy server through which to connect and
            the credentials for the HTTP proxy authentication (Basic/Digest).
            </summary>
            <remarks>
            This method works if the current state of the interface is
            New or Closed.
            </remarks>
            <param name="url">
              <para>
              A <see cref="T:System.String"/> that specifies the URL of the proxy
              server through which to connect.
              </para>
              <para>
              The syntax is http://&lt;host&gt;[:&lt;port&gt;].
              </para>
              <para>
              <see langword="null"/> or an empty string if initializes
              the URL and the credentials.
              </para>
            </param>
            <param name="username">
              <para>
              A <see cref="T:System.String"/> that specifies the username associated
              with the credentials.
              </para>
              <para>
              <see langword="null"/> or an empty string if the credentials
              are not necessary.
              </para>
            </param>
            <param name="password">
              <para>
              A <see cref="T:System.String"/> that specifies the password for the
              username associated with the credentials.
              </para>
              <para>
              <see langword="null"/> or an empty string if not necessary.
              </para>
            </param>
            <exception cref="T:System.InvalidOperationException">
            The interface is not for the client.
            </exception>
            <exception cref="T:System.ArgumentException">
              <para>
              <paramref name="url"/> is not an absolute URI string.
              </para>
              <para>
              -or-
              </para>
              <para>
              The scheme of <paramref name="url"/> is not http.
              </para>
              <para>
              -or-
              </para>
              <para>
              <paramref name="url"/> includes the path segments.
              </para>
              <para>
              -or-
              </para>
              <para>
              <paramref name="username"/> contains an invalid character.
              </para>
              <para>
              -or-
              </para>
              <para>
              <paramref name="password"/> contains an invalid character.
              </para>
            </exception>
        </member>
        <member name="M:Sfs2X.WebSocketSharp.WebSocket.System#IDisposable#Dispose">
            <summary>
            Closes the connection and releases all associated resources.
            </summary>
            <remarks>
              <para>
              This method closes the connection with close status 1001 (going away).
              </para>
              <para>
              This method does nothing if the current state of the interface is
              Closing or Closed.
              </para>
            </remarks>
        </member>
        <member name="T:Sfs2X.WebSocketSharp.WebSocketException">
            <summary>
            The exception that is thrown when a fatal error occurs in
            the WebSocket communication.
            </summary>
        </member>
        <member name="P:Sfs2X.WebSocketSharp.WebSocketException.Code">
            <summary>
            Gets the status code indicating the cause of the exception.
            </summary>
            <value>
              <para>
              A <see cref="T:System.UInt16"/> that represents the status code indicating
              the cause of the exception.
              </para>
              <para>
              It is one of the status codes for the WebSocket connection close.
              </para>
            </value>
        </member>
        <member name="T:Sfs2X.WebSocketSharp.WebSocketState">
            <summary>
            Indicates the state of the WebSocket interface.
            </summary>
        </member>
        <member name="F:Sfs2X.WebSocketSharp.WebSocketState.New">
            <summary>
            Equivalent to numeric value 0. Indicates that a new interface has
            been created.
            </summary>
        </member>
        <member name="F:Sfs2X.WebSocketSharp.WebSocketState.Connecting">
            <summary>
            Equivalent to numeric value 1. Indicates that the connect process is
            in progress.
            </summary>
        </member>
        <member name="F:Sfs2X.WebSocketSharp.WebSocketState.Open">
            <summary>
            Equivalent to numeric value 2. Indicates that the connection has
            been established and the communication is possible.
            </summary>
        </member>
        <member name="F:Sfs2X.WebSocketSharp.WebSocketState.Closing">
            <summary>
            Equivalent to numeric value 3. Indicates that the close process is
            in progress.
            </summary>
        </member>
        <member name="F:Sfs2X.WebSocketSharp.WebSocketState.Closed">
            <summary>
            Equivalent to numeric value 4. Indicates that the connection has
            been closed or could not be established.
            </summary>
        </member>
        <member name="T:Sfs2X.WebSocketSharp.Net.AuthenticationSchemes">
            <summary>
            Specifies the scheme for authentication.
            </summary>
        </member>
        <member name="F:Sfs2X.WebSocketSharp.Net.AuthenticationSchemes.None">
            <summary>
            No authentication is allowed.
            </summary>
        </member>
        <member name="F:Sfs2X.WebSocketSharp.Net.AuthenticationSchemes.Digest">
            <summary>
            Specifies digest authentication.
            </summary>
        </member>
        <member name="F:Sfs2X.WebSocketSharp.Net.AuthenticationSchemes.Basic">
            <summary>
            Specifies basic authentication.
            </summary>
        </member>
        <member name="F:Sfs2X.WebSocketSharp.Net.AuthenticationSchemes.Anonymous">
            <summary>
            Specifies anonymous authentication.
            </summary>
        </member>
        <member name="T:Sfs2X.WebSocketSharp.Net.ClientSslConfiguration">
            <summary>
            Stores the parameters for the <see cref="T:System.Net.Security.SslStream"/> used by clients.
            </summary>
        </member>
        <member name="M:Sfs2X.WebSocketSharp.Net.ClientSslConfiguration.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Sfs2X.WebSocketSharp.Net.ClientSslConfiguration"/>
            class with the specified target host server name.
            </summary>
            <param name="targetHost">
            A <see cref="T:System.String"/> that specifies the target host server name.
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="targetHost"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="targetHost"/> is an empty string.
            </exception>
        </member>
        <member name="M:Sfs2X.WebSocketSharp.Net.ClientSslConfiguration.#ctor(Sfs2X.WebSocketSharp.Net.ClientSslConfiguration)">
            <summary>
            Initializes a new instance of the <see cref="T:Sfs2X.WebSocketSharp.Net.ClientSslConfiguration"/>
            class that stores the parameters copied from the specified configuration.
            </summary>
            <param name="configuration">
            A <see cref="T:Sfs2X.WebSocketSharp.Net.ClientSslConfiguration"/> from which to copy.
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="configuration"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="P:Sfs2X.WebSocketSharp.Net.ClientSslConfiguration.CheckCertificateRevocation">
            <summary>
            Gets or sets a value indicating whether the certificate revocation
            list is checked during authentication.
            </summary>
            <value>
              <para>
              <c>true</c> if the certificate revocation list is checked during
              authentication; otherwise, <c>false</c>.
              </para>
              <para>
              The default value is <c>false</c>.
              </para>
            </value>
        </member>
        <member name="P:Sfs2X.WebSocketSharp.Net.ClientSslConfiguration.ClientCertificates">
            <summary>
            Gets or sets the collection of client certificates from which to select
            one to supply to the server.
            </summary>
            <value>
              <para>
              A <see cref="T:System.Security.Cryptography.X509Certificates.X509CertificateCollection"/> or <see langword="null"/>.
              </para>
              <para>
              The collection contains client certificates from which to select.
              </para>
              <para>
              The default value is <see langword="null"/>.
              </para>
            </value>
        </member>
        <member name="P:Sfs2X.WebSocketSharp.Net.ClientSslConfiguration.ClientCertificateSelectionCallback">
            <summary>
            Gets or sets the callback used to select the certificate to supply to
            the server.
            </summary>
            <remarks>
            No certificate is supplied if the callback returns <see langword="null"/>.
            </remarks>
            <value>
              <para>
              A <see cref="T:System.Net.Security.LocalCertificateSelectionCallback"/> delegate that
              invokes the method called for selecting the certificate.
              </para>
              <para>
              The default value is a delegate that invokes a method that only
              returns <see langword="null"/>.
              </para>
            </value>
        </member>
        <member name="P:Sfs2X.WebSocketSharp.Net.ClientSslConfiguration.EnabledSslProtocols">
            <summary>
            Gets or sets the protocols used for authentication.
            </summary>
            <value>
              <para>
              Any of the <see cref="T:System.Security.Authentication.SslProtocols"/> enum values.
              </para>
              <para>
              It represents the protocols used for authentication.
              </para>
              <para>
              The default value is <see cref="F:System.Security.Authentication.SslProtocols.None"/>.
              </para>
            </value>
        </member>
        <member name="P:Sfs2X.WebSocketSharp.Net.ClientSslConfiguration.ServerCertificateValidationCallback">
            <summary>
            Gets or sets the callback used to validate the certificate supplied by
            the server.
            </summary>
            <remarks>
            The certificate is valid if the callback returns <c>true</c>.
            </remarks>
            <value>
              <para>
              A <see cref="T:System.Net.Security.RemoteCertificateValidationCallback"/> delegate that
              invokes the method called for validating the certificate.
              </para>
              <para>
              The default value is a delegate that invokes a method that only
              returns <c>true</c>.
              </para>
            </value>
        </member>
        <member name="P:Sfs2X.WebSocketSharp.Net.ClientSslConfiguration.TargetHost">
            <summary>
            Gets or sets the target host server name.
            </summary>
            <value>
            A <see cref="T:System.String"/> that represents the name of the server that
            will share a secure connection with a client.
            </value>
            <exception cref="T:System.ArgumentNullException">
            The value specified for a set operation is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
            The value specified for a set operation is an empty string.
            </exception>
        </member>
        <member name="T:Sfs2X.WebSocketSharp.Net.Cookie">
            <summary>
            Provides a set of methods and properties used to manage an HTTP cookie.
            </summary>
            <remarks>
              <para>
              This class refers to the following specifications:
              </para>
              <list type="bullet">
                <item>
                  <term>
                  <see href="http://web.archive.org/web/20020803110822/http://wp.netscape.com/newsref/std/cookie_spec.html">Netscape specification</see>
                  </term>
                </item>
                <item>
                  <term>
                  <see href="https://tools.ietf.org/html/rfc2109">RFC 2109</see>
                  </term>
                </item>
                <item>
                  <term>
                  <see href="https://tools.ietf.org/html/rfc2965">RFC 2965</see>
                  </term>
                </item>
                <item>
                  <term>
                  <see href="https://tools.ietf.org/html/rfc6265">RFC 6265</see>
                  </term>
                </item>
              </list>
              <para>
              This class cannot be inherited.
              </para>
            </remarks>
        </member>
        <member name="M:Sfs2X.WebSocketSharp.Net.Cookie.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Sfs2X.WebSocketSharp.Net.Cookie"/> class.
            </summary>
        </member>
        <member name="M:Sfs2X.WebSocketSharp.Net.Cookie.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Sfs2X.WebSocketSharp.Net.Cookie"/> class with
            the specified name and value.
            </summary>
            <param name="name">
              <para>
              A <see cref="T:System.String"/> that specifies the name of the cookie.
              </para>
              <para>
              The name must be a token defined in
              <see href="http://tools.ietf.org/html/rfc2616#section-2.2">
              RFC 2616</see>.
              </para>
            </param>
            <param name="value">
            A <see cref="T:System.String"/> that specifies the value of the cookie.
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="name"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
              <para>
              <paramref name="name"/> is an empty string.
              </para>
              <para>
              - or -
              </para>
              <para>
              <paramref name="name"/> starts with a dollar sign.
              </para>
              <para>
              - or -
              </para>
              <para>
              <paramref name="name"/> contains an invalid character.
              </para>
              <para>
              - or -
              </para>
              <para>
              <paramref name="value"/> is a string not enclosed in double quotes
              that contains an invalid character.
              </para>
            </exception>
        </member>
        <member name="M:Sfs2X.WebSocketSharp.Net.Cookie.#ctor(System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Sfs2X.WebSocketSharp.Net.Cookie"/> class with
            the specified name, value, and path.
            </summary>
            <param name="name">
              <para>
              A <see cref="T:System.String"/> that specifies the name of the cookie.
              </para>
              <para>
              The name must be a token defined in
              <see href="http://tools.ietf.org/html/rfc2616#section-2.2">
              RFC 2616</see>.
              </para>
            </param>
            <param name="value">
            A <see cref="T:System.String"/> that specifies the value of the cookie.
            </param>
            <param name="path">
            A <see cref="T:System.String"/> that specifies the value of the Path
            attribute of the cookie.
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="name"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
              <para>
              <paramref name="name"/> is an empty string.
              </para>
              <para>
              - or -
              </para>
              <para>
              <paramref name="name"/> starts with a dollar sign.
              </para>
              <para>
              - or -
              </para>
              <para>
              <paramref name="name"/> contains an invalid character.
              </para>
              <para>
              - or -
              </para>
              <para>
              <paramref name="value"/> is a string not enclosed in double quotes
              that contains an invalid character.
              </para>
            </exception>
        </member>
        <member name="M:Sfs2X.WebSocketSharp.Net.Cookie.#ctor(System.String,System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Sfs2X.WebSocketSharp.Net.Cookie"/> class with
            the specified name, value, path, and domain.
            </summary>
            <param name="name">
              <para>
              A <see cref="T:System.String"/> that specifies the name of the cookie.
              </para>
              <para>
              The name must be a token defined in
              <see href="http://tools.ietf.org/html/rfc2616#section-2.2">
              RFC 2616</see>.
              </para>
            </param>
            <param name="value">
            A <see cref="T:System.String"/> that specifies the value of the cookie.
            </param>
            <param name="path">
            A <see cref="T:System.String"/> that specifies the value of the Path
            attribute of the cookie.
            </param>
            <param name="domain">
            A <see cref="T:System.String"/> that specifies the value of the Domain
            attribute of the cookie.
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="name"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
              <para>
              <paramref name="name"/> is an empty string.
              </para>
              <para>
              - or -
              </para>
              <para>
              <paramref name="name"/> starts with a dollar sign.
              </para>
              <para>
              - or -
              </para>
              <para>
              <paramref name="name"/> contains an invalid character.
              </para>
              <para>
              - or -
              </para>
              <para>
              <paramref name="value"/> is a string not enclosed in double quotes
              that contains an invalid character.
              </para>
            </exception>
        </member>
        <member name="P:Sfs2X.WebSocketSharp.Net.Cookie.Comment">
            <summary>
            Gets the value of the Comment attribute of the cookie.
            </summary>
            <value>
              <para>
              A <see cref="T:System.String"/> that represents the comment to document
              intended use of the cookie.
              </para>
              <para>
              <see langword="null"/> if not present.
              </para>
              <para>
              The default value is <see langword="null"/>.
              </para>
            </value>
        </member>
        <member name="P:Sfs2X.WebSocketSharp.Net.Cookie.CommentUri">
            <summary>
            Gets the value of the CommentURL attribute of the cookie.
            </summary>
            <value>
              <para>
              A <see cref="T:System.Uri"/> that represents the URI that provides
              the comment to document intended use of the cookie.
              </para>
              <para>
              <see langword="null"/> if not present.
              </para>
              <para>
              The default value is <see langword="null"/>.
              </para>
            </value>
        </member>
        <member name="P:Sfs2X.WebSocketSharp.Net.Cookie.Discard">
            <summary>
            Gets a value indicating whether the client discards the cookie
            unconditionally when the client terminates.
            </summary>
            <value>
              <para>
              <c>true</c> if the client discards the cookie unconditionally
              when the client terminates; otherwise, <c>false</c>.
              </para>
              <para>
              The default value is <c>false</c>.
              </para>
            </value>
        </member>
        <member name="P:Sfs2X.WebSocketSharp.Net.Cookie.Domain">
            <summary>
            Gets or sets the value of the Domain attribute of the cookie.
            </summary>
            <value>
              <para>
              A <see cref="T:System.String"/> that represents the domain name that
              the cookie is valid for.
              </para>
              <para>
              An empty string if this attribute is not needed.
              </para>
            </value>
        </member>
        <member name="P:Sfs2X.WebSocketSharp.Net.Cookie.Expired">
            <summary>
            Gets or sets a value indicating whether the cookie has expired.
            </summary>
            <value>
              <para>
              <c>true</c> if the cookie has expired; otherwise, <c>false</c>.
              </para>
              <para>
              The default value is <c>false</c>.
              </para>
            </value>
        </member>
        <member name="P:Sfs2X.WebSocketSharp.Net.Cookie.Expires">
            <summary>
            Gets or sets the value of the Expires attribute of the cookie.
            </summary>
            <value>
              <para>
              A <see cref="T:System.DateTime"/> that represents the date and time that
              the cookie expires on.
              </para>
              <para>
              <see cref="F:System.DateTime.MinValue"/> if this attribute is not needed.
              </para>
              <para>
              The default value is <see cref="F:System.DateTime.MinValue"/>.
              </para>
            </value>
        </member>
        <member name="P:Sfs2X.WebSocketSharp.Net.Cookie.HttpOnly">
            <summary>
            Gets or sets a value indicating whether non-HTTP APIs can access
            the cookie.
            </summary>
            <value>
              <para>
              <c>true</c> if non-HTTP APIs cannot access the cookie; otherwise,
              <c>false</c>.
              </para>
              <para>
              The default value is <c>false</c>.
              </para>
            </value>
        </member>
        <member name="P:Sfs2X.WebSocketSharp.Net.Cookie.Name">
            <summary>
            Gets or sets the name of the cookie.
            </summary>
            <value>
              <para>
              A <see cref="T:System.String"/> that represents the name of the cookie.
              </para>
              <para>
              The name must be a token defined in
              <see href="http://tools.ietf.org/html/rfc2616#section-2.2">
              RFC 2616</see>.
              </para>
            </value>
            <exception cref="T:System.ArgumentNullException">
            The value specified for a set operation is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
              <para>
              The value specified for a set operation is an empty string.
              </para>
              <para>
              - or -
              </para>
              <para>
              The value specified for a set operation starts with a dollar sign.
              </para>
              <para>
              - or -
              </para>
              <para>
              The value specified for a set operation contains an invalid character.
              </para>
            </exception>
        </member>
        <member name="P:Sfs2X.WebSocketSharp.Net.Cookie.Path">
            <summary>
            Gets or sets the value of the Path attribute of the cookie.
            </summary>
            <value>
            A <see cref="T:System.String"/> that represents the subset of URI on
            the origin server that the cookie applies to.
            </value>
        </member>
        <member name="P:Sfs2X.WebSocketSharp.Net.Cookie.Port">
            <summary>
            Gets the value of the Port attribute of the cookie.
            </summary>
            <value>
              <para>
              A <see cref="T:System.String"/> that represents the list of TCP ports
              that the cookie applies to.
              </para>
              <para>
              <see langword="null"/> if not present.
              </para>
              <para>
              The default value is <see langword="null"/>.
              </para>
            </value>
        </member>
        <member name="P:Sfs2X.WebSocketSharp.Net.Cookie.Secure">
            <summary>
            Gets or sets a value indicating whether the security level of
            the cookie is secure.
            </summary>
            <remarks>
            When this property is <c>true</c>, the cookie may be included in
            the request only if the request is transmitted over HTTPS.
            </remarks>
            <value>
              <para>
              <c>true</c> if the security level of the cookie is secure;
              otherwise, <c>false</c>.
              </para>
              <para>
              The default value is <c>false</c>.
              </para>
            </value>
        </member>
        <member name="P:Sfs2X.WebSocketSharp.Net.Cookie.TimeStamp">
            <summary>
            Gets the time when the cookie was issued.
            </summary>
            <value>
            A <see cref="T:System.DateTime"/> that represents the time when
            the cookie was issued.
            </value>
        </member>
        <member name="P:Sfs2X.WebSocketSharp.Net.Cookie.Value">
            <summary>
            Gets or sets the value of the cookie.
            </summary>
            <value>
            A <see cref="T:System.String"/> that represents the value of the cookie.
            </value>
            <exception cref="T:System.ArgumentException">
            The value specified for a set operation is a string not enclosed in
            double quotes that contains an invalid character.
            </exception>
        </member>
        <member name="P:Sfs2X.WebSocketSharp.Net.Cookie.Version">
            <summary>
            Gets the value of the Version attribute of the cookie.
            </summary>
            <value>
              <para>
              An <see cref="T:System.Int32"/> that represents the version of HTTP state
              management that the cookie conforms to.
              </para>
              <para>
              0 or 1. 0 if not present.
              </para>
              <para>
              The default value is 0.
              </para>
            </value>
        </member>
        <member name="M:Sfs2X.WebSocketSharp.Net.Cookie.ToResponseString">
            <summary>
            Returns a string that represents the current cookie instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that is suitable for the Set-Cookie response
            header.
            </returns>
        </member>
        <member name="M:Sfs2X.WebSocketSharp.Net.Cookie.Equals(System.Object)">
            <summary>
            Determines whether the current cookie instance is equal to
            the specified <see cref="T:System.Object"/> instance.
            </summary>
            <param name="comparand">
              <para>
              An <see cref="T:System.Object"/> instance to compare with
              the current cookie instance.
              </para>
              <para>
              An reference to a <see cref="T:Sfs2X.WebSocketSharp.Net.Cookie"/> instance.
              </para>
            </param>
            <returns>
            <c>true</c> if the current cookie instance is equal to
            <paramref name="comparand"/>; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Sfs2X.WebSocketSharp.Net.Cookie.GetHashCode">
            <summary>
            Gets a hash code for the current cookie instance.
            </summary>
            <returns>
            An <see cref="T:System.Int32"/> that represents the hash code.
            </returns>
        </member>
        <member name="M:Sfs2X.WebSocketSharp.Net.Cookie.ToString">
            <summary>
            Returns a string that represents the current cookie instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that is suitable for the Cookie request header.
            </returns>
        </member>
        <member name="T:Sfs2X.WebSocketSharp.Net.CookieCollection">
            <summary>
            Provides a collection of instances of the <see cref="T:Sfs2X.WebSocketSharp.Net.Cookie"/> class.
            </summary>
        </member>
        <member name="M:Sfs2X.WebSocketSharp.Net.CookieCollection.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Sfs2X.WebSocketSharp.Net.CookieCollection"/> class.
            </summary>
        </member>
        <member name="P:Sfs2X.WebSocketSharp.Net.CookieCollection.Count">
            <summary>
            Gets the number of cookies in the collection.
            </summary>
            <value>
            An <see cref="T:System.Int32"/> that represents the number of cookies in
            the collection.
            </value>
        </member>
        <member name="P:Sfs2X.WebSocketSharp.Net.CookieCollection.IsReadOnly">
            <summary>
            Gets a value indicating whether the collection is read-only.
            </summary>
            <value>
              <para>
              <c>true</c> if the collection is read-only; otherwise, <c>false</c>.
              </para>
              <para>
              The default value is <c>false</c>.
              </para>
            </value>
        </member>
        <member name="P:Sfs2X.WebSocketSharp.Net.CookieCollection.IsSynchronized">
            <summary>
            Gets a value indicating whether the access to the collection is
            thread safe.
            </summary>
            <value>
              <para>
              <c>true</c> if the access to the collection is thread safe;
              otherwise, <c>false</c>.
              </para>
              <para>
              The default value is <c>false</c>.
              </para>
            </value>
        </member>
        <member name="P:Sfs2X.WebSocketSharp.Net.CookieCollection.Item(System.Int32)">
            <summary>
            Gets the cookie at the specified index from the collection.
            </summary>
            <value>
            A <see cref="T:Sfs2X.WebSocketSharp.Net.Cookie"/> at the specified index in the collection.
            </value>
            <param name="index">
            An <see cref="T:System.Int32"/> that specifies the zero-based index of the cookie
            to find.
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="index"/> is out of allowable range for the collection.
            </exception>
        </member>
        <member name="P:Sfs2X.WebSocketSharp.Net.CookieCollection.Item(System.String)">
            <summary>
            Gets the cookie with the specified name from the collection.
            </summary>
            <value>
              <para>
              A <see cref="T:Sfs2X.WebSocketSharp.Net.Cookie"/> with the specified name in the collection.
              </para>
              <para>
              <see langword="null"/> if not found.
              </para>
            </value>
            <param name="name">
            A <see cref="T:System.String"/> that specifies the name of the cookie to find.
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="name"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="P:Sfs2X.WebSocketSharp.Net.CookieCollection.SyncRoot">
            <summary>
            Gets an object used to synchronize access to the collection.
            </summary>
            <value>
            An <see cref="T:System.Object"/> used to synchronize access to the collection.
            </value>
        </member>
        <member name="M:Sfs2X.WebSocketSharp.Net.CookieCollection.Add(Sfs2X.WebSocketSharp.Net.Cookie)">
            <summary>
            Adds the specified cookie to the collection.
            </summary>
            <param name="cookie">
            A <see cref="T:Sfs2X.WebSocketSharp.Net.Cookie"/> to add.
            </param>
            <exception cref="T:System.InvalidOperationException">
            The collection is read-only.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="cookie"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:Sfs2X.WebSocketSharp.Net.CookieCollection.Add(Sfs2X.WebSocketSharp.Net.CookieCollection)">
            <summary>
            Adds the specified cookies to the collection.
            </summary>
            <param name="cookies">
            A <see cref="T:Sfs2X.WebSocketSharp.Net.CookieCollection"/> that contains the cookies to add.
            </param>
            <exception cref="T:System.InvalidOperationException">
            The collection is read-only.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="cookies"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:Sfs2X.WebSocketSharp.Net.CookieCollection.Clear">
            <summary>
            Removes all cookies from the collection.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            The collection is read-only.
            </exception>
        </member>
        <member name="M:Sfs2X.WebSocketSharp.Net.CookieCollection.Contains(Sfs2X.WebSocketSharp.Net.Cookie)">
            <summary>
            Determines whether the collection contains the specified cookie.
            </summary>
            <returns>
            <c>true</c> if the cookie is found in the collection; otherwise,
            <c>false</c>.
            </returns>
            <param name="cookie">
            A <see cref="T:Sfs2X.WebSocketSharp.Net.Cookie"/> to find.
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="cookie"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:Sfs2X.WebSocketSharp.Net.CookieCollection.CopyTo(Sfs2X.WebSocketSharp.Net.Cookie[],System.Int32)">
            <summary>
            Copies the elements of the collection to the specified array,
            starting at the specified index.
            </summary>
            <param name="array">
            An array of <see cref="T:Sfs2X.WebSocketSharp.Net.Cookie"/> that specifies the destination of
            the elements copied from the collection.
            </param>
            <param name="index">
            An <see cref="T:System.Int32"/> that specifies the zero-based index in
            the array at which copying starts.
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="array"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="index"/> is less than zero.
            </exception>
            <exception cref="T:System.ArgumentException">
            The space from <paramref name="index"/> to the end of
            <paramref name="array"/> is not enough to copy to.
            </exception>
        </member>
        <member name="M:Sfs2X.WebSocketSharp.Net.CookieCollection.GetEnumerator">
            <summary>
            Gets the enumerator that iterates through the collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.Generic.IEnumerator{Cookie}"/>
            instance that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:Sfs2X.WebSocketSharp.Net.CookieCollection.Remove(Sfs2X.WebSocketSharp.Net.Cookie)">
            <summary>
            Removes the specified cookie from the collection.
            </summary>
            <returns>
              <para>
              <c>true</c> if the cookie is successfully removed; otherwise,
              <c>false</c>.
              </para>
              <para>
              <c>false</c> if the cookie is not found in the collection.
              </para>
            </returns>
            <param name="cookie">
            A <see cref="T:Sfs2X.WebSocketSharp.Net.Cookie"/> to remove.
            </param>
            <exception cref="T:System.InvalidOperationException">
            The collection is read-only.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="cookie"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:Sfs2X.WebSocketSharp.Net.CookieCollection.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Gets the enumerator that iterates through the collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"/> instance that can be used to iterate
            through the collection.
            </returns>
        </member>
        <member name="T:Sfs2X.WebSocketSharp.Net.CookieException">
            <summary>
            The exception that is thrown when a <see cref="T:Sfs2X.WebSocketSharp.Net.Cookie"/> gets an error.
            </summary>
        </member>
        <member name="M:Sfs2X.WebSocketSharp.Net.CookieException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Sfs2X.WebSocketSharp.Net.CookieException"/> class
            with the serialized data.
            </summary>
            <param name="serializationInfo">
            A <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data.
            </param>
            <param name="streamingContext">
            A <see cref="T:System.Runtime.Serialization.StreamingContext"/> that specifies the source for
            the deserialization.
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="serializationInfo"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:Sfs2X.WebSocketSharp.Net.CookieException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Sfs2X.WebSocketSharp.Net.CookieException"/> class.
            </summary>
        </member>
        <member name="M:Sfs2X.WebSocketSharp.Net.CookieException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates the specified <see cref="T:System.Runtime.Serialization.SerializationInfo"/> instance with
            the data needed to serialize the current instance.
            </summary>
            <param name="serializationInfo">
            A <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data.
            </param>
            <param name="streamingContext">
            A <see cref="T:System.Runtime.Serialization.StreamingContext"/> that specifies the destination for
            the serialization.
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="serializationInfo"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:Sfs2X.WebSocketSharp.Net.CookieException.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates the specified <see cref="T:System.Runtime.Serialization.SerializationInfo"/> instance with
            the data needed to serialize the current instance.
            </summary>
            <param name="serializationInfo">
            A <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data.
            </param>
            <param name="streamingContext">
            A <see cref="T:System.Runtime.Serialization.StreamingContext"/> that specifies the destination for
            the serialization.
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="serializationInfo"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="T:Sfs2X.WebSocketSharp.Net.HttpBasicIdentity">
            <summary>
            Holds the username and password from an HTTP Basic authentication attempt.
            </summary>
        </member>
        <member name="P:Sfs2X.WebSocketSharp.Net.HttpBasicIdentity.Password">
            <summary>
            Gets the password from a basic authentication attempt.
            </summary>
            <value>
            A <see cref="T:System.String"/> that represents the password.
            </value>
        </member>
        <member name="T:Sfs2X.WebSocketSharp.Net.HttpDigestIdentity">
            <summary>
            Holds the username and other parameters from
            an HTTP Digest authentication attempt.
            </summary>
        </member>
        <member name="P:Sfs2X.WebSocketSharp.Net.HttpDigestIdentity.Algorithm">
            <summary>
            Gets the algorithm parameter from a digest authentication attempt.
            </summary>
            <value>
            A <see cref="T:System.String"/> that represents the algorithm parameter.
            </value>
        </member>
        <member name="P:Sfs2X.WebSocketSharp.Net.HttpDigestIdentity.Cnonce">
            <summary>
            Gets the cnonce parameter from a digest authentication attempt.
            </summary>
            <value>
            A <see cref="T:System.String"/> that represents the cnonce parameter.
            </value>
        </member>
        <member name="P:Sfs2X.WebSocketSharp.Net.HttpDigestIdentity.Nc">
            <summary>
            Gets the nc parameter from a digest authentication attempt.
            </summary>
            <value>
            A <see cref="T:System.String"/> that represents the nc parameter.
            </value>
        </member>
        <member name="P:Sfs2X.WebSocketSharp.Net.HttpDigestIdentity.Nonce">
            <summary>
            Gets the nonce parameter from a digest authentication attempt.
            </summary>
            <value>
            A <see cref="T:System.String"/> that represents the nonce parameter.
            </value>
        </member>
        <member name="P:Sfs2X.WebSocketSharp.Net.HttpDigestIdentity.Opaque">
            <summary>
            Gets the opaque parameter from a digest authentication attempt.
            </summary>
            <value>
            A <see cref="T:System.String"/> that represents the opaque parameter.
            </value>
        </member>
        <member name="P:Sfs2X.WebSocketSharp.Net.HttpDigestIdentity.Qop">
            <summary>
            Gets the qop parameter from a digest authentication attempt.
            </summary>
            <value>
            A <see cref="T:System.String"/> that represents the qop parameter.
            </value>
        </member>
        <member name="P:Sfs2X.WebSocketSharp.Net.HttpDigestIdentity.Realm">
            <summary>
            Gets the realm parameter from a digest authentication attempt.
            </summary>
            <value>
            A <see cref="T:System.String"/> that represents the realm parameter.
            </value>
        </member>
        <member name="P:Sfs2X.WebSocketSharp.Net.HttpDigestIdentity.Response">
            <summary>
            Gets the response parameter from a digest authentication attempt.
            </summary>
            <value>
            A <see cref="T:System.String"/> that represents the response parameter.
            </value>
        </member>
        <member name="P:Sfs2X.WebSocketSharp.Net.HttpDigestIdentity.Uri">
            <summary>
            Gets the uri parameter from a digest authentication attempt.
            </summary>
            <value>
            A <see cref="T:System.String"/> that represents the uri parameter.
            </value>
        </member>
        <member name="T:Sfs2X.WebSocketSharp.Net.HttpListener">
            <summary>
            Provides a simple, programmatically controlled HTTP listener.
            </summary>
            <remarks>
              <para>
              The listener supports HTTP/1.1 version request and response.
              </para>
              <para>
              And the listener allows to accept WebSocket handshake requests.
              </para>
              <para>
              This class cannot be inherited.
              </para>
            </remarks>
        </member>
        <member name="M:Sfs2X.WebSocketSharp.Net.HttpListener.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Sfs2X.WebSocketSharp.Net.HttpListener"/> class.
            </summary>
        </member>
        <member name="P:Sfs2X.WebSocketSharp.Net.HttpListener.AuthenticationSchemes">
            <summary>
            Gets or sets the scheme used to authenticate the clients.
            </summary>
            <value>
              <para>
              One of the <see cref="T:Sfs2X.WebSocketSharp.Net.AuthenticationSchemes"/>
              enum values.
              </para>
              <para>
              It represents the scheme used to authenticate the clients.
              </para>
              <para>
              The default value is
              <see cref="F:Sfs2X.WebSocketSharp.Net.AuthenticationSchemes.Anonymous"/>.
              </para>
            </value>
            <exception cref="T:System.ObjectDisposedException">
            This listener has been closed.
            </exception>
        </member>
        <member name="P:Sfs2X.WebSocketSharp.Net.HttpListener.AuthenticationSchemeSelector">
            <summary>
            Gets or sets the delegate called to select the scheme used to
            authenticate the clients.
            </summary>
            <remarks>
              <para>
              If this property is set, the listener uses the authentication
              scheme selected by the delegate for each request.
              </para>
              <para>
              Or if this property is not set, the listener uses the value of
              the <see cref="P:Sfs2X.WebSocketSharp.Net.HttpListener.AuthenticationSchemes"/> property
              as the authentication scheme for all requests.
              </para>
            </remarks>
            <value>
              <para>
              A <c>Func&lt;<see cref="T:Sfs2X.WebSocketSharp.Net.HttpListenerRequest"/>,
              <see cref="P:Sfs2X.WebSocketSharp.Net.HttpListener.AuthenticationSchemes"/>&gt;</c> delegate or
              <see langword="null"/> if not needed.
              </para>
              <para>
              The delegate references the method used to select
              an authentication scheme.
              </para>
              <para>
              The default value is <see langword="null"/>.
              </para>
            </value>
            <exception cref="T:System.ObjectDisposedException">
            This listener has been closed.
            </exception>
        </member>
        <member name="P:Sfs2X.WebSocketSharp.Net.HttpListener.CertificateFolderPath">
            <summary>
            Gets or sets the path to the folder in which stores the certificate
            files used to authenticate the server on the secure connection.
            </summary>
            <remarks>
              <para>
              This property represents the path to the folder in which stores
              the certificate files associated with each port number of added
              URI prefixes.
              </para>
              <para>
              A set of the certificate files is a pair of &lt;port number&gt;.cer
              (DER) and &lt;port number&gt;.key (DER, RSA Private Key).
              </para>
              <para>
              If this property is <see langword="null"/> or an empty string,
              the result of <c>System.Environment.GetFolderPath (<see
              cref="F:System.Environment.SpecialFolder.ApplicationData"/>)</c>
              is used as the default path.
              </para>
            </remarks>
            <value>
              <para>
              A <see cref="T:System.String"/> that represents the path to the folder
              in which stores the certificate files.
              </para>
              <para>
              The default value is <see langword="null"/>.
              </para>
            </value>
            <exception cref="T:System.ObjectDisposedException">
            This listener has been closed.
            </exception>
        </member>
        <member name="P:Sfs2X.WebSocketSharp.Net.HttpListener.IgnoreWriteExceptions">
            <summary>
            Gets or sets a value indicating whether the listener returns
            exceptions that occur when sending the response to the client.
            </summary>
            <value>
              <para>
              <c>true</c> if the listener should not return those exceptions;
              otherwise, <c>false</c>.
              </para>
              <para>
              The default value is <c>false</c>.
              </para>
            </value>
            <exception cref="T:System.ObjectDisposedException">
            This listener has been closed.
            </exception>
        </member>
        <member name="P:Sfs2X.WebSocketSharp.Net.HttpListener.IsListening">
            <summary>
            Gets a value indicating whether the listener has been started.
            </summary>
            <value>
            <c>true</c> if the listener has been started; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Sfs2X.WebSocketSharp.Net.HttpListener.IsSupported">
            <summary>
            Gets a value indicating whether the listener can be used with
            the current operating system.
            </summary>
            <value>
            <c>true</c>.
            </value>
        </member>
        <member name="P:Sfs2X.WebSocketSharp.Net.HttpListener.Log">
            <summary>
            Gets the logging functions.
            </summary>
            <remarks>
              <para>
              The default logging level is <see cref="F:Sfs2X.WebSocketSharp.LogLevel.Error"/>.
              </para>
              <para>
              If you would like to change it, you should set the <c>Log.Level</c>
              property to any of the <see cref="T:Sfs2X.WebSocketSharp.LogLevel"/> enum values.
              </para>
            </remarks>
            <value>
            A <see cref="T:Sfs2X.WebSocketSharp.Logger"/> that provides the logging functions.
            </value>
        </member>
        <member name="P:Sfs2X.WebSocketSharp.Net.HttpListener.Prefixes">
            <summary>
            Gets the URI prefixes handled by the listener.
            </summary>
            <value>
            A <see cref="T:Sfs2X.WebSocketSharp.Net.HttpListenerPrefixCollection"/> that contains the URI
            prefixes.
            </value>
            <exception cref="T:System.ObjectDisposedException">
            This listener has been closed.
            </exception>
        </member>
        <member name="P:Sfs2X.WebSocketSharp.Net.HttpListener.Realm">
            <summary>
            Gets or sets the name of the realm associated with the listener.
            </summary>
            <remarks>
            If this property is <see langword="null"/> or an empty string,
            "SECRET AREA" will be used as the name of the realm.
            </remarks>
            <value>
              <para>
              A <see cref="T:System.String"/> that represents the name of the realm.
              </para>
              <para>
              The default value is <see langword="null"/>.
              </para>
            </value>
            <exception cref="T:System.ObjectDisposedException">
            This listener has been closed.
            </exception>
        </member>
        <member name="P:Sfs2X.WebSocketSharp.Net.HttpListener.SslConfiguration">
            <summary>
            Gets the SSL configuration used to authenticate the server and
            optionally the client for secure connection.
            </summary>
            <value>
            A <see cref="T:Sfs2X.WebSocketSharp.Net.ServerSslConfiguration"/> that represents the SSL
            configuration for secure connection.
            </value>
            <exception cref="T:System.ObjectDisposedException">
            This listener has been closed.
            </exception>
        </member>
        <member name="P:Sfs2X.WebSocketSharp.Net.HttpListener.UnsafeConnectionNtlmAuthentication">
            <summary>
            Gets or sets a value indicating whether, when NTLM authentication is used,
            the authentication information of first request is used to authenticate
            additional requests on the same connection.
            </summary>
            <remarks>
            This property is not currently supported and always throws
            a <see cref="T:System.NotSupportedException"/>.
            </remarks>
            <value>
            <c>true</c> if the authentication information of first request is used;
            otherwise, <c>false</c>.
            </value>
            <exception cref="T:System.NotSupportedException">
            Any use of this property.
            </exception>
        </member>
        <member name="P:Sfs2X.WebSocketSharp.Net.HttpListener.UserCredentialsFinder">
            <summary>
            Gets or sets the delegate called to find the credentials for
            an identity used to authenticate a client.
            </summary>
            <value>
              <para>
              A <c>Func&lt;<see cref="T:System.Security.Principal.IIdentity"/>,
              <see cref="T:Sfs2X.WebSocketSharp.Net.NetworkCredential"/>&gt;</c> delegate or
              <see langword="null"/> if not needed.
              </para>
              <para>
              It references the method used to find the credentials.
              </para>
              <para>
              The default value is <see langword="null"/>.
              </para>
            </value>
            <exception cref="T:System.ObjectDisposedException">
            This listener has been closed.
            </exception>
        </member>
        <member name="M:Sfs2X.WebSocketSharp.Net.HttpListener.Abort">
            <summary>
            Shuts down the listener immediately.
            </summary>
        </member>
        <member name="M:Sfs2X.WebSocketSharp.Net.HttpListener.BeginGetContext(System.AsyncCallback,System.Object)">
            <summary>
            Begins getting an incoming request asynchronously.
            </summary>
            <remarks>
              <para>
              This asynchronous operation must be completed by calling
              the EndGetContext method.
              </para>
              <para>
              Typically, the EndGetContext method is called by
              <paramref name="callback"/>.
              </para>
            </remarks>
            <returns>
            An <see cref="T:System.IAsyncResult"/> that represents the status of
            the asynchronous operation.
            </returns>
            <param name="callback">
            An <see cref="T:System.AsyncCallback"/> delegate that references the method
            to invoke when the asynchronous operation completes.
            </param>
            <param name="state">
            An <see cref="T:System.Object"/> that specifies a user defined object to
            pass to <paramref name="callback"/>.
            </param>
            <exception cref="T:System.InvalidOperationException">
              <para>
              This listener has not been started or is currently stopped.
              </para>
              <para>
              -or-
              </para>
              <para>
              This listener has no URI prefix on which listens.
              </para>
            </exception>
            <exception cref="T:Sfs2X.WebSocketSharp.Net.HttpListenerException">
            This method is canceled.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            This listener has been closed.
            </exception>
        </member>
        <member name="M:Sfs2X.WebSocketSharp.Net.HttpListener.Close">
            <summary>
            Shuts down the listener.
            </summary>
        </member>
        <member name="M:Sfs2X.WebSocketSharp.Net.HttpListener.EndGetContext(System.IAsyncResult)">
            <summary>
            Ends an asynchronous operation to get an incoming request.
            </summary>
            <remarks>
            This method completes an asynchronous operation started by
            calling the BeginGetContext method.
            </remarks>
            <returns>
            A <see cref="T:Sfs2X.WebSocketSharp.Net.HttpListenerContext"/> that represents a request.
            </returns>
            <param name="asyncResult">
            An <see cref="T:System.IAsyncResult"/> instance obtained by calling
            the BeginGetContext method.
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="asyncResult"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="asyncResult"/> was not obtained by calling
            the BeginGetContext method.
            </exception>
            <exception cref="T:System.InvalidOperationException">
              <para>
              This listener has not been started or is currently stopped.
              </para>
              <para>
              -or-
              </para>
              <para>
              This method was already called for <paramref name="asyncResult"/>.
              </para>
            </exception>
            <exception cref="T:Sfs2X.WebSocketSharp.Net.HttpListenerException">
            This method is canceled.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            This listener has been closed.
            </exception>
        </member>
        <member name="M:Sfs2X.WebSocketSharp.Net.HttpListener.GetContext">
            <summary>
            Gets an incoming request.
            </summary>
            <remarks>
            This method waits for an incoming request and returns when
            a request is received.
            </remarks>
            <returns>
            A <see cref="T:Sfs2X.WebSocketSharp.Net.HttpListenerContext"/> that represents a request.
            </returns>
            <exception cref="T:System.InvalidOperationException">
              <para>
              This listener has not been started or is currently stopped.
              </para>
              <para>
              -or-
              </para>
              <para>
              This listener has no URI prefix on which listens.
              </para>
            </exception>
            <exception cref="T:Sfs2X.WebSocketSharp.Net.HttpListenerException">
            This method is canceled.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            This listener has been closed.
            </exception>
        </member>
        <member name="M:Sfs2X.WebSocketSharp.Net.HttpListener.Start">
            <summary>
            Starts receiving incoming requests.
            </summary>
            <exception cref="T:System.ObjectDisposedException">
            This listener has been closed.
            </exception>
        </member>
        <member name="M:Sfs2X.WebSocketSharp.Net.HttpListener.Stop">
            <summary>
            Stops receiving incoming requests.
            </summary>
            <exception cref="T:System.ObjectDisposedException">
            This listener has been closed.
            </exception>
        </member>
        <member name="M:Sfs2X.WebSocketSharp.Net.HttpListener.System#IDisposable#Dispose">
            <summary>
            Releases all resources used by the listener.
            </summary>
        </member>
        <member name="T:Sfs2X.WebSocketSharp.Net.HttpListenerContext">
            <summary>
            Provides the access to the HTTP request and response objects used by
            the <see cref="T:Sfs2X.WebSocketSharp.Net.HttpListener"/> class.
            </summary>
            <remarks>
            This class cannot be inherited.
            </remarks>
        </member>
        <member name="P:Sfs2X.WebSocketSharp.Net.HttpListenerContext.Request">
            <summary>
            Gets the HTTP request object that represents a client request.
            </summary>
            <value>
            A <see cref="T:Sfs2X.WebSocketSharp.Net.HttpListenerRequest"/> that represents the client request.
            </value>
        </member>
        <member name="P:Sfs2X.WebSocketSharp.Net.HttpListenerContext.Response">
            <summary>
            Gets the HTTP response object used to send a response to the client.
            </summary>
            <value>
            A <see cref="T:Sfs2X.WebSocketSharp.Net.HttpListenerResponse"/> that represents a response to
            the client request.
            </value>
        </member>
        <member name="P:Sfs2X.WebSocketSharp.Net.HttpListenerContext.User">
            <summary>
            Gets the client information.
            </summary>
            <value>
              <para>
              A <see cref="T:System.Security.Principal.IPrincipal"/> instance that represents identity,
              authentication, and security roles for the client.
              </para>
              <para>
              <see langword="null"/> if the client is not authenticated.
              </para>
            </value>
        </member>
        <member name="M:Sfs2X.WebSocketSharp.Net.HttpListenerContext.AcceptWebSocket(System.String)">
            <summary>
            Accepts a WebSocket connection.
            </summary>
            <returns>
            A <see cref="T:Sfs2X.WebSocketSharp.Net.WebSockets.HttpListenerWebSocketContext"/> that represents
            the WebSocket handshake request.
            </returns>
            <param name="protocol">
              <para>
              A <see cref="T:System.String"/> that specifies the name of the subprotocol
              supported on the WebSocket connection.
              </para>
              <para>
              <see langword="null"/> if not necessary.
              </para>
            </param>
            <exception cref="T:System.InvalidOperationException">
              <para>
              This method has already been done.
              </para>
              <para>
              -or-
              </para>
              <para>
              The client request is not a WebSocket handshake request.
              </para>
            </exception>
            <exception cref="T:System.ArgumentException">
              <para>
              <paramref name="protocol"/> is empty.
              </para>
              <para>
              -or-
              </para>
              <para>
              <paramref name="protocol"/> contains an invalid character.
              </para>
            </exception>
        </member>
        <member name="M:Sfs2X.WebSocketSharp.Net.HttpListenerContext.AcceptWebSocket(System.String,System.Action{Sfs2X.WebSocketSharp.WebSocket})">
            <summary>
            Accepts a WebSocket connection with initializing the WebSocket
            interface.
            </summary>
            <returns>
            A <see cref="T:Sfs2X.WebSocketSharp.Net.WebSockets.HttpListenerWebSocketContext"/> that represents
            the WebSocket handshake request.
            </returns>
            <param name="protocol">
              <para>
              A <see cref="T:System.String"/> that specifies the name of the subprotocol
              supported on the WebSocket connection.
              </para>
              <para>
              <see langword="null"/> if not necessary.
              </para>
            </param>
            <param name="initializer">
              <para>
              An <see cref="T:System.Action{WebSocket}"/> delegate.
              </para>
              <para>
              It specifies the delegate that invokes the method called when
              initializing a new WebSocket instance.
              </para>
            </param>
            <exception cref="T:System.InvalidOperationException">
              <para>
              This method has already been done.
              </para>
              <para>
              -or-
              </para>
              <para>
              The client request is not a WebSocket handshake request.
              </para>
            </exception>
            <exception cref="T:System.ArgumentException">
              <para>
              <paramref name="protocol"/> is empty.
              </para>
              <para>
              -or-
              </para>
              <para>
              <paramref name="protocol"/> contains an invalid character.
              </para>
              <para>
              -or-
              </para>
              <para>
              <paramref name="initializer"/> caused an exception.
              </para>
            </exception>
        </member>
        <member name="T:Sfs2X.WebSocketSharp.Net.HttpListenerException">
            <summary>
            The exception that is thrown when an error occurs processing
            an HTTP request.
            </summary>
        </member>
        <member name="M:Sfs2X.WebSocketSharp.Net.HttpListenerException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Sfs2X.WebSocketSharp.Net.HttpListenerException"/>
            class from the specified instances of the <see cref="T:System.Runtime.Serialization.SerializationInfo"/>
            and <see cref="T:System.Runtime.Serialization.StreamingContext"/> classes.
            </summary>
            <param name="serializationInfo">
            A <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that contains the serialized
            object data.
            </param>
            <param name="streamingContext">
            A <see cref="T:System.Runtime.Serialization.StreamingContext"/> that specifies the source for
            the deserialization.
            </param>
        </member>
        <member name="M:Sfs2X.WebSocketSharp.Net.HttpListenerException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Sfs2X.WebSocketSharp.Net.HttpListenerException"/>
            class.
            </summary>
        </member>
        <member name="M:Sfs2X.WebSocketSharp.Net.HttpListenerException.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Sfs2X.WebSocketSharp.Net.HttpListenerException"/>
            class with the specified error code.
            </summary>
            <param name="errorCode">
            An <see cref="T:System.Int32"/> that specifies the error code.
            </param>
        </member>
        <member name="M:Sfs2X.WebSocketSharp.Net.HttpListenerException.#ctor(System.Int32,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Sfs2X.WebSocketSharp.Net.HttpListenerException"/>
            class with the specified error code and message.
            </summary>
            <param name="errorCode">
            An <see cref="T:System.Int32"/> that specifies the error code.
            </param>
            <param name="message">
            A <see cref="T:System.String"/> that specifies the message.
            </param>
        </member>
        <member name="P:Sfs2X.WebSocketSharp.Net.HttpListenerException.ErrorCode">
            <summary>
            Gets the error code that identifies the error that occurred.
            </summary>
            <value>
              <para>
              An <see cref="T:System.Int32"/> that represents the error code.
              </para>
              <para>
              It is any of the Win32 error codes.
              </para>
            </value>
        </member>
        <member name="M:Sfs2X.WebSocketSharp.Net.HttpListenerPrefix.#ctor(System.String,Sfs2X.WebSocketSharp.Net.HttpListener)">
            <summary>
            Initializes a new instance of the <see cref="T:Sfs2X.WebSocketSharp.Net.HttpListenerPrefix"/> class
            with the specified URI prefix and HTTP listener.
            </summary>
            <remarks>
            This constructor must be called after calling the CheckPrefix method.
            </remarks>
            <param name="uriPrefix">
            A <see cref="T:System.String"/> that specifies the URI prefix.
            </param>
            <param name="listener">
            A <see cref="T:Sfs2X.WebSocketSharp.Net.HttpListener"/> that specifies the HTTP listener.
            </param>
        </member>
        <member name="M:Sfs2X.WebSocketSharp.Net.HttpListenerPrefix.Equals(System.Object)">
            <summary>
            Determines whether the current instance is equal to the specified
            <see cref="T:System.Object"/> instance.
            </summary>
            <remarks>
            This method will be required to detect duplicates in any collection.
            </remarks>
            <param name="obj">
              <para>
              An <see cref="T:System.Object"/> instance to compare to the current instance.
              </para>
              <para>
              An reference to a <see cref="T:Sfs2X.WebSocketSharp.Net.HttpListenerPrefix"/> instance.
              </para>
            </param>
            <returns>
            <c>true</c> if the current instance and <paramref name="obj"/> have
            the same URI prefix; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Sfs2X.WebSocketSharp.Net.HttpListenerPrefix.GetHashCode">
            <summary>
            Gets the hash code for the current instance.
            </summary>
            <remarks>
            This method will be required to detect duplicates in any collection.
            </remarks>
            <returns>
            An <see cref="T:System.Int32"/> that represents the hash code.
            </returns>
        </member>
        <member name="T:Sfs2X.WebSocketSharp.Net.HttpListenerPrefixCollection">
            <summary>
            Provides a collection used to store the URI prefixes for a instance of
            the <see cref="T:Sfs2X.WebSocketSharp.Net.HttpListener"/> class.
            </summary>
            <remarks>
            The <see cref="T:Sfs2X.WebSocketSharp.Net.HttpListener"/> instance responds to the request which has
            a requested URI that the prefixes most closely match.
            </remarks>
        </member>
        <member name="P:Sfs2X.WebSocketSharp.Net.HttpListenerPrefixCollection.Count">
            <summary>
            Gets the number of prefixes in the collection.
            </summary>
            <value>
            An <see cref="T:System.Int32"/> that represents the number of prefixes.
            </value>
        </member>
        <member name="P:Sfs2X.WebSocketSharp.Net.HttpListenerPrefixCollection.IsReadOnly">
            <summary>
            Gets a value indicating whether the access to the collection is
            read-only.
            </summary>
            <value>
            Always returns <c>false</c>.
            </value>
        </member>
        <member name="P:Sfs2X.WebSocketSharp.Net.HttpListenerPrefixCollection.IsSynchronized">
            <summary>
            Gets a value indicating whether the access to the collection is
            synchronized.
            </summary>
            <value>
            Always returns <c>false</c>.
            </value>
        </member>
        <member name="M:Sfs2X.WebSocketSharp.Net.HttpListenerPrefixCollection.Add(System.String)">
            <summary>
            Adds the specified URI prefix to the collection.
            </summary>
            <param name="uriPrefix">
              <para>
              A <see cref="T:System.String"/> that specifies the URI prefix to add.
              </para>
              <para>
              It must be a well-formed URI prefix with http or https scheme,
              and must end with a '/'.
              </para>
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="uriPrefix"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="uriPrefix"/> is invalid.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            The <see cref="T:Sfs2X.WebSocketSharp.Net.HttpListener"/> instance associated with this
            collection is closed.
            </exception>
        </member>
        <member name="M:Sfs2X.WebSocketSharp.Net.HttpListenerPrefixCollection.Clear">
            <summary>
            Removes all URI prefixes from the collection.
            </summary>
            <exception cref="T:System.ObjectDisposedException">
            The <see cref="T:Sfs2X.WebSocketSharp.Net.HttpListener"/> instance associated with this
            collection is closed.
            </exception>
        </member>
        <member name="M:Sfs2X.WebSocketSharp.Net.HttpListenerPrefixCollection.Contains(System.String)">
            <summary>
            Returns a value indicating whether the collection contains the
            specified URI prefix.
            </summary>
            <returns>
            <c>true</c> if the collection contains the URI prefix; otherwise,
            <c>false</c>.
            </returns>
            <param name="uriPrefix">
            A <see cref="T:System.String"/> that specifies the URI prefix to test.
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="uriPrefix"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            The <see cref="T:Sfs2X.WebSocketSharp.Net.HttpListener"/> instance associated with this
            collection is closed.
            </exception>
        </member>
        <member name="M:Sfs2X.WebSocketSharp.Net.HttpListenerPrefixCollection.CopyTo(System.String[],System.Int32)">
            <summary>
            Copies the contents of the collection to the specified array of string.
            </summary>
            <param name="array">
            An array of <see cref="T:System.String"/> that specifies the destination of
            the URI prefix strings copied from the collection.
            </param>
            <param name="offset">
            An <see cref="T:System.Int32"/> that specifies the zero-based index in
            the array at which copying begins.
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="array"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="offset"/> is less than zero.
            </exception>
            <exception cref="T:System.ArgumentException">
            The space from <paramref name="offset"/> to the end of
            <paramref name="array"/> is not enough to copy to.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            The <see cref="T:Sfs2X.WebSocketSharp.Net.HttpListener"/> instance associated with this
            collection is closed.
            </exception>
        </member>
        <member name="M:Sfs2X.WebSocketSharp.Net.HttpListenerPrefixCollection.GetEnumerator">
            <summary>
            Gets the enumerator that iterates through the collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.Generic.IEnumerator{string}"/>
            instance that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:Sfs2X.WebSocketSharp.Net.HttpListenerPrefixCollection.Remove(System.String)">
            <summary>
            Removes the specified URI prefix from the collection.
            </summary>
            <returns>
            <c>true</c> if the URI prefix is successfully removed; otherwise,
            <c>false</c>.
            </returns>
            <param name="uriPrefix">
            A <see cref="T:System.String"/> that specifies the URI prefix to remove.
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="uriPrefix"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            The <see cref="T:Sfs2X.WebSocketSharp.Net.HttpListener"/> instance associated with this
            collection is closed.
            </exception>
        </member>
        <member name="M:Sfs2X.WebSocketSharp.Net.HttpListenerPrefixCollection.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Gets the enumerator that iterates through the collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"/> instance that can be used to iterate
            through the collection.
            </returns>
        </member>
        <member name="T:Sfs2X.WebSocketSharp.Net.HttpListenerRequest">
            <summary>
            Represents an incoming HTTP request to a <see cref="T:Sfs2X.WebSocketSharp.Net.HttpListener"/>
            instance.
            </summary>
            <remarks>
            This class cannot be inherited.
            </remarks>
        </member>
        <member name="P:Sfs2X.WebSocketSharp.Net.HttpListenerRequest.AcceptTypes">
            <summary>
            Gets the media types that are acceptable for the client.
            </summary>
            <value>
              <para>
              An array of <see cref="T:System.String"/> or <see langword="null"/>.
              </para>
              <para>
              The array contains the names of the media types specified in
              the value of the Accept header.
              </para>
              <para>
              <see langword="null"/> if the header is not present.
              </para>
            </value>
        </member>
        <member name="P:Sfs2X.WebSocketSharp.Net.HttpListenerRequest.ClientCertificateError">
            <summary>
            Gets an error code that identifies a problem with the certificate
            provided by the client.
            </summary>
            <value>
            An <see cref="T:System.Int32"/> that represents an error code.
            </value>
            <exception cref="T:System.NotSupportedException">
            This property is not supported.
            </exception>
        </member>
        <member name="P:Sfs2X.WebSocketSharp.Net.HttpListenerRequest.ContentEncoding">
            <summary>
            Gets the encoding for the entity body data included in the request.
            </summary>
            <value>
              <para>
              A <see cref="T:System.Text.Encoding"/> converted from the charset value of the
              Content-Type header.
              </para>
              <para>
              <see cref="P:System.Text.Encoding.UTF8"/> if the charset value is not available.
              </para>
            </value>
        </member>
        <member name="P:Sfs2X.WebSocketSharp.Net.HttpListenerRequest.ContentLength64">
            <summary>
            Gets the length in bytes of the entity body data included in the
            request.
            </summary>
            <value>
              <para>
              A <see cref="T:System.Int64"/> converted from the value of the Content-Length
              header.
              </para>
              <para>
              -1 if the header is not present.
              </para>
            </value>
        </member>
        <member name="P:Sfs2X.WebSocketSharp.Net.HttpListenerRequest.ContentType">
            <summary>
            Gets the media type of the entity body data included in the request.
            </summary>
            <value>
              <para>
              A <see cref="T:System.String"/> or <see langword="null"/>.
              </para>
              <para>
              The string represents the value of the Content-Type header.
              </para>
              <para>
              <see langword="null"/> if the header is not present.
              </para>
            </value>
        </member>
        <member name="P:Sfs2X.WebSocketSharp.Net.HttpListenerRequest.Cookies">
            <summary>
            Gets the cookies included in the request.
            </summary>
            <value>
              <para>
              A <see cref="T:Sfs2X.WebSocketSharp.Net.CookieCollection"/> that contains the cookies.
              </para>
              <para>
              An empty collection if not included.
              </para>
            </value>
        </member>
        <member name="P:Sfs2X.WebSocketSharp.Net.HttpListenerRequest.HasEntityBody">
            <summary>
            Gets a value indicating whether the request has the entity body data.
            </summary>
            <value>
            <c>true</c> if the request has the entity body data; otherwise,
            <c>false</c>.
            </value>
        </member>
        <member name="P:Sfs2X.WebSocketSharp.Net.HttpListenerRequest.Headers">
            <summary>
            Gets the headers included in the request.
            </summary>
            <value>
            A <see cref="T:System.Collections.Specialized.NameValueCollection"/> that contains the headers.
            </value>
        </member>
        <member name="P:Sfs2X.WebSocketSharp.Net.HttpListenerRequest.HttpMethod">
            <summary>
            Gets the HTTP method specified by the client.
            </summary>
            <value>
            A <see cref="T:System.String"/> that represents the HTTP method specified in
            the request line.
            </value>
        </member>
        <member name="P:Sfs2X.WebSocketSharp.Net.HttpListenerRequest.InputStream">
            <summary>
            Gets a stream that contains the entity body data included in
            the request.
            </summary>
            <value>
              <para>
              A <see cref="T:System.IO.Stream"/> that contains the entity body data.
              </para>
              <para>
              <see cref="F:System.IO.Stream.Null"/> if the entity body data is not available.
              </para>
            </value>
        </member>
        <member name="P:Sfs2X.WebSocketSharp.Net.HttpListenerRequest.IsAuthenticated">
            <summary>
            Gets a value indicating whether the client is authenticated.
            </summary>
            <value>
            <c>true</c> if the client is authenticated; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Sfs2X.WebSocketSharp.Net.HttpListenerRequest.IsLocal">
            <summary>
            Gets a value indicating whether the request is sent from the
            local computer.
            </summary>
            <value>
            <c>true</c> if the request is sent from the same computer as
            the server; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Sfs2X.WebSocketSharp.Net.HttpListenerRequest.IsSecureConnection">
            <summary>
            Gets a value indicating whether a secure connection is used to send
            the request.
            </summary>
            <value>
            <c>true</c> if the connection is secure; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Sfs2X.WebSocketSharp.Net.HttpListenerRequest.IsWebSocketRequest">
            <summary>
            Gets a value indicating whether the request is a WebSocket handshake
            request.
            </summary>
            <value>
            <c>true</c> if the request is a WebSocket handshake request; otherwise,
            <c>false</c>.
            </value>
        </member>
        <member name="P:Sfs2X.WebSocketSharp.Net.HttpListenerRequest.KeepAlive">
            <summary>
            Gets a value indicating whether a persistent connection is requested.
            </summary>
            <value>
            <c>true</c> if the request specifies that the connection is kept open;
            otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Sfs2X.WebSocketSharp.Net.HttpListenerRequest.LocalEndPoint">
            <summary>
            Gets the endpoint to which the request is sent.
            </summary>
            <value>
            A <see cref="T:System.Net.IPEndPoint"/> that represents the server
            IP address and port number.
            </value>
        </member>
        <member name="P:Sfs2X.WebSocketSharp.Net.HttpListenerRequest.ProtocolVersion">
            <summary>
            Gets the HTTP version specified by the client.
            </summary>
            <value>
            A <see cref="T:System.Version"/> that represents the HTTP version specified in
            the request line.
            </value>
        </member>
        <member name="P:Sfs2X.WebSocketSharp.Net.HttpListenerRequest.QueryString">
            <summary>
            Gets the query string included in the request.
            </summary>
            <value>
              <para>
              A <see cref="T:System.Collections.Specialized.NameValueCollection"/> that contains the query
              parameters.
              </para>
              <para>
              Each query parameter is decoded in UTF-8.
              </para>
              <para>
              An empty collection if not included.
              </para>
            </value>
        </member>
        <member name="P:Sfs2X.WebSocketSharp.Net.HttpListenerRequest.RawUrl">
            <summary>
            Gets the raw URL specified by the client.
            </summary>
            <value>
            A <see cref="T:System.String"/> that represents the request target specified in
            the request line.
            </value>
        </member>
        <member name="P:Sfs2X.WebSocketSharp.Net.HttpListenerRequest.RemoteEndPoint">
            <summary>
            Gets the endpoint from which the request is sent.
            </summary>
            <value>
            A <see cref="T:System.Net.IPEndPoint"/> that represents the client
            IP address and port number.
            </value>
        </member>
        <member name="P:Sfs2X.WebSocketSharp.Net.HttpListenerRequest.RequestTraceIdentifier">
            <summary>
            Gets the trace identifier of the request.
            </summary>
            <value>
            A <see cref="T:System.Guid"/> that represents the trace identifier.
            </value>
        </member>
        <member name="P:Sfs2X.WebSocketSharp.Net.HttpListenerRequest.Url">
            <summary>
            Gets the URL requested by the client.
            </summary>
            <value>
              <para>
              A <see cref="T:System.Uri"/> or <see langword="null"/>.
              </para>
              <para>
              The Uri represents the URL parsed from the request.
              </para>
              <para>
              <see langword="null"/> if the URL cannot be parsed.
              </para>
            </value>
        </member>
        <member name="P:Sfs2X.WebSocketSharp.Net.HttpListenerRequest.UrlReferrer">
            <summary>
            Gets the URI of the resource from which the requested URL was obtained.
            </summary>
            <value>
              <para>
              A <see cref="T:System.Uri"/> or <see langword="null"/>.
              </para>
              <para>
              The Uri represents the value of the Referer header.
              </para>
              <para>
              <see langword="null"/> if the header value is not available.
              </para>
            </value>
        </member>
        <member name="P:Sfs2X.WebSocketSharp.Net.HttpListenerRequest.UserAgent">
            <summary>
            Gets the user agent from which the request is originated.
            </summary>
            <value>
              <para>
              A <see cref="T:System.String"/> or <see langword="null"/>.
              </para>
              <para>
              The string represents the value of the User-Agent header.
              </para>
              <para>
              <see langword="null"/> if the header is not present.
              </para>
            </value>
        </member>
        <member name="P:Sfs2X.WebSocketSharp.Net.HttpListenerRequest.UserHostAddress">
            <summary>
            Gets the IP address and port number to which the request is sent.
            </summary>
            <value>
            A <see cref="T:System.String"/> that represents the server IP address and
            port number.
            </value>
        </member>
        <member name="P:Sfs2X.WebSocketSharp.Net.HttpListenerRequest.UserHostName">
            <summary>
            Gets the server host name requested by the client.
            </summary>
            <value>
              <para>
              A <see cref="T:System.String"/> that represents the value of the Host header.
              </para>
              <para>
              It includes the port number if provided.
              </para>
            </value>
        </member>
        <member name="P:Sfs2X.WebSocketSharp.Net.HttpListenerRequest.UserLanguages">
            <summary>
            Gets the natural languages that are acceptable for the client.
            </summary>
            <value>
              <para>
              An array of <see cref="T:System.String"/> or <see langword="null"/>.
              </para>
              <para>
              The array contains the names of the natural languages specified in
              the value of the Accept-Language header.
              </para>
              <para>
              <see langword="null"/> if the header is not present.
              </para>
            </value>
        </member>
        <member name="M:Sfs2X.WebSocketSharp.Net.HttpListenerRequest.BeginGetClientCertificate(System.AsyncCallback,System.Object)">
            <summary>
            Begins getting the certificate provided by the client asynchronously.
            </summary>
            <returns>
            An <see cref="T:System.IAsyncResult"/> instance that indicates the status of
            the operation.
            </returns>
            <param name="requestCallback">
            An <see cref="T:System.AsyncCallback"/> delegate that invokes the method called
            when the operation is complete.
            </param>
            <param name="state">
            An <see cref="T:System.Object"/> that specifies a user defined object to pass
            to the callback delegate.
            </param>
            <exception cref="T:System.NotSupportedException">
            This method is not supported.
            </exception>
        </member>
        <member name="M:Sfs2X.WebSocketSharp.Net.HttpListenerRequest.EndGetClientCertificate(System.IAsyncResult)">
            <summary>
            Ends an asynchronous operation to get the certificate provided by
            the client.
            </summary>
            <returns>
            A <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2"/> that represents an X.509 certificate
            provided by the client.
            </returns>
            <param name="asyncResult">
            An <see cref="T:System.IAsyncResult"/> instance returned when the operation
            started.
            </param>
            <exception cref="T:System.NotSupportedException">
            This method is not supported.
            </exception>
        </member>
        <member name="M:Sfs2X.WebSocketSharp.Net.HttpListenerRequest.GetClientCertificate">
            <summary>
            Gets the certificate provided by the client.
            </summary>
            <returns>
            A <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2"/> that represents an X.509 certificate
            provided by the client.
            </returns>
            <exception cref="T:System.NotSupportedException">
            This method is not supported.
            </exception>
        </member>
        <member name="M:Sfs2X.WebSocketSharp.Net.HttpListenerRequest.ToString">
            <summary>
            Returns a string that represents the current instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that contains the request line and headers
            included in the request.
            </returns>
        </member>
        <member name="T:Sfs2X.WebSocketSharp.Net.HttpListenerResponse">
            <summary>
            Represents an HTTP response to an HTTP request received by
            a <see cref="T:Sfs2X.WebSocketSharp.Net.HttpListener"/> instance.
            </summary>
            <remarks>
            This class cannot be inherited.
            </remarks>
        </member>
        <member name="P:Sfs2X.WebSocketSharp.Net.HttpListenerResponse.ContentEncoding">
            <summary>
            Gets or sets the encoding for the entity body data included in
            the response.
            </summary>
            <value>
              <para>
              A <see cref="T:System.Text.Encoding"/> that represents the encoding for
              the entity body data.
              </para>
              <para>
              <see langword="null"/> if no encoding is specified.
              </para>
              <para>
              The default value is <see langword="null"/>.
              </para>
            </value>
            <exception cref="T:System.InvalidOperationException">
            The response is already being sent.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            This instance is closed.
            </exception>
        </member>
        <member name="P:Sfs2X.WebSocketSharp.Net.HttpListenerResponse.ContentLength64">
            <summary>
            Gets or sets the number of bytes in the entity body data included in
            the response.
            </summary>
            <value>
              <para>
              A <see cref="T:System.Int64"/> that represents the number of bytes in
              the entity body data.
              </para>
              <para>
              It is used for the value of the Content-Length header.
              </para>
              <para>
              The default value is zero.
              </para>
            </value>
            <exception cref="T:System.ArgumentOutOfRangeException">
            The value specified for a set operation is less than zero.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            The response is already being sent.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            This instance is closed.
            </exception>
        </member>
        <member name="P:Sfs2X.WebSocketSharp.Net.HttpListenerResponse.ContentType">
            <summary>
            Gets or sets the media type of the entity body included in
            the response.
            </summary>
            <value>
              <para>
              A <see cref="T:System.String"/> that represents the media type of
              the entity body.
              </para>
              <para>
              It is used for the value of the Content-Type header.
              </para>
              <para>
              <see langword="null"/> if no media type is specified.
              </para>
              <para>
              The default value is <see langword="null"/>.
              </para>
            </value>
            <exception cref="T:System.ArgumentException">
              <para>
              The value specified for a set operation is an empty string.
              </para>
              <para>
              -or-
              </para>
              <para>
              The value specified for a set operation contains
              an invalid character.
              </para>
            </exception>
            <exception cref="T:System.InvalidOperationException">
            The response is already being sent.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            This instance is closed.
            </exception>
        </member>
        <member name="P:Sfs2X.WebSocketSharp.Net.HttpListenerResponse.Cookies">
            <summary>
            Gets or sets the collection of cookies sent with the response.
            </summary>
            <value>
            A <see cref="T:Sfs2X.WebSocketSharp.Net.CookieCollection"/> that contains the cookies sent with
            the response.
            </value>
        </member>
        <member name="P:Sfs2X.WebSocketSharp.Net.HttpListenerResponse.Headers">
            <summary>
            Gets or sets the collection of the HTTP headers sent to the client.
            </summary>
            <value>
            A <see cref="T:Sfs2X.WebSocketSharp.Net.WebHeaderCollection"/> that contains the headers sent to
            the client.
            </value>
            <exception cref="T:System.InvalidOperationException">
            The value specified for a set operation is not valid for a response.
            </exception>
        </member>
        <member name="P:Sfs2X.WebSocketSharp.Net.HttpListenerResponse.KeepAlive">
            <summary>
            Gets or sets a value indicating whether the server requests
            a persistent connection.
            </summary>
            <value>
              <para>
              <c>true</c> if the server requests a persistent connection;
              otherwise, <c>false</c>.
              </para>
              <para>
              The default value is <c>true</c>.
              </para>
            </value>
            <exception cref="T:System.InvalidOperationException">
            The response is already being sent.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            This instance is closed.
            </exception>
        </member>
        <member name="P:Sfs2X.WebSocketSharp.Net.HttpListenerResponse.OutputStream">
            <summary>
            Gets a stream instance to which the entity body data can be written.
            </summary>
            <value>
            A <see cref="T:System.IO.Stream"/> instance to which the entity body data can be
            written.
            </value>
            <exception cref="T:System.ObjectDisposedException">
            This instance is closed.
            </exception>
        </member>
        <member name="P:Sfs2X.WebSocketSharp.Net.HttpListenerResponse.ProtocolVersion">
            <summary>
            Gets the HTTP version used for the response.
            </summary>
            <value>
              <para>
              A <see cref="T:System.Version"/> that represents the HTTP version used for
              the response.
              </para>
              <para>
              Always returns same as 1.1.
              </para>
            </value>
        </member>
        <member name="P:Sfs2X.WebSocketSharp.Net.HttpListenerResponse.RedirectLocation">
            <summary>
            Gets or sets the URL to which the client is redirected to locate
            a requested resource.
            </summary>
            <value>
              <para>
              A <see cref="T:System.String"/> that represents the absolute URL for
              the redirect location.
              </para>
              <para>
              It is used for the value of the Location header.
              </para>
              <para>
              <see langword="null"/> if no redirect location is specified.
              </para>
              <para>
              The default value is <see langword="null"/>.
              </para>
            </value>
            <exception cref="T:System.ArgumentException">
              <para>
              The value specified for a set operation is an empty string.
              </para>
              <para>
              -or-
              </para>
              <para>
              The value specified for a set operation is not an absolute URL.
              </para>
            </exception>
            <exception cref="T:System.InvalidOperationException">
            The response is already being sent.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            This instance is closed.
            </exception>
        </member>
        <member name="P:Sfs2X.WebSocketSharp.Net.HttpListenerResponse.SendChunked">
            <summary>
            Gets or sets a value indicating whether the response uses the chunked
            transfer encoding.
            </summary>
            <value>
              <para>
              <c>true</c> if the response uses the chunked transfer encoding;
              otherwise, <c>false</c>.
              </para>
              <para>
              The default value is <c>false</c>.
              </para>
            </value>
            <exception cref="T:System.InvalidOperationException">
            The response is already being sent.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            This instance is closed.
            </exception>
        </member>
        <member name="P:Sfs2X.WebSocketSharp.Net.HttpListenerResponse.StatusCode">
            <summary>
            Gets or sets the HTTP status code returned to the client.
            </summary>
            <value>
              <para>
              An <see cref="T:System.Int32"/> that represents the HTTP status code for
              the response to the request.
              </para>
              <para>
              The default value is 200. It indicates that the request has
              succeeded.
              </para>
            </value>
            <exception cref="T:System.InvalidOperationException">
            The response is already being sent.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            This instance is closed.
            </exception>
            <exception cref="T:System.Net.ProtocolViolationException">
              <para>
              The value specified for a set operation is invalid.
              </para>
              <para>
              Valid values are between 100 and 999 inclusive.
              </para>
            </exception>
        </member>
        <member name="P:Sfs2X.WebSocketSharp.Net.HttpListenerResponse.StatusDescription">
            <summary>
            Gets or sets the description of the HTTP status code returned to
            the client.
            </summary>
            <value>
              <para>
              A <see cref="T:System.String"/> that represents the description of
              the HTTP status code for the response to the request.
              </para>
              <para>
              The default value is
              the <see href="http://tools.ietf.org/html/rfc2616#section-10">
              RFC 2616</see> description for the <see cref="P:Sfs2X.WebSocketSharp.Net.HttpListenerResponse.StatusCode"/>
              property value.
              </para>
              <para>
              An empty string if an RFC 2616 description does not exist.
              </para>
            </value>
            <exception cref="T:System.ArgumentNullException">
            The value specified for a set operation is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
            The value specified for a set operation contains an invalid character.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            The response is already being sent.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            This instance is closed.
            </exception>
        </member>
        <member name="M:Sfs2X.WebSocketSharp.Net.HttpListenerResponse.Abort">
            <summary>
            Closes the connection to the client without sending a response.
            </summary>
        </member>
        <member name="M:Sfs2X.WebSocketSharp.Net.HttpListenerResponse.AppendCookie(Sfs2X.WebSocketSharp.Net.Cookie)">
            <summary>
            Appends the specified cookie to the cookies sent with the response.
            </summary>
            <param name="cookie">
            A <see cref="T:Sfs2X.WebSocketSharp.Net.Cookie"/> to append.
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="cookie"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:Sfs2X.WebSocketSharp.Net.HttpListenerResponse.AppendHeader(System.String,System.String)">
            <summary>
            Appends an HTTP header with the specified name and value to
            the headers for the response.
            </summary>
            <param name="name">
            A <see cref="T:System.String"/> that specifies the name of the header to
            append.
            </param>
            <param name="value">
            A <see cref="T:System.String"/> that specifies the value of the header to
            append.
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="name"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
              <para>
              <paramref name="name"/> is an empty string.
              </para>
              <para>
              -or-
              </para>
              <para>
              <paramref name="name"/> is a string of spaces.
              </para>
              <para>
              -or-
              </para>
              <para>
              <paramref name="name"/> contains an invalid character.
              </para>
              <para>
              -or-
              </para>
              <para>
              <paramref name="value"/> contains an invalid character.
              </para>
              <para>
              -or-
              </para>
              <para>
              <paramref name="name"/> is a restricted header name.
              </para>
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            The length of <paramref name="value"/> is greater than 65,535
            characters.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            The current headers do not allow the header.
            </exception>
        </member>
        <member name="M:Sfs2X.WebSocketSharp.Net.HttpListenerResponse.Close">
            <summary>
            Sends the response to the client and releases the resources used by
            this instance.
            </summary>
        </member>
        <member name="M:Sfs2X.WebSocketSharp.Net.HttpListenerResponse.Close(System.Byte[],System.Boolean)">
            <summary>
            Sends the response with the specified entity body data to the client
            and releases the resources used by this instance.
            </summary>
            <param name="responseEntity">
            An array of <see cref="T:System.Byte"/> that contains the entity body data.
            </param>
            <param name="willBlock">
            A <see cref="T:System.Boolean"/>: <c>true</c> if this method blocks execution while
            flushing the stream to the client; otherwise, <c>false</c>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="responseEntity"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            This instance is closed.
            </exception>
        </member>
        <member name="M:Sfs2X.WebSocketSharp.Net.HttpListenerResponse.CopyFrom(Sfs2X.WebSocketSharp.Net.HttpListenerResponse)">
            <summary>
            Copies some properties from the specified response instance to
            this instance.
            </summary>
            <param name="templateResponse">
            A <see cref="T:Sfs2X.WebSocketSharp.Net.HttpListenerResponse"/> to copy.
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="templateResponse"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:Sfs2X.WebSocketSharp.Net.HttpListenerResponse.Redirect(System.String)">
            <summary>
            Configures the response to redirect the client's request to
            the specified URL.
            </summary>
            <remarks>
            This method sets the <see cref="P:Sfs2X.WebSocketSharp.Net.HttpListenerResponse.RedirectLocation"/> property to
            <paramref name="url"/>, the <see cref="P:Sfs2X.WebSocketSharp.Net.HttpListenerResponse.StatusCode"/> property to
            302, and the <see cref="P:Sfs2X.WebSocketSharp.Net.HttpListenerResponse.StatusDescription"/> property to "Found".
            </remarks>
            <param name="url">
            A <see cref="T:System.String"/> that specifies the absolute URL to which
            the client is redirected to locate a requested resource.
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="url"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
              <para>
              <paramref name="url"/> is an empty string.
              </para>
              <para>
              -or-
              </para>
              <para>
              <paramref name="url"/> is not an absolute URL.
              </para>
            </exception>
            <exception cref="T:System.InvalidOperationException">
            The response is already being sent.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            This instance is closed.
            </exception>
        </member>
        <member name="M:Sfs2X.WebSocketSharp.Net.HttpListenerResponse.SetCookie(Sfs2X.WebSocketSharp.Net.Cookie)">
            <summary>
            Adds or updates a cookie in the cookies sent with the response.
            </summary>
            <param name="cookie">
            A <see cref="T:Sfs2X.WebSocketSharp.Net.Cookie"/> to set.
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="cookie"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="cookie"/> already exists in the cookies but
            it cannot be updated.
            </exception>
        </member>
        <member name="M:Sfs2X.WebSocketSharp.Net.HttpListenerResponse.SetHeader(System.String,System.String)">
            <summary>
            Adds or updates an HTTP header with the specified name and value in
            the headers for the response.
            </summary>
            <param name="name">
            A <see cref="T:System.String"/> that specifies the name of the header to set.
            </param>
            <param name="value">
            A <see cref="T:System.String"/> that specifies the value of the header to set.
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="name"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
              <para>
              <paramref name="name"/> is an empty string.
              </para>
              <para>
              -or-
              </para>
              <para>
              <paramref name="name"/> is a string of spaces.
              </para>
              <para>
              -or-
              </para>
              <para>
              <paramref name="name"/> contains an invalid character.
              </para>
              <para>
              -or-
              </para>
              <para>
              <paramref name="value"/> contains an invalid character.
              </para>
              <para>
              -or-
              </para>
              <para>
              <paramref name="name"/> is a restricted header name.
              </para>
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            The length of <paramref name="value"/> is greater than 65,535
            characters.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            The current headers do not allow the header.
            </exception>
        </member>
        <member name="M:Sfs2X.WebSocketSharp.Net.HttpListenerResponse.System#IDisposable#Dispose">
            <summary>
            Releases all resources used by this instance.
            </summary>
        </member>
        <member name="T:Sfs2X.WebSocketSharp.Net.HttpRequestHeader">
            <summary>
            Indicates the HTTP header that may be specified in a client request.
            </summary>
            <remarks>
            The headers of this enumeration are defined in
            <see href="http://tools.ietf.org/html/rfc2616#section-14">RFC 2616</see> or
            <see href="http://tools.ietf.org/html/rfc6455#section-11.3">RFC 6455</see>.
            </remarks>
        </member>
        <member name="F:Sfs2X.WebSocketSharp.Net.HttpRequestHeader.CacheControl">
            <summary>
            Indicates the Cache-Control header.
            </summary>
        </member>
        <member name="F:Sfs2X.WebSocketSharp.Net.HttpRequestHeader.Connection">
            <summary>
            Indicates the Connection header.
            </summary>
        </member>
        <member name="F:Sfs2X.WebSocketSharp.Net.HttpRequestHeader.Date">
            <summary>
            Indicates the Date header.
            </summary>
        </member>
        <member name="F:Sfs2X.WebSocketSharp.Net.HttpRequestHeader.KeepAlive">
            <summary>
            Indicates the Keep-Alive header.
            </summary>
        </member>
        <member name="F:Sfs2X.WebSocketSharp.Net.HttpRequestHeader.Pragma">
            <summary>
            Indicates the Pragma header.
            </summary>
        </member>
        <member name="F:Sfs2X.WebSocketSharp.Net.HttpRequestHeader.Trailer">
            <summary>
            Indicates the Trailer header.
            </summary>
        </member>
        <member name="F:Sfs2X.WebSocketSharp.Net.HttpRequestHeader.TransferEncoding">
            <summary>
            Indicates the Transfer-Encoding header.
            </summary>
        </member>
        <member name="F:Sfs2X.WebSocketSharp.Net.HttpRequestHeader.Upgrade">
            <summary>
            Indicates the Upgrade header.
            </summary>
        </member>
        <member name="F:Sfs2X.WebSocketSharp.Net.HttpRequestHeader.Via">
            <summary>
            Indicates the Via header.
            </summary>
        </member>
        <member name="F:Sfs2X.WebSocketSharp.Net.HttpRequestHeader.Warning">
            <summary>
            Indicates the Warning header.
            </summary>
        </member>
        <member name="F:Sfs2X.WebSocketSharp.Net.HttpRequestHeader.Allow">
            <summary>
            Indicates the Allow header.
            </summary>
        </member>
        <member name="F:Sfs2X.WebSocketSharp.Net.HttpRequestHeader.ContentLength">
            <summary>
            Indicates the Content-Length header.
            </summary>
        </member>
        <member name="F:Sfs2X.WebSocketSharp.Net.HttpRequestHeader.ContentType">
            <summary>
            Indicates the Content-Type header.
            </summary>
        </member>
        <member name="F:Sfs2X.WebSocketSharp.Net.HttpRequestHeader.ContentEncoding">
            <summary>
            Indicates the Content-Encoding header.
            </summary>
        </member>
        <member name="F:Sfs2X.WebSocketSharp.Net.HttpRequestHeader.ContentLanguage">
            <summary>
            Indicates the Content-Language header.
            </summary>
        </member>
        <member name="F:Sfs2X.WebSocketSharp.Net.HttpRequestHeader.ContentLocation">
            <summary>
            Indicates the Content-Location header.
            </summary>
        </member>
        <member name="F:Sfs2X.WebSocketSharp.Net.HttpRequestHeader.ContentMd5">
            <summary>
            Indicates the Content-MD5 header.
            </summary>
        </member>
        <member name="F:Sfs2X.WebSocketSharp.Net.HttpRequestHeader.ContentRange">
            <summary>
            Indicates the Content-Range header.
            </summary>
        </member>
        <member name="F:Sfs2X.WebSocketSharp.Net.HttpRequestHeader.Expires">
            <summary>
            Indicates the Expires header.
            </summary>
        </member>
        <member name="F:Sfs2X.WebSocketSharp.Net.HttpRequestHeader.LastModified">
            <summary>
            Indicates the Last-Modified header.
            </summary>
        </member>
        <member name="F:Sfs2X.WebSocketSharp.Net.HttpRequestHeader.Accept">
            <summary>
            Indicates the Accept header.
            </summary>
        </member>
        <member name="F:Sfs2X.WebSocketSharp.Net.HttpRequestHeader.AcceptCharset">
            <summary>
            Indicates the Accept-Charset header.
            </summary>
        </member>
        <member name="F:Sfs2X.WebSocketSharp.Net.HttpRequestHeader.AcceptEncoding">
            <summary>
            Indicates the Accept-Encoding header.
            </summary>
        </member>
        <member name="F:Sfs2X.WebSocketSharp.Net.HttpRequestHeader.AcceptLanguage">
            <summary>
            Indicates the Accept-Language header.
            </summary>
        </member>
        <member name="F:Sfs2X.WebSocketSharp.Net.HttpRequestHeader.Authorization">
            <summary>
            Indicates the Authorization header.
            </summary>
        </member>
        <member name="F:Sfs2X.WebSocketSharp.Net.HttpRequestHeader.Cookie">
            <summary>
            Indicates the Cookie header.
            </summary>
        </member>
        <member name="F:Sfs2X.WebSocketSharp.Net.HttpRequestHeader.Expect">
            <summary>
            Indicates the Expect header.
            </summary>
        </member>
        <member name="F:Sfs2X.WebSocketSharp.Net.HttpRequestHeader.From">
            <summary>
            Indicates the From header.
            </summary>
        </member>
        <member name="F:Sfs2X.WebSocketSharp.Net.HttpRequestHeader.Host">
            <summary>
            Indicates the Host header.
            </summary>
        </member>
        <member name="F:Sfs2X.WebSocketSharp.Net.HttpRequestHeader.IfMatch">
            <summary>
            Indicates the If-Match header.
            </summary>
        </member>
        <member name="F:Sfs2X.WebSocketSharp.Net.HttpRequestHeader.IfModifiedSince">
            <summary>
            Indicates the If-Modified-Since header.
            </summary>
        </member>
        <member name="F:Sfs2X.WebSocketSharp.Net.HttpRequestHeader.IfNoneMatch">
            <summary>
            Indicates the If-None-Match header.
            </summary>
        </member>
        <member name="F:Sfs2X.WebSocketSharp.Net.HttpRequestHeader.IfRange">
            <summary>
            Indicates the If-Range header.
            </summary>
        </member>
        <member name="F:Sfs2X.WebSocketSharp.Net.HttpRequestHeader.IfUnmodifiedSince">
            <summary>
            Indicates the If-Unmodified-Since header.
            </summary>
        </member>
        <member name="F:Sfs2X.WebSocketSharp.Net.HttpRequestHeader.MaxForwards">
            <summary>
            Indicates the Max-Forwards header.
            </summary>
        </member>
        <member name="F:Sfs2X.WebSocketSharp.Net.HttpRequestHeader.ProxyAuthorization">
            <summary>
            Indicates the Proxy-Authorization header.
            </summary>
        </member>
        <member name="F:Sfs2X.WebSocketSharp.Net.HttpRequestHeader.Referer">
            <summary>
            Indicates the Referer header.
            </summary>
        </member>
        <member name="F:Sfs2X.WebSocketSharp.Net.HttpRequestHeader.Range">
            <summary>
            Indicates the Range header.
            </summary>
        </member>
        <member name="F:Sfs2X.WebSocketSharp.Net.HttpRequestHeader.Te">
            <summary>
            Indicates the TE header.
            </summary>
        </member>
        <member name="F:Sfs2X.WebSocketSharp.Net.HttpRequestHeader.Translate">
            <summary>
            Indicates the Translate header.
            </summary>
        </member>
        <member name="F:Sfs2X.WebSocketSharp.Net.HttpRequestHeader.UserAgent">
            <summary>
            Indicates the User-Agent header.
            </summary>
        </member>
        <member name="F:Sfs2X.WebSocketSharp.Net.HttpRequestHeader.SecWebSocketKey">
            <summary>
            Indicates the Sec-WebSocket-Key header.
            </summary>
        </member>
        <member name="F:Sfs2X.WebSocketSharp.Net.HttpRequestHeader.SecWebSocketExtensions">
            <summary>
            Indicates the Sec-WebSocket-Extensions header.
            </summary>
        </member>
        <member name="F:Sfs2X.WebSocketSharp.Net.HttpRequestHeader.SecWebSocketProtocol">
            <summary>
            Indicates the Sec-WebSocket-Protocol header.
            </summary>
        </member>
        <member name="F:Sfs2X.WebSocketSharp.Net.HttpRequestHeader.SecWebSocketVersion">
            <summary>
            Indicates the Sec-WebSocket-Version header.
            </summary>
        </member>
        <member name="T:Sfs2X.WebSocketSharp.Net.HttpResponseHeader">
            <summary>
            Indicates the HTTP header that can be specified in a server response.
            </summary>
            <remarks>
            The headers of this enumeration are defined in
            <see href="http://tools.ietf.org/html/rfc2616#section-14">RFC 2616</see> or
            <see href="http://tools.ietf.org/html/rfc6455#section-11.3">RFC 6455</see>.
            </remarks>
        </member>
        <member name="F:Sfs2X.WebSocketSharp.Net.HttpResponseHeader.CacheControl">
            <summary>
            Indicates the Cache-Control header.
            </summary>
        </member>
        <member name="F:Sfs2X.WebSocketSharp.Net.HttpResponseHeader.Connection">
            <summary>
            Indicates the Connection header.
            </summary>
        </member>
        <member name="F:Sfs2X.WebSocketSharp.Net.HttpResponseHeader.Date">
            <summary>
            Indicates the Date header.
            </summary>
        </member>
        <member name="F:Sfs2X.WebSocketSharp.Net.HttpResponseHeader.KeepAlive">
            <summary>
            Indicates the Keep-Alive header.
            </summary>
        </member>
        <member name="F:Sfs2X.WebSocketSharp.Net.HttpResponseHeader.Pragma">
            <summary>
            Indicates the Pragma header.
            </summary>
        </member>
        <member name="F:Sfs2X.WebSocketSharp.Net.HttpResponseHeader.Trailer">
            <summary>
            Indicates the Trailer header.
            </summary>
        </member>
        <member name="F:Sfs2X.WebSocketSharp.Net.HttpResponseHeader.TransferEncoding">
            <summary>
            Indicates the Transfer-Encoding header.
            </summary>
        </member>
        <member name="F:Sfs2X.WebSocketSharp.Net.HttpResponseHeader.Upgrade">
            <summary>
            Indicates the Upgrade header.
            </summary>
        </member>
        <member name="F:Sfs2X.WebSocketSharp.Net.HttpResponseHeader.Via">
            <summary>
            Indicates the Via header.
            </summary>
        </member>
        <member name="F:Sfs2X.WebSocketSharp.Net.HttpResponseHeader.Warning">
            <summary>
            Indicates the Warning header.
            </summary>
        </member>
        <member name="F:Sfs2X.WebSocketSharp.Net.HttpResponseHeader.Allow">
            <summary>
            Indicates the Allow header.
            </summary>
        </member>
        <member name="F:Sfs2X.WebSocketSharp.Net.HttpResponseHeader.ContentLength">
            <summary>
            Indicates the Content-Length header.
            </summary>
        </member>
        <member name="F:Sfs2X.WebSocketSharp.Net.HttpResponseHeader.ContentType">
            <summary>
            Indicates the Content-Type header.
            </summary>
        </member>
        <member name="F:Sfs2X.WebSocketSharp.Net.HttpResponseHeader.ContentEncoding">
            <summary>
            Indicates the Content-Encoding header.
            </summary>
        </member>
        <member name="F:Sfs2X.WebSocketSharp.Net.HttpResponseHeader.ContentLanguage">
            <summary>
            Indicates the Content-Language header.
            </summary>
        </member>
        <member name="F:Sfs2X.WebSocketSharp.Net.HttpResponseHeader.ContentLocation">
            <summary>
            Indicates the Content-Location header.
            </summary>
        </member>
        <member name="F:Sfs2X.WebSocketSharp.Net.HttpResponseHeader.ContentMd5">
            <summary>
            Indicates the Content-MD5 header.
            </summary>
        </member>
        <member name="F:Sfs2X.WebSocketSharp.Net.HttpResponseHeader.ContentRange">
            <summary>
            Indicates the Content-Range header.
            </summary>
        </member>
        <member name="F:Sfs2X.WebSocketSharp.Net.HttpResponseHeader.Expires">
            <summary>
            Indicates the Expires header.
            </summary>
        </member>
        <member name="F:Sfs2X.WebSocketSharp.Net.HttpResponseHeader.LastModified">
            <summary>
            Indicates the Last-Modified header.
            </summary>
        </member>
        <member name="F:Sfs2X.WebSocketSharp.Net.HttpResponseHeader.AcceptRanges">
            <summary>
            Indicates the Accept-Ranges header.
            </summary>
        </member>
        <member name="F:Sfs2X.WebSocketSharp.Net.HttpResponseHeader.Age">
            <summary>
            Indicates the Age header.
            </summary>
        </member>
        <member name="F:Sfs2X.WebSocketSharp.Net.HttpResponseHeader.ETag">
            <summary>
            Indicates the ETag header.
            </summary>
        </member>
        <member name="F:Sfs2X.WebSocketSharp.Net.HttpResponseHeader.Location">
            <summary>
            Indicates the Location header.
            </summary>
        </member>
        <member name="F:Sfs2X.WebSocketSharp.Net.HttpResponseHeader.ProxyAuthenticate">
            <summary>
            Indicates the Proxy-Authenticate header.
            </summary>
        </member>
        <member name="F:Sfs2X.WebSocketSharp.Net.HttpResponseHeader.RetryAfter">
            <summary>
            Indicates the Retry-After header.
            </summary>
        </member>
        <member name="F:Sfs2X.WebSocketSharp.Net.HttpResponseHeader.Server">
            <summary>
            Indicates the Server header.
            </summary>
        </member>
        <member name="F:Sfs2X.WebSocketSharp.Net.HttpResponseHeader.SetCookie">
            <summary>
            Indicates the Set-Cookie header.
            </summary>
        </member>
        <member name="F:Sfs2X.WebSocketSharp.Net.HttpResponseHeader.Vary">
            <summary>
            Indicates the Vary header.
            </summary>
        </member>
        <member name="F:Sfs2X.WebSocketSharp.Net.HttpResponseHeader.WwwAuthenticate">
            <summary>
            Indicates the WWW-Authenticate header.
            </summary>
        </member>
        <member name="F:Sfs2X.WebSocketSharp.Net.HttpResponseHeader.SecWebSocketExtensions">
            <summary>
            Indicates the Sec-WebSocket-Extensions header.
            </summary>
        </member>
        <member name="F:Sfs2X.WebSocketSharp.Net.HttpResponseHeader.SecWebSocketAccept">
            <summary>
            Indicates the Sec-WebSocket-Accept header.
            </summary>
        </member>
        <member name="F:Sfs2X.WebSocketSharp.Net.HttpResponseHeader.SecWebSocketProtocol">
            <summary>
            Indicates the Sec-WebSocket-Protocol header.
            </summary>
        </member>
        <member name="F:Sfs2X.WebSocketSharp.Net.HttpResponseHeader.SecWebSocketVersion">
            <summary>
            Indicates the Sec-WebSocket-Version header.
            </summary>
        </member>
        <member name="T:Sfs2X.WebSocketSharp.Net.HttpStatusCode">
            <summary>
            Indicates the HTTP status code that can be specified in a server response.
            </summary>
            <remarks>
            The values of this enumeration are defined in
            <see href="http://tools.ietf.org/html/rfc2616#section-10">RFC 2616</see>.
            </remarks>
        </member>
        <member name="F:Sfs2X.WebSocketSharp.Net.HttpStatusCode.Continue">
            <summary>
            Equivalent to status code 100. Indicates that the client should continue
            with its request.
            </summary>
        </member>
        <member name="F:Sfs2X.WebSocketSharp.Net.HttpStatusCode.SwitchingProtocols">
            <summary>
            Equivalent to status code 101. Indicates that the server is switching
            the HTTP version or protocol on the connection.
            </summary>
        </member>
        <member name="F:Sfs2X.WebSocketSharp.Net.HttpStatusCode.OK">
            <summary>
            Equivalent to status code 200. Indicates that the client's request has
            succeeded.
            </summary>
        </member>
        <member name="F:Sfs2X.WebSocketSharp.Net.HttpStatusCode.Created">
            <summary>
            Equivalent to status code 201. Indicates that the client's request has
            been fulfilled and resulted in a new resource being created.
            </summary>
        </member>
        <member name="F:Sfs2X.WebSocketSharp.Net.HttpStatusCode.Accepted">
            <summary>
            Equivalent to status code 202. Indicates that the client's request has
            been accepted for processing, but the processing has not been completed.
            </summary>
        </member>
        <member name="F:Sfs2X.WebSocketSharp.Net.HttpStatusCode.NonAuthoritativeInformation">
            <summary>
            Equivalent to status code 203. Indicates that the returned metainformation
            is from a local or a third-party copy instead of the origin server.
            </summary>
        </member>
        <member name="F:Sfs2X.WebSocketSharp.Net.HttpStatusCode.NoContent">
            <summary>
            Equivalent to status code 204. Indicates that the server has fulfilled
            the client's request but does not need to return an entity-body.
            </summary>
        </member>
        <member name="F:Sfs2X.WebSocketSharp.Net.HttpStatusCode.ResetContent">
            <summary>
            Equivalent to status code 205. Indicates that the server has fulfilled
            the client's request, and the user agent should reset the document view
            which caused the request to be sent.
            </summary>
        </member>
        <member name="F:Sfs2X.WebSocketSharp.Net.HttpStatusCode.PartialContent">
            <summary>
            Equivalent to status code 206. Indicates that the server has fulfilled
            the partial GET request for the resource.
            </summary>
        </member>
        <member name="F:Sfs2X.WebSocketSharp.Net.HttpStatusCode.MultipleChoices">
            <summary>
              <para>
              Equivalent to status code 300. Indicates that the requested resource
              corresponds to any of multiple representations.
              </para>
              <para>
              MultipleChoices is a synonym for Ambiguous.
              </para>
            </summary>
        </member>
        <member name="F:Sfs2X.WebSocketSharp.Net.HttpStatusCode.Ambiguous">
            <summary>
              <para>
              Equivalent to status code 300. Indicates that the requested resource
              corresponds to any of multiple representations.
              </para>
              <para>
              Ambiguous is a synonym for MultipleChoices.
              </para>
            </summary>
        </member>
        <member name="F:Sfs2X.WebSocketSharp.Net.HttpStatusCode.MovedPermanently">
            <summary>
              <para>
              Equivalent to status code 301. Indicates that the requested resource
              has been assigned a new permanent URI and any future references to
              this resource should use one of the returned URIs.
              </para>
              <para>
              MovedPermanently is a synonym for Moved.
              </para>
            </summary>
        </member>
        <member name="F:Sfs2X.WebSocketSharp.Net.HttpStatusCode.Moved">
            <summary>
              <para>
              Equivalent to status code 301. Indicates that the requested resource
              has been assigned a new permanent URI and any future references to
              this resource should use one of the returned URIs.
              </para>
              <para>
              Moved is a synonym for MovedPermanently.
              </para>
            </summary>
        </member>
        <member name="F:Sfs2X.WebSocketSharp.Net.HttpStatusCode.Found">
            <summary>
              <para>
              Equivalent to status code 302. Indicates that the requested resource
              is located temporarily under a different URI.
              </para>
              <para>
              Found is a synonym for Redirect.
              </para>
            </summary>
        </member>
        <member name="F:Sfs2X.WebSocketSharp.Net.HttpStatusCode.Redirect">
            <summary>
              <para>
              Equivalent to status code 302. Indicates that the requested resource
              is located temporarily under a different URI.
              </para>
              <para>
              Redirect is a synonym for Found.
              </para>
            </summary>
        </member>
        <member name="F:Sfs2X.WebSocketSharp.Net.HttpStatusCode.SeeOther">
            <summary>
              <para>
              Equivalent to status code 303. Indicates that the response to
              the request can be found under a different URI and should be
              retrieved using a GET method on that resource.
              </para>
              <para>
              SeeOther is a synonym for RedirectMethod.
              </para>
            </summary>
        </member>
        <member name="F:Sfs2X.WebSocketSharp.Net.HttpStatusCode.RedirectMethod">
            <summary>
              <para>
              Equivalent to status code 303. Indicates that the response to
              the request can be found under a different URI and should be
              retrieved using a GET method on that resource.
              </para>
              <para>
              RedirectMethod is a synonym for SeeOther.
              </para>
            </summary>
        </member>
        <member name="F:Sfs2X.WebSocketSharp.Net.HttpStatusCode.NotModified">
            <summary>
            Equivalent to status code 304. Indicates that the client has performed
            a conditional GET request and access is allowed, but the document has
            not been modified.
            </summary>
        </member>
        <member name="F:Sfs2X.WebSocketSharp.Net.HttpStatusCode.UseProxy">
            <summary>
            Equivalent to status code 305. Indicates that the requested resource
            must be accessed through the proxy given by the Location field.
            </summary>
        </member>
        <member name="F:Sfs2X.WebSocketSharp.Net.HttpStatusCode.Unused">
            <summary>
            Equivalent to status code 306. This status code was used in a previous
            version of the specification, is no longer used, and is reserved for
            future use.
            </summary>
        </member>
        <member name="F:Sfs2X.WebSocketSharp.Net.HttpStatusCode.TemporaryRedirect">
            <summary>
              <para>
              Equivalent to status code 307. Indicates that the requested resource
              is located temporarily under a different URI.
              </para>
              <para>
              TemporaryRedirect is a synonym for RedirectKeepVerb.
              </para>
            </summary>
        </member>
        <member name="F:Sfs2X.WebSocketSharp.Net.HttpStatusCode.RedirectKeepVerb">
            <summary>
              <para>
              Equivalent to status code 307. Indicates that the requested resource
              is located temporarily under a different URI.
              </para>
              <para>
              RedirectKeepVerb is a synonym for TemporaryRedirect.
              </para>
            </summary>
        </member>
        <member name="F:Sfs2X.WebSocketSharp.Net.HttpStatusCode.BadRequest">
            <summary>
            Equivalent to status code 400. Indicates that the client's request could
            not be understood by the server due to malformed syntax.
            </summary>
        </member>
        <member name="F:Sfs2X.WebSocketSharp.Net.HttpStatusCode.Unauthorized">
            <summary>
            Equivalent to status code 401. Indicates that the client's request
            requires user authentication.
            </summary>
        </member>
        <member name="F:Sfs2X.WebSocketSharp.Net.HttpStatusCode.PaymentRequired">
            <summary>
            Equivalent to status code 402. This status code is reserved for future
            use.
            </summary>
        </member>
        <member name="F:Sfs2X.WebSocketSharp.Net.HttpStatusCode.Forbidden">
            <summary>
            Equivalent to status code 403. Indicates that the server understood
            the client's request but is refusing to fulfill it.
            </summary>
        </member>
        <member name="F:Sfs2X.WebSocketSharp.Net.HttpStatusCode.NotFound">
            <summary>
            Equivalent to status code 404. Indicates that the server has not found
            anything matching the request URI.
            </summary>
        </member>
        <member name="F:Sfs2X.WebSocketSharp.Net.HttpStatusCode.MethodNotAllowed">
            <summary>
            Equivalent to status code 405. Indicates that the method specified
            in the request line is not allowed for the resource identified by
            the request URI.
            </summary>
        </member>
        <member name="F:Sfs2X.WebSocketSharp.Net.HttpStatusCode.NotAcceptable">
            <summary>
            Equivalent to status code 406. Indicates that the server does not
            have the appropriate resource to respond to the Accept headers in
            the client's request.
            </summary>
        </member>
        <member name="F:Sfs2X.WebSocketSharp.Net.HttpStatusCode.ProxyAuthenticationRequired">
            <summary>
            Equivalent to status code 407. Indicates that the client must first
            authenticate itself with the proxy.
            </summary>
        </member>
        <member name="F:Sfs2X.WebSocketSharp.Net.HttpStatusCode.RequestTimeout">
            <summary>
            Equivalent to status code 408. Indicates that the client did not produce
            a request within the time that the server was prepared to wait.
            </summary>
        </member>
        <member name="F:Sfs2X.WebSocketSharp.Net.HttpStatusCode.Conflict">
            <summary>
            Equivalent to status code 409. Indicates that the client's request could
            not be completed due to a conflict on the server.
            </summary>
        </member>
        <member name="F:Sfs2X.WebSocketSharp.Net.HttpStatusCode.Gone">
            <summary>
            Equivalent to status code 410. Indicates that the requested resource is
            no longer available at the server and no forwarding address is known.
            </summary>
        </member>
        <member name="F:Sfs2X.WebSocketSharp.Net.HttpStatusCode.LengthRequired">
            <summary>
            Equivalent to status code 411. Indicates that the server refuses to
            accept the client's request without a defined Content-Length.
            </summary>
        </member>
        <member name="F:Sfs2X.WebSocketSharp.Net.HttpStatusCode.PreconditionFailed">
            <summary>
            Equivalent to status code 412. Indicates that the precondition given in
            one or more of the request headers evaluated to false when it was tested
            on the server.
            </summary>
        </member>
        <member name="F:Sfs2X.WebSocketSharp.Net.HttpStatusCode.RequestEntityTooLarge">
            <summary>
            Equivalent to status code 413. Indicates that the entity of the client's
            request is larger than the server is willing or able to process.
            </summary>
        </member>
        <member name="F:Sfs2X.WebSocketSharp.Net.HttpStatusCode.RequestUriTooLong">
            <summary>
            Equivalent to status code 414. Indicates that the request URI is longer
            than the server is willing to interpret.
            </summary>
        </member>
        <member name="F:Sfs2X.WebSocketSharp.Net.HttpStatusCode.UnsupportedMediaType">
            <summary>
            Equivalent to status code 415. Indicates that the entity of the client's
            request is in a format not supported by the requested resource for the
            requested method.
            </summary>
        </member>
        <member name="F:Sfs2X.WebSocketSharp.Net.HttpStatusCode.RequestedRangeNotSatisfiable">
            <summary>
            Equivalent to status code 416. Indicates that none of the range
            specifier values in a Range request header overlap the current
            extent of the selected resource.
            </summary>
        </member>
        <member name="F:Sfs2X.WebSocketSharp.Net.HttpStatusCode.ExpectationFailed">
            <summary>
            Equivalent to status code 417. Indicates that the expectation given in
            an Expect request header could not be met by the server.
            </summary>
        </member>
        <member name="F:Sfs2X.WebSocketSharp.Net.HttpStatusCode.InternalServerError">
            <summary>
            Equivalent to status code 500. Indicates that the server encountered
            an unexpected condition which prevented it from fulfilling the client's
            request.
            </summary>
        </member>
        <member name="F:Sfs2X.WebSocketSharp.Net.HttpStatusCode.NotImplemented">
            <summary>
            Equivalent to status code 501. Indicates that the server does not
            support the functionality required to fulfill the client's request.
            </summary>
        </member>
        <member name="F:Sfs2X.WebSocketSharp.Net.HttpStatusCode.BadGateway">
            <summary>
            Equivalent to status code 502. Indicates that a gateway or proxy server
            received an invalid response from the upstream server.
            </summary>
        </member>
        <member name="F:Sfs2X.WebSocketSharp.Net.HttpStatusCode.ServiceUnavailable">
            <summary>
            Equivalent to status code 503. Indicates that the server is currently
            unable to handle the client's request due to a temporary overloading
            or maintenance of the server.
            </summary>
        </member>
        <member name="F:Sfs2X.WebSocketSharp.Net.HttpStatusCode.GatewayTimeout">
            <summary>
            Equivalent to status code 504. Indicates that a gateway or proxy server
            did not receive a timely response from the upstream server or some other
            auxiliary server.
            </summary>
        </member>
        <member name="F:Sfs2X.WebSocketSharp.Net.HttpStatusCode.HttpVersionNotSupported">
            <summary>
            Equivalent to status code 505. Indicates that the server does not
            support the HTTP version used in the client's request.
            </summary>
        </member>
        <member name="M:Sfs2X.WebSocketSharp.Net.HttpUtility.htmlEncode(System.String,System.Boolean)">
            <summary>
            Converts the specified string to an HTML-encoded string.
            </summary>
            <remarks>
              <para>
              This method starts encoding with a NCR from the character code 160
              but does not stop at the character code 255.
              </para>
              <para>
              One reason is the unicode characters &#65308; and &#65310; that
              look like &lt; and &gt;.
              </para>
            </remarks>
            <returns>
            A <see cref="T:System.String"/> that represents an encoded string.
            </returns>
            <param name="s">
            A <see cref="T:System.String"/> to encode.
            </param>
            <param name="minimal">
            A <see cref="T:System.Boolean"/>: <c>true</c> if encodes without a NCR;
            otherwise, <c>false</c>.
            </param>
        </member>
        <member name="M:Sfs2X.WebSocketSharp.Net.HttpUtility.initEntities">
            <summary>
            Initializes the _entities field.
            </summary>
            <remarks>
            This method builds a dictionary of HTML character entity references.
            This dictionary comes from the HTML 4.01 W3C recommendation.
            </remarks>
        </member>
        <member name="T:Sfs2X.WebSocketSharp.Net.HttpVersion">
            <summary>
            Provides the HTTP version numbers.
            </summary>
        </member>
        <member name="F:Sfs2X.WebSocketSharp.Net.HttpVersion.Version10">
            <summary>
            Provides a <see cref="T:System.Version"/> instance for the HTTP/1.0.
            </summary>
        </member>
        <member name="F:Sfs2X.WebSocketSharp.Net.HttpVersion.Version11">
            <summary>
            Provides a <see cref="T:System.Version"/> instance for the HTTP/1.1.
            </summary>
        </member>
        <member name="M:Sfs2X.WebSocketSharp.Net.HttpVersion.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Sfs2X.WebSocketSharp.Net.HttpVersion"/> class.
            </summary>
        </member>
        <member name="T:Sfs2X.WebSocketSharp.Net.NetworkCredential">
            <summary>
            Provides the credentials for the password-based authentication.
            </summary>
        </member>
        <member name="M:Sfs2X.WebSocketSharp.Net.NetworkCredential.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Sfs2X.WebSocketSharp.Net.NetworkCredential"/> class with
            the specified <paramref name="username"/> and <paramref name="password"/>.
            </summary>
            <param name="username">
            A <see cref="T:System.String"/> that represents the username associated with
            the credentials.
            </param>
            <param name="password">
            A <see cref="T:System.String"/> that represents the password for the username
            associated with the credentials.
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="username"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="username"/> is empty.
            </exception>
        </member>
        <member name="M:Sfs2X.WebSocketSharp.Net.NetworkCredential.#ctor(System.String,System.String,System.String,System.String[])">
            <summary>
            Initializes a new instance of the <see cref="T:Sfs2X.WebSocketSharp.Net.NetworkCredential"/> class with
            the specified <paramref name="username"/>, <paramref name="password"/>,
            <paramref name="domain"/> and <paramref name="roles"/>.
            </summary>
            <param name="username">
            A <see cref="T:System.String"/> that represents the username associated with
            the credentials.
            </param>
            <param name="password">
            A <see cref="T:System.String"/> that represents the password for the username
            associated with the credentials.
            </param>
            <param name="domain">
            A <see cref="T:System.String"/> that represents the domain associated with
            the credentials.
            </param>
            <param name="roles">
            An array of <see cref="T:System.String"/> that represents the roles
            associated with the credentials if any.
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="username"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="username"/> is empty.
            </exception>
        </member>
        <member name="P:Sfs2X.WebSocketSharp.Net.NetworkCredential.Domain">
            <summary>
            Gets the domain associated with the credentials.
            </summary>
            <remarks>
            This property returns an empty string if the domain was
            initialized with <see langword="null"/>.
            </remarks>
            <value>
            A <see cref="T:System.String"/> that represents the domain name
            to which the username belongs.
            </value>
        </member>
        <member name="P:Sfs2X.WebSocketSharp.Net.NetworkCredential.Password">
            <summary>
            Gets the password for the username associated with the credentials.
            </summary>
            <remarks>
            This property returns an empty string if the password was
            initialized with <see langword="null"/>.
            </remarks>
            <value>
            A <see cref="T:System.String"/> that represents the password.
            </value>
        </member>
        <member name="P:Sfs2X.WebSocketSharp.Net.NetworkCredential.Roles">
            <summary>
            Gets the roles associated with the credentials.
            </summary>
            <remarks>
            This property returns an empty array if the roles were
            initialized with <see langword="null"/>.
            </remarks>
            <value>
            An array of <see cref="T:System.String"/> that represents the role names
            to which the username belongs.
            </value>
        </member>
        <member name="P:Sfs2X.WebSocketSharp.Net.NetworkCredential.Username">
            <summary>
            Gets the username associated with the credentials.
            </summary>
            <value>
            A <see cref="T:System.String"/> that represents the username.
            </value>
        </member>
        <member name="T:Sfs2X.WebSocketSharp.Net.ServerSslConfiguration">
            <summary>
            Stores the parameters for the <see cref="T:System.Net.Security.SslStream"/> used by servers.
            </summary>
        </member>
        <member name="M:Sfs2X.WebSocketSharp.Net.ServerSslConfiguration.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Sfs2X.WebSocketSharp.Net.ServerSslConfiguration"/>
            class.
            </summary>
        </member>
        <member name="M:Sfs2X.WebSocketSharp.Net.ServerSslConfiguration.#ctor(Sfs2X.WebSocketSharp.Net.ServerSslConfiguration)">
            <summary>
            Initializes a new instance of the <see cref="T:Sfs2X.WebSocketSharp.Net.ServerSslConfiguration"/>
            class that stores the parameters copied from the specified configuration.
            </summary>
            <param name="configuration">
            A <see cref="T:Sfs2X.WebSocketSharp.Net.ServerSslConfiguration"/> from which to copy.
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="configuration"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="P:Sfs2X.WebSocketSharp.Net.ServerSslConfiguration.CheckCertificateRevocation">
            <summary>
            Gets or sets a value indicating whether the certificate revocation
            list is checked during authentication.
            </summary>
            <value>
              <para>
              <c>true</c> if the certificate revocation list is checked during
              authentication; otherwise, <c>false</c>.
              </para>
              <para>
              The default value is <c>false</c>.
              </para>
            </value>
        </member>
        <member name="P:Sfs2X.WebSocketSharp.Net.ServerSslConfiguration.ClientCertificateRequired">
            <summary>
            Gets or sets a value indicating whether the client is asked for
            a certificate for authentication.
            </summary>
            <value>
              <para>
              <c>true</c> if the client is asked for a certificate for
              authentication; otherwise, <c>false</c>.
              </para>
              <para>
              The default value is <c>false</c>.
              </para>
            </value>
        </member>
        <member name="P:Sfs2X.WebSocketSharp.Net.ServerSslConfiguration.ClientCertificateValidationCallback">
            <summary>
            Gets or sets the callback used to validate the certificate supplied by
            the client.
            </summary>
            <remarks>
            The certificate is valid if the callback returns <c>true</c>.
            </remarks>
            <value>
              <para>
              A <see cref="T:System.Net.Security.RemoteCertificateValidationCallback"/> delegate that
              invokes the method called for validating the certificate.
              </para>
              <para>
              The default value is a delegate that invokes a method that only
              returns <c>true</c>.
              </para>
            </value>
        </member>
        <member name="P:Sfs2X.WebSocketSharp.Net.ServerSslConfiguration.EnabledSslProtocols">
            <summary>
            Gets or sets the protocols used for authentication.
            </summary>
            <value>
              <para>
              Any of the <see cref="T:System.Security.Authentication.SslProtocols"/> enum values.
              </para>
              <para>
              It represents the protocols used for authentication.
              </para>
              <para>
              The default value is <see cref="F:System.Security.Authentication.SslProtocols.None"/>.
              </para>
            </value>
        </member>
        <member name="P:Sfs2X.WebSocketSharp.Net.ServerSslConfiguration.ServerCertificate">
            <summary>
            Gets or sets the certificate used to authenticate the server.
            </summary>
            <value>
              <para>
              A <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2"/> or <see langword="null"/>.
              </para>
              <para>
              The certificate represents an X.509 certificate.
              </para>
              <para>
              The default value is <see langword="null"/>.
              </para>
            </value>
        </member>
        <member name="T:Sfs2X.WebSocketSharp.Net.WebHeaderCollection">
            <summary>
            Provides a collection of the HTTP headers associated with a request or
            response.
            </summary>
        </member>
        <member name="M:Sfs2X.WebSocketSharp.Net.WebHeaderCollection.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Sfs2X.WebSocketSharp.Net.WebHeaderCollection"/> class
            from the specified instances of the <see cref="T:System.Runtime.Serialization.SerializationInfo"/> and
            <see cref="T:System.Runtime.Serialization.StreamingContext"/> classes.
            </summary>
            <param name="serializationInfo">
            A <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that contains the serialized
            object data.
            </param>
            <param name="streamingContext">
            A <see cref="T:System.Runtime.Serialization.StreamingContext"/> that specifies the source for
            the deserialization.
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="serializationInfo"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
            An element with the specified name is not found in
            <paramref name="serializationInfo"/>.
            </exception>
        </member>
        <member name="M:Sfs2X.WebSocketSharp.Net.WebHeaderCollection.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Sfs2X.WebSocketSharp.Net.WebHeaderCollection"/>
            class.
            </summary>
        </member>
        <member name="P:Sfs2X.WebSocketSharp.Net.WebHeaderCollection.AllKeys">
            <summary>
            Gets all header names in the collection.
            </summary>
            <value>
            An array of <see cref="T:System.String"/> that contains all header names in
            the collection.
            </value>
        </member>
        <member name="P:Sfs2X.WebSocketSharp.Net.WebHeaderCollection.Count">
            <summary>
            Gets the number of headers in the collection.
            </summary>
            <value>
            An <see cref="T:System.Int32"/> that represents the number of headers in
            the collection.
            </value>
        </member>
        <member name="P:Sfs2X.WebSocketSharp.Net.WebHeaderCollection.Item(Sfs2X.WebSocketSharp.Net.HttpRequestHeader)">
            <summary>
            Gets or sets the specified request header.
            </summary>
            <value>
            A <see cref="T:System.String"/> that represents the value of the request header.
            </value>
            <param name="header">
              <para>
              One of the <see cref="T:Sfs2X.WebSocketSharp.Net.HttpRequestHeader"/> enum values.
              </para>
              <para>
              It specifies the request header to get or set.
              </para>
            </param>
            <exception cref="T:System.ArgumentException">
              <para>
              <paramref name="header"/> is a restricted header.
              </para>
              <para>
              -or-
              </para>
              <para>
              <paramref name="value"/> contains an invalid character.
              </para>
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            The length of <paramref name="value"/> is greater than 65,535
            characters.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            This instance does not allow the request header.
            </exception>
        </member>
        <member name="P:Sfs2X.WebSocketSharp.Net.WebHeaderCollection.Item(Sfs2X.WebSocketSharp.Net.HttpResponseHeader)">
            <summary>
            Gets or sets the specified response header.
            </summary>
            <value>
            A <see cref="T:System.String"/> that represents the value of the response header.
            </value>
            <param name="header">
              <para>
              One of the <see cref="T:Sfs2X.WebSocketSharp.Net.HttpResponseHeader"/> enum values.
              </para>
              <para>
              It specifies the response header to get or set.
              </para>
            </param>
            <exception cref="T:System.ArgumentException">
              <para>
              <paramref name="header"/> is a restricted header.
              </para>
              <para>
              -or-
              </para>
              <para>
              <paramref name="value"/> contains an invalid character.
              </para>
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            The length of <paramref name="value"/> is greater than 65,535
            characters.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            This instance does not allow the response header.
            </exception>
        </member>
        <member name="P:Sfs2X.WebSocketSharp.Net.WebHeaderCollection.Keys">
            <summary>
            Gets a collection of header names in the collection.
            </summary>
            <value>
            A <see cref="T:System.Collections.Specialized.NameObjectCollectionBase.KeysCollection"/> that contains
            all header names in the collection.
            </value>
        </member>
        <member name="M:Sfs2X.WebSocketSharp.Net.WebHeaderCollection.AddWithoutValidate(System.String,System.String)">
            <summary>
            Adds a header to the collection without checking if the header is on
            the restricted header list.
            </summary>
            <param name="headerName">
            A <see cref="T:System.String"/> that specifies the name of the header to add.
            </param>
            <param name="headerValue">
            A <see cref="T:System.String"/> that specifies the value of the header to add.
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="headerName"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
              <para>
              <paramref name="headerName"/> is an empty string.
              </para>
              <para>
              -or-
              </para>
              <para>
              <paramref name="headerName"/> is a string of spaces.
              </para>
              <para>
              -or-
              </para>
              <para>
              <paramref name="headerName"/> contains an invalid character.
              </para>
              <para>
              -or-
              </para>
              <para>
              <paramref name="headerValue"/> contains an invalid character.
              </para>
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            The length of <paramref name="headerValue"/> is greater than 65,535
            characters.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            This instance does not allow the header.
            </exception>
        </member>
        <member name="M:Sfs2X.WebSocketSharp.Net.WebHeaderCollection.Add(System.String)">
            <summary>
            Adds the specified header to the collection.
            </summary>
            <param name="header">
            A <see cref="T:System.String"/> that specifies the header to add,
            with the name and value separated by a colon character (':').
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="header"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
              <para>
              <paramref name="header"/> is an empty string.
              </para>
              <para>
              -or-
              </para>
              <para>
              <paramref name="header"/> does not contain a colon character.
              </para>
              <para>
              -or-
              </para>
              <para>
              The name part of <paramref name="header"/> is an empty string.
              </para>
              <para>
              -or-
              </para>
              <para>
              The name part of <paramref name="header"/> is a string of spaces.
              </para>
              <para>
              -or-
              </para>
              <para>
              The name part of <paramref name="header"/> contains an invalid
              character.
              </para>
              <para>
              -or-
              </para>
              <para>
              The value part of <paramref name="header"/> contains an invalid
              character.
              </para>
              <para>
              -or-
              </para>
              <para>
              <paramref name="header"/> is a restricted header.
              </para>
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            The length of the value part of <paramref name="header"/> is greater
            than 65,535 characters.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            This instance does not allow the header.
            </exception>
        </member>
        <member name="M:Sfs2X.WebSocketSharp.Net.WebHeaderCollection.Add(Sfs2X.WebSocketSharp.Net.HttpRequestHeader,System.String)">
            <summary>
            Adds the specified request header with the specified value to
            the collection.
            </summary>
            <param name="header">
              <para>
              One of the <see cref="T:Sfs2X.WebSocketSharp.Net.HttpRequestHeader"/> enum values.
              </para>
              <para>
              It specifies the request header to add.
              </para>
            </param>
            <param name="value">
            A <see cref="T:System.String"/> that specifies the value of the header to add.
            </param>
            <exception cref="T:System.ArgumentException">
              <para>
              <paramref name="value"/> contains an invalid character.
              </para>
              <para>
              -or-
              </para>
              <para>
              <paramref name="header"/> is a restricted header.
              </para>
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            The length of <paramref name="value"/> is greater than 65,535
            characters.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            This instance does not allow the request header.
            </exception>
        </member>
        <member name="M:Sfs2X.WebSocketSharp.Net.WebHeaderCollection.Add(Sfs2X.WebSocketSharp.Net.HttpResponseHeader,System.String)">
            <summary>
            Adds the specified response header with the specified value to
            the collection.
            </summary>
            <param name="header">
              <para>
              One of the <see cref="T:Sfs2X.WebSocketSharp.Net.HttpResponseHeader"/> enum values.
              </para>
              <para>
              It specifies the response header to add.
              </para>
            </param>
            <param name="value">
            A <see cref="T:System.String"/> that specifies the value of the header to add.
            </param>
            <exception cref="T:System.ArgumentException">
              <para>
              <paramref name="value"/> contains an invalid character.
              </para>
              <para>
              -or-
              </para>
              <para>
              <paramref name="header"/> is a restricted header.
              </para>
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            The length of <paramref name="value"/> is greater than 65,535
            characters.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            This instance does not allow the response header.
            </exception>
        </member>
        <member name="M:Sfs2X.WebSocketSharp.Net.WebHeaderCollection.Add(System.String,System.String)">
            <summary>
            Adds a header with the specified name and value to the collection.
            </summary>
            <param name="name">
            A <see cref="T:System.String"/> that specifies the name of the header to add.
            </param>
            <param name="value">
            A <see cref="T:System.String"/> that specifies the value of the header to add.
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="name"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
              <para>
              <paramref name="name"/> is an empty string.
              </para>
              <para>
              -or-
              </para>
              <para>
              <paramref name="name"/> is a string of spaces.
              </para>
              <para>
              -or-
              </para>
              <para>
              <paramref name="name"/> contains an invalid character.
              </para>
              <para>
              -or-
              </para>
              <para>
              <paramref name="value"/> contains an invalid character.
              </para>
              <para>
              -or-
              </para>
              <para>
              <paramref name="name"/> is a restricted header name.
              </para>
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            The length of <paramref name="value"/> is greater than 65,535
            characters.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            This instance does not allow the header.
            </exception>
        </member>
        <member name="M:Sfs2X.WebSocketSharp.Net.WebHeaderCollection.Clear">
            <summary>
            Removes all headers from the collection.
            </summary>
        </member>
        <member name="M:Sfs2X.WebSocketSharp.Net.WebHeaderCollection.Get(System.Int32)">
            <summary>
            Get the value of the header at the specified index in the collection.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that receives the value of the header.
            </returns>
            <param name="index">
            An <see cref="T:System.Int32"/> that specifies the zero-based index of the header
            to find.
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="index"/> is out of allowable range of indexes for
            the collection.
            </exception>
        </member>
        <member name="M:Sfs2X.WebSocketSharp.Net.WebHeaderCollection.Get(System.String)">
            <summary>
            Get the value of the header with the specified name in the collection.
            </summary>
            <returns>
              <para>
              A <see cref="T:System.String"/> that receives the value of the header.
              </para>
              <para>
              <see langword="null"/> if not found.
              </para>
            </returns>
            <param name="name">
            A <see cref="T:System.String"/> that specifies the name of the header to find.
            </param>
        </member>
        <member name="M:Sfs2X.WebSocketSharp.Net.WebHeaderCollection.GetEnumerator">
            <summary>
            Gets the enumerator used to iterate through the collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"/> instance used to iterate through
            the collection.
            </returns>
        </member>
        <member name="M:Sfs2X.WebSocketSharp.Net.WebHeaderCollection.GetKey(System.Int32)">
            <summary>
            Get the name of the header at the specified index in the collection.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that receives the name of the header.
            </returns>
            <param name="index">
            An <see cref="T:System.Int32"/> that specifies the zero-based index of the header
            to find.
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="index"/> is out of allowable range of indexes for
            the collection.
            </exception>
        </member>
        <member name="M:Sfs2X.WebSocketSharp.Net.WebHeaderCollection.GetValues(System.Int32)">
            <summary>
            Get the values of the header at the specified index in the collection.
            </summary>
            <returns>
              <para>
              An array of <see cref="T:System.String"/> that receives the values of
              the header.
              </para>
              <para>
              <see langword="null"/> if not present.
              </para>
            </returns>
            <param name="index">
            An <see cref="T:System.Int32"/> that specifies the zero-based index of the header
            to find.
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="index"/> is out of allowable range of indexes for
            the collection.
            </exception>
        </member>
        <member name="M:Sfs2X.WebSocketSharp.Net.WebHeaderCollection.GetValues(System.String)">
            <summary>
            Get the values of the header with the specified name in the collection.
            </summary>
            <returns>
              <para>
              An array of <see cref="T:System.String"/> that receives the values of
              the header.
              </para>
              <para>
              <see langword="null"/> if not present.
              </para>
            </returns>
            <param name="name">
            A <see cref="T:System.String"/> that specifies the name of the header to find.
            </param>
        </member>
        <member name="M:Sfs2X.WebSocketSharp.Net.WebHeaderCollection.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates a <see cref="T:System.Runtime.Serialization.SerializationInfo"/> instance with the data
            needed to serialize this instance.
            </summary>
            <param name="serializationInfo">
            A <see cref="T:System.Runtime.Serialization.SerializationInfo"/> to populate with the data.
            </param>
            <param name="streamingContext">
            A <see cref="T:System.Runtime.Serialization.StreamingContext"/> that specifies the destination for
            the serialization.
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="serializationInfo"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:Sfs2X.WebSocketSharp.Net.WebHeaderCollection.IsRestricted(System.String)">
            <summary>
            Determines whether the specified HTTP header can be set for the request.
            </summary>
            <returns>
            <c>true</c> if the header cannot be set; otherwise, <c>false</c>.
            </returns>
            <param name="headerName">
            A <see cref="T:System.String"/> that specifies the name of the header to test.
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="headerName"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
              <para>
              <paramref name="headerName"/> is an empty string.
              </para>
              <para>
              -or-
              </para>
              <para>
              <paramref name="headerName"/> is a string of spaces.
              </para>
              <para>
              -or-
              </para>
              <para>
              <paramref name="headerName"/> contains an invalid character.
              </para>
            </exception>
        </member>
        <member name="M:Sfs2X.WebSocketSharp.Net.WebHeaderCollection.IsRestricted(System.String,System.Boolean)">
            <summary>
            Determines whether the specified HTTP header can be set for the request
            or the response.
            </summary>
            <returns>
            <c>true</c> if the header cannot be set; otherwise, <c>false</c>.
            </returns>
            <param name="headerName">
            A <see cref="T:System.String"/> that specifies the name of the header to test.
            </param>
            <param name="response">
            A <see cref="T:System.Boolean"/>: <c>true</c> if the test is for the response;
            otherwise, <c>false</c>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="headerName"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
              <para>
              <paramref name="headerName"/> is an empty string.
              </para>
              <para>
              -or-
              </para>
              <para>
              <paramref name="headerName"/> is a string of spaces.
              </para>
              <para>
              -or-
              </para>
              <para>
              <paramref name="headerName"/> contains an invalid character.
              </para>
            </exception>
        </member>
        <member name="M:Sfs2X.WebSocketSharp.Net.WebHeaderCollection.OnDeserialization(System.Object)">
            <summary>
            Implements the <see cref="T:System.Runtime.Serialization.ISerializable"/> interface and raises
            the deserialization event when the deserialization is complete.
            </summary>
            <param name="sender">
            An <see cref="T:System.Object"/> instance that represents the source of
            the deserialization event.
            </param>
        </member>
        <member name="M:Sfs2X.WebSocketSharp.Net.WebHeaderCollection.Remove(Sfs2X.WebSocketSharp.Net.HttpRequestHeader)">
            <summary>
            Removes the specified request header from the collection.
            </summary>
            <param name="header">
              <para>
              One of the <see cref="T:Sfs2X.WebSocketSharp.Net.HttpRequestHeader"/> enum values.
              </para>
              <para>
              It specifies the request header to remove.
              </para>
            </param>
            <exception cref="T:System.ArgumentException">
            <paramref name="header"/> is a restricted header.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            This instance does not allow the request header.
            </exception>
        </member>
        <member name="M:Sfs2X.WebSocketSharp.Net.WebHeaderCollection.Remove(Sfs2X.WebSocketSharp.Net.HttpResponseHeader)">
            <summary>
            Removes the specified response header from the collection.
            </summary>
            <param name="header">
              <para>
              One of the <see cref="T:Sfs2X.WebSocketSharp.Net.HttpResponseHeader"/> enum values.
              </para>
              <para>
              It specifies the response header to remove.
              </para>
            </param>
            <exception cref="T:System.ArgumentException">
            <paramref name="header"/> is a restricted header.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            This instance does not allow the response header.
            </exception>
        </member>
        <member name="M:Sfs2X.WebSocketSharp.Net.WebHeaderCollection.Remove(System.String)">
            <summary>
            Removes the specified header from the collection.
            </summary>
            <param name="name">
            A <see cref="T:System.String"/> that specifies the name of the header to remove.
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="name"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
              <para>
              <paramref name="name"/> is an empty string.
              </para>
              <para>
              -or-
              </para>
              <para>
              <paramref name="name"/> is a string of spaces.
              </para>
              <para>
              -or-
              </para>
              <para>
              <paramref name="name"/> contains an invalid character.
              </para>
              <para>
              -or-
              </para>
              <para>
              <paramref name="name"/> is a restricted header name.
              </para>
            </exception>
            <exception cref="T:System.InvalidOperationException">
            This instance does not allow the header.
            </exception>
        </member>
        <member name="M:Sfs2X.WebSocketSharp.Net.WebHeaderCollection.Set(Sfs2X.WebSocketSharp.Net.HttpRequestHeader,System.String)">
            <summary>
            Sets the specified request header to the specified value.
            </summary>
            <param name="header">
              <para>
              One of the <see cref="T:Sfs2X.WebSocketSharp.Net.HttpRequestHeader"/> enum values.
              </para>
              <para>
              It specifies the request header to set.
              </para>
            </param>
            <param name="value">
            A <see cref="T:System.String"/> that specifies the value of the request header
            to set.
            </param>
            <exception cref="T:System.ArgumentException">
              <para>
              <paramref name="value"/> contains an invalid character.
              </para>
              <para>
              -or-
              </para>
              <para>
              <paramref name="header"/> is a restricted header.
              </para>
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            The length of <paramref name="value"/> is greater than 65,535
            characters.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            This instance does not allow the request header.
            </exception>
        </member>
        <member name="M:Sfs2X.WebSocketSharp.Net.WebHeaderCollection.Set(Sfs2X.WebSocketSharp.Net.HttpResponseHeader,System.String)">
            <summary>
            Sets the specified response header to the specified value.
            </summary>
            <param name="header">
              <para>
              One of the <see cref="T:Sfs2X.WebSocketSharp.Net.HttpResponseHeader"/> enum values.
              </para>
              <para>
              It specifies the response header to set.
              </para>
            </param>
            <param name="value">
            A <see cref="T:System.String"/> that specifies the value of the response header
            to set.
            </param>
            <exception cref="T:System.ArgumentException">
              <para>
              <paramref name="value"/> contains an invalid character.
              </para>
              <para>
              -or-
              </para>
              <para>
              <paramref name="header"/> is a restricted header.
              </para>
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            The length of <paramref name="value"/> is greater than 65,535
            characters.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            This instance does not allow the response header.
            </exception>
        </member>
        <member name="M:Sfs2X.WebSocketSharp.Net.WebHeaderCollection.Set(System.String,System.String)">
            <summary>
            Sets the specified header to the specified value.
            </summary>
            <param name="name">
            A <see cref="T:System.String"/> that specifies the name of the header to set.
            </param>
            <param name="value">
            A <see cref="T:System.String"/> that specifies the value of the header to set.
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="name"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
              <para>
              <paramref name="name"/> is an empty string.
              </para>
              <para>
              -or-
              </para>
              <para>
              <paramref name="name"/> is a string of spaces.
              </para>
              <para>
              -or-
              </para>
              <para>
              <paramref name="name"/> contains an invalid character.
              </para>
              <para>
              -or-
              </para>
              <para>
              <paramref name="value"/> contains an invalid character.
              </para>
              <para>
              -or-
              </para>
              <para>
              <paramref name="name"/> is a restricted header name.
              </para>
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            The length of <paramref name="value"/> is greater than 65,535
            characters.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            This instance does not allow the header.
            </exception>
        </member>
        <member name="M:Sfs2X.WebSocketSharp.Net.WebHeaderCollection.ToByteArray">
            <summary>
            Converts the current instance to an array of byte.
            </summary>
            <returns>
            An array of <see cref="T:System.Byte"/> converted from a string that represents
            the current instance.
            </returns>
        </member>
        <member name="M:Sfs2X.WebSocketSharp.Net.WebHeaderCollection.ToString">
            <summary>
            Returns a string that represents the current instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents all headers in the collection.
            </returns>
        </member>
        <member name="M:Sfs2X.WebSocketSharp.Net.WebHeaderCollection.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates a <see cref="T:System.Runtime.Serialization.SerializationInfo"/> instance with the data
            needed to serialize this instance.
            </summary>
            <param name="serializationInfo">
            A <see cref="T:System.Runtime.Serialization.SerializationInfo"/> to populate with the data.
            </param>
            <param name="streamingContext">
            A <see cref="T:System.Runtime.Serialization.StreamingContext"/> that specifies the destination for
            the serialization.
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="serializationInfo"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="T:Sfs2X.WebSocketSharp.Net.WebSockets.HttpListenerWebSocketContext">
            <summary>
            Provides the access to the information in a WebSocket handshake request
            to a <see cref="T:Sfs2X.WebSocketSharp.Net.HttpListener"/> instance.
            </summary>
        </member>
        <member name="P:Sfs2X.WebSocketSharp.Net.WebSockets.HttpListenerWebSocketContext.CookieCollection">
            <summary>
            Gets the HTTP cookies included in the handshake request.
            </summary>
            <value>
              <para>
              A <see cref="T:Sfs2X.WebSocketSharp.Net.CookieCollection"/> that contains
              the cookies.
              </para>
              <para>
              An empty collection if not included.
              </para>
            </value>
        </member>
        <member name="P:Sfs2X.WebSocketSharp.Net.WebSockets.HttpListenerWebSocketContext.Headers">
            <summary>
            Gets the HTTP headers included in the handshake request.
            </summary>
            <value>
            A <see cref="T:System.Collections.Specialized.NameValueCollection"/> that contains the headers.
            </value>
        </member>
        <member name="P:Sfs2X.WebSocketSharp.Net.WebSockets.HttpListenerWebSocketContext.Host">
            <summary>
            Gets the value of the Host header included in the handshake request.
            </summary>
            <value>
              <para>
              A <see cref="T:System.String"/> that represents the server host name requested
              by the client.
              </para>
              <para>
              It includes the port number if provided.
              </para>
            </value>
        </member>
        <member name="P:Sfs2X.WebSocketSharp.Net.WebSockets.HttpListenerWebSocketContext.IsAuthenticated">
            <summary>
            Gets a value indicating whether the client is authenticated.
            </summary>
            <value>
            <c>true</c> if the client is authenticated; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Sfs2X.WebSocketSharp.Net.WebSockets.HttpListenerWebSocketContext.IsLocal">
            <summary>
            Gets a value indicating whether the handshake request is sent from
            the local computer.
            </summary>
            <value>
            <c>true</c> if the handshake request is sent from the same computer
            as the server; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Sfs2X.WebSocketSharp.Net.WebSockets.HttpListenerWebSocketContext.IsSecureConnection">
            <summary>
            Gets a value indicating whether a secure connection is used to send
            the handshake request.
            </summary>
            <value>
            <c>true</c> if the connection is secure; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Sfs2X.WebSocketSharp.Net.WebSockets.HttpListenerWebSocketContext.IsWebSocketRequest">
            <summary>
            Gets a value indicating whether the request is a WebSocket handshake
            request.
            </summary>
            <value>
            <c>true</c> if the request is a WebSocket handshake request; otherwise,
            <c>false</c>.
            </value>
        </member>
        <member name="P:Sfs2X.WebSocketSharp.Net.WebSockets.HttpListenerWebSocketContext.Origin">
            <summary>
            Gets the value of the Origin header included in the handshake request.
            </summary>
            <value>
              <para>
              A <see cref="T:System.String"/> that represents the value of the Origin header.
              </para>
              <para>
              <see langword="null"/> if not included.
              </para>
            </value>
        </member>
        <member name="P:Sfs2X.WebSocketSharp.Net.WebSockets.HttpListenerWebSocketContext.QueryString">
            <summary>
            Gets the query string included in the handshake request.
            </summary>
            <value>
              <para>
              A <see cref="T:System.Collections.Specialized.NameValueCollection"/> that contains the query
              parameters.
              </para>
              <para>
              An empty collection if not included.
              </para>
            </value>
        </member>
        <member name="P:Sfs2X.WebSocketSharp.Net.WebSockets.HttpListenerWebSocketContext.RequestUri">
            <summary>
            Gets the URI requested by the client.
            </summary>
            <value>
              <para>
              A <see cref="T:System.Uri"/> that represents the URI parsed from the request.
              </para>
              <para>
              <see langword="null"/> if the URI cannot be parsed.
              </para>
            </value>
        </member>
        <member name="P:Sfs2X.WebSocketSharp.Net.WebSockets.HttpListenerWebSocketContext.SecWebSocketKey">
            <summary>
            Gets the value of the Sec-WebSocket-Key header included in
            the handshake request.
            </summary>
            <value>
              <para>
              A <see cref="T:System.String"/> that represents the value of
              the Sec-WebSocket-Key header.
              </para>
              <para>
              The value is used to prove that the server received
              a valid WebSocket handshake request.
              </para>
              <para>
              <see langword="null"/> if not included.
              </para>
            </value>
        </member>
        <member name="P:Sfs2X.WebSocketSharp.Net.WebSockets.HttpListenerWebSocketContext.SecWebSocketProtocols">
            <summary>
            Gets the names of the subprotocols from the Sec-WebSocket-Protocol
            header included in the handshake request.
            </summary>
            <value>
              <para>
              An <see cref="T:System.Collections.Generic.IEnumerable{string}"/>
              instance.
              </para>
              <para>
              It provides an enumerator which supports the iteration over
              the collection of the names of the subprotocols.
              </para>
            </value>
        </member>
        <member name="P:Sfs2X.WebSocketSharp.Net.WebSockets.HttpListenerWebSocketContext.SecWebSocketVersion">
            <summary>
            Gets the value of the Sec-WebSocket-Version header included in
            the handshake request.
            </summary>
            <value>
              <para>
              A <see cref="T:System.String"/> that represents the WebSocket protocol
              version specified by the client.
              </para>
              <para>
              <see langword="null"/> if not included.
              </para>
            </value>
        </member>
        <member name="P:Sfs2X.WebSocketSharp.Net.WebSockets.HttpListenerWebSocketContext.ServerEndPoint">
            <summary>
            Gets the endpoint to which the handshake request is sent.
            </summary>
            <value>
            A <see cref="T:System.Net.IPEndPoint"/> that represents the server
            IP address and port number.
            </value>
        </member>
        <member name="P:Sfs2X.WebSocketSharp.Net.WebSockets.HttpListenerWebSocketContext.User">
            <summary>
            Gets the client information.
            </summary>
            <value>
              <para>
              A <see cref="T:System.Security.Principal.IPrincipal"/> instance that represents identity,
              authentication, and security roles for the client.
              </para>
              <para>
              <see langword="null"/> if the client is not authenticated.
              </para>
            </value>
        </member>
        <member name="P:Sfs2X.WebSocketSharp.Net.WebSockets.HttpListenerWebSocketContext.UserEndPoint">
            <summary>
            Gets the endpoint from which the handshake request is sent.
            </summary>
            <value>
            A <see cref="T:System.Net.IPEndPoint"/> that represents the client
            IP address and port number.
            </value>
        </member>
        <member name="P:Sfs2X.WebSocketSharp.Net.WebSockets.HttpListenerWebSocketContext.WebSocket">
            <summary>
            Gets the WebSocket interface used for two-way communication between
            the client and server.
            </summary>
            <value>
            A <see cref="T:Sfs2X.WebSocketSharp.WebSocket"/> that represents the interface.
            </value>
        </member>
        <member name="M:Sfs2X.WebSocketSharp.Net.WebSockets.HttpListenerWebSocketContext.ToString">
            <summary>
            Returns a string that represents the current instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that contains the request line and headers
            included in the handshake request.
            </returns>
        </member>
        <member name="T:Sfs2X.WebSocketSharp.Net.WebSockets.TcpListenerWebSocketContext">
            <summary>
            Provides the access to the information in a WebSocket handshake request
            to a <see cref="T:System.Net.Sockets.TcpListener"/> instance.
            </summary>
        </member>
        <member name="P:Sfs2X.WebSocketSharp.Net.WebSockets.TcpListenerWebSocketContext.CookieCollection">
            <summary>
            Gets the HTTP cookies included in the handshake request.
            </summary>
            <value>
              <para>
              A <see cref="T:Sfs2X.WebSocketSharp.Net.CookieCollection"/> that contains
              the cookies.
              </para>
              <para>
              An empty collection if not included.
              </para>
            </value>
        </member>
        <member name="P:Sfs2X.WebSocketSharp.Net.WebSockets.TcpListenerWebSocketContext.Headers">
            <summary>
            Gets the HTTP headers included in the handshake request.
            </summary>
            <value>
            A <see cref="T:System.Collections.Specialized.NameValueCollection"/> that contains the headers.
            </value>
        </member>
        <member name="P:Sfs2X.WebSocketSharp.Net.WebSockets.TcpListenerWebSocketContext.Host">
            <summary>
            Gets the value of the Host header included in the handshake request.
            </summary>
            <value>
              <para>
              A <see cref="T:System.String"/> that represents the server host name requested
              by the client.
              </para>
              <para>
              It includes the port number if provided.
              </para>
            </value>
        </member>
        <member name="P:Sfs2X.WebSocketSharp.Net.WebSockets.TcpListenerWebSocketContext.IsAuthenticated">
            <summary>
            Gets a value indicating whether the client is authenticated.
            </summary>
            <value>
            <c>true</c> if the client is authenticated; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Sfs2X.WebSocketSharp.Net.WebSockets.TcpListenerWebSocketContext.IsLocal">
            <summary>
            Gets a value indicating whether the handshake request is sent from
            the local computer.
            </summary>
            <value>
            <c>true</c> if the handshake request is sent from the same computer
            as the server; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Sfs2X.WebSocketSharp.Net.WebSockets.TcpListenerWebSocketContext.IsSecureConnection">
            <summary>
            Gets a value indicating whether a secure connection is used to send
            the handshake request.
            </summary>
            <value>
            <c>true</c> if the connection is secure; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Sfs2X.WebSocketSharp.Net.WebSockets.TcpListenerWebSocketContext.IsWebSocketRequest">
            <summary>
            Gets a value indicating whether the request is a WebSocket handshake
            request.
            </summary>
            <value>
            <c>true</c> if the request is a WebSocket handshake request; otherwise,
            <c>false</c>.
            </value>
        </member>
        <member name="P:Sfs2X.WebSocketSharp.Net.WebSockets.TcpListenerWebSocketContext.Origin">
            <summary>
            Gets the value of the Origin header included in the handshake request.
            </summary>
            <value>
              <para>
              A <see cref="T:System.String"/> that represents the value of the Origin header.
              </para>
              <para>
              <see langword="null"/> if not included.
              </para>
            </value>
        </member>
        <member name="P:Sfs2X.WebSocketSharp.Net.WebSockets.TcpListenerWebSocketContext.QueryString">
            <summary>
            Gets the query string included in the handshake request.
            </summary>
            <value>
              <para>
              A <see cref="T:System.Collections.Specialized.NameValueCollection"/> that contains the query
              parameters.
              </para>
              <para>
              An empty collection if not included.
              </para>
            </value>
        </member>
        <member name="P:Sfs2X.WebSocketSharp.Net.WebSockets.TcpListenerWebSocketContext.RequestUri">
            <summary>
            Gets the URI requested by the client.
            </summary>
            <value>
              <para>
              A <see cref="T:System.Uri"/> that represents the URI parsed from the request.
              </para>
              <para>
              <see langword="null"/> if the URI cannot be parsed.
              </para>
            </value>
        </member>
        <member name="P:Sfs2X.WebSocketSharp.Net.WebSockets.TcpListenerWebSocketContext.SecWebSocketKey">
            <summary>
            Gets the value of the Sec-WebSocket-Key header included in
            the handshake request.
            </summary>
            <value>
              <para>
              A <see cref="T:System.String"/> that represents the value of
              the Sec-WebSocket-Key header.
              </para>
              <para>
              The value is used to prove that the server received
              a valid WebSocket handshake request.
              </para>
              <para>
              <see langword="null"/> if not included.
              </para>
            </value>
        </member>
        <member name="P:Sfs2X.WebSocketSharp.Net.WebSockets.TcpListenerWebSocketContext.SecWebSocketProtocols">
            <summary>
            Gets the names of the subprotocols from the Sec-WebSocket-Protocol
            header included in the handshake request.
            </summary>
            <value>
              <para>
              An <see cref="T:System.Collections.Generic.IEnumerable{string}"/>
              instance.
              </para>
              <para>
              It provides an enumerator which supports the iteration over
              the collection of the names of the subprotocols.
              </para>
            </value>
        </member>
        <member name="P:Sfs2X.WebSocketSharp.Net.WebSockets.TcpListenerWebSocketContext.SecWebSocketVersion">
            <summary>
            Gets the value of the Sec-WebSocket-Version header included in
            the handshake request.
            </summary>
            <value>
              <para>
              A <see cref="T:System.String"/> that represents the WebSocket protocol
              version specified by the client.
              </para>
              <para>
              <see langword="null"/> if not included.
              </para>
            </value>
        </member>
        <member name="P:Sfs2X.WebSocketSharp.Net.WebSockets.TcpListenerWebSocketContext.ServerEndPoint">
            <summary>
            Gets the endpoint to which the handshake request is sent.
            </summary>
            <value>
            A <see cref="T:System.Net.IPEndPoint"/> that represents the server
            IP address and port number.
            </value>
        </member>
        <member name="P:Sfs2X.WebSocketSharp.Net.WebSockets.TcpListenerWebSocketContext.User">
            <summary>
            Gets the client information.
            </summary>
            <value>
              <para>
              A <see cref="T:System.Security.Principal.IPrincipal"/> instance that represents identity,
              authentication, and security roles for the client.
              </para>
              <para>
              <see langword="null"/> if the client is not authenticated.
              </para>
            </value>
        </member>
        <member name="P:Sfs2X.WebSocketSharp.Net.WebSockets.TcpListenerWebSocketContext.UserEndPoint">
            <summary>
            Gets the endpoint from which the handshake request is sent.
            </summary>
            <value>
            A <see cref="T:System.Net.IPEndPoint"/> that represents the client
            IP address and port number.
            </value>
        </member>
        <member name="P:Sfs2X.WebSocketSharp.Net.WebSockets.TcpListenerWebSocketContext.WebSocket">
            <summary>
            Gets the WebSocket interface used for two-way communication between
            the client and server.
            </summary>
            <value>
            A <see cref="T:Sfs2X.WebSocketSharp.WebSocket"/> that represents the interface.
            </value>
        </member>
        <member name="M:Sfs2X.WebSocketSharp.Net.WebSockets.TcpListenerWebSocketContext.ToString">
            <summary>
            Returns a string that represents the current instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that contains the request line and headers
            included in the handshake request.
            </returns>
        </member>
        <member name="T:Sfs2X.WebSocketSharp.Net.WebSockets.WebSocketContext">
            <summary>
            Exposes the access to the information in a WebSocket handshake request.
            </summary>
            <remarks>
            This class is an abstract class.
            </remarks>
        </member>
        <member name="M:Sfs2X.WebSocketSharp.Net.WebSockets.WebSocketContext.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Sfs2X.WebSocketSharp.Net.WebSockets.WebSocketContext"/> class.
            </summary>
        </member>
        <member name="P:Sfs2X.WebSocketSharp.Net.WebSockets.WebSocketContext.CookieCollection">
            <summary>
            Gets the HTTP cookies included in the handshake request.
            </summary>
            <value>
            A <see cref="T:Sfs2X.WebSocketSharp.Net.CookieCollection"/> that contains
            the cookies.
            </value>
        </member>
        <member name="P:Sfs2X.WebSocketSharp.Net.WebSockets.WebSocketContext.Headers">
            <summary>
            Gets the HTTP headers included in the handshake request.
            </summary>
            <value>
            A <see cref="T:System.Collections.Specialized.NameValueCollection"/> that contains the headers.
            </value>
        </member>
        <member name="P:Sfs2X.WebSocketSharp.Net.WebSockets.WebSocketContext.Host">
            <summary>
            Gets the value of the Host header included in the handshake request.
            </summary>
            <value>
            A <see cref="T:System.String"/> that represents the server host name requested
            by the client.
            </value>
        </member>
        <member name="P:Sfs2X.WebSocketSharp.Net.WebSockets.WebSocketContext.IsAuthenticated">
            <summary>
            Gets a value indicating whether the client is authenticated.
            </summary>
            <value>
            <c>true</c> if the client is authenticated; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Sfs2X.WebSocketSharp.Net.WebSockets.WebSocketContext.IsLocal">
            <summary>
            Gets a value indicating whether the handshake request is sent from
            the local computer.
            </summary>
            <value>
            <c>true</c> if the handshake request is sent from the same computer
            as the server; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Sfs2X.WebSocketSharp.Net.WebSockets.WebSocketContext.IsSecureConnection">
            <summary>
            Gets a value indicating whether a secure connection is used to send
            the handshake request.
            </summary>
            <value>
            <c>true</c> if the connection is secure; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Sfs2X.WebSocketSharp.Net.WebSockets.WebSocketContext.IsWebSocketRequest">
            <summary>
            Gets a value indicating whether the request is a WebSocket handshake
            request.
            </summary>
            <value>
            <c>true</c> if the request is a WebSocket handshake request; otherwise,
            <c>false</c>.
            </value>
        </member>
        <member name="P:Sfs2X.WebSocketSharp.Net.WebSockets.WebSocketContext.Origin">
            <summary>
            Gets the value of the Origin header included in the handshake request.
            </summary>
            <value>
            A <see cref="T:System.String"/> that represents the value of the Origin header.
            </value>
        </member>
        <member name="P:Sfs2X.WebSocketSharp.Net.WebSockets.WebSocketContext.QueryString">
            <summary>
            Gets the query string included in the handshake request.
            </summary>
            <value>
            A <see cref="T:System.Collections.Specialized.NameValueCollection"/> that contains the query parameters.
            </value>
        </member>
        <member name="P:Sfs2X.WebSocketSharp.Net.WebSockets.WebSocketContext.RequestUri">
            <summary>
            Gets the URI requested by the client.
            </summary>
            <value>
            A <see cref="T:System.Uri"/> that represents the URI parsed from the request.
            </value>
        </member>
        <member name="P:Sfs2X.WebSocketSharp.Net.WebSockets.WebSocketContext.SecWebSocketKey">
            <summary>
            Gets the value of the Sec-WebSocket-Key header included in
            the handshake request.
            </summary>
            <value>
              <para>
              A <see cref="T:System.String"/> that represents the value of
              the Sec-WebSocket-Key header.
              </para>
              <para>
              The value is used to prove that the server received
              a valid WebSocket handshake request.
              </para>
            </value>
        </member>
        <member name="P:Sfs2X.WebSocketSharp.Net.WebSockets.WebSocketContext.SecWebSocketProtocols">
            <summary>
            Gets the names of the subprotocols from the Sec-WebSocket-Protocol
            header included in the handshake request.
            </summary>
            <value>
              <para>
              An <see cref="T:System.Collections.Generic.IEnumerable{string}"/>
              instance.
              </para>
              <para>
              It provides an enumerator which supports the iteration over
              the collection of the names of the subprotocols.
              </para>
            </value>
        </member>
        <member name="P:Sfs2X.WebSocketSharp.Net.WebSockets.WebSocketContext.SecWebSocketVersion">
            <summary>
            Gets the value of the Sec-WebSocket-Version header included in
            the handshake request.
            </summary>
            <value>
            A <see cref="T:System.String"/> that represents the WebSocket protocol
            version specified by the client.
            </value>
        </member>
        <member name="P:Sfs2X.WebSocketSharp.Net.WebSockets.WebSocketContext.ServerEndPoint">
            <summary>
            Gets the endpoint to which the handshake request is sent.
            </summary>
            <value>
            A <see cref="T:System.Net.IPEndPoint"/> that represents the server
            IP address and port number.
            </value>
        </member>
        <member name="P:Sfs2X.WebSocketSharp.Net.WebSockets.WebSocketContext.User">
            <summary>
            Gets the client information.
            </summary>
            <value>
            A <see cref="T:System.Security.Principal.IPrincipal"/> instance that represents identity,
            authentication, and security roles for the client.
            </value>
        </member>
        <member name="P:Sfs2X.WebSocketSharp.Net.WebSockets.WebSocketContext.UserEndPoint">
            <summary>
            Gets the endpoint from which the handshake request is sent.
            </summary>
            <value>
            A <see cref="T:System.Net.IPEndPoint"/> that represents the client
            IP address and port number.
            </value>
        </member>
        <member name="P:Sfs2X.WebSocketSharp.Net.WebSockets.WebSocketContext.WebSocket">
            <summary>
            Gets the WebSocket interface used for two-way communication between
            the client and server.
            </summary>
            <value>
            A <see cref="T:Sfs2X.WebSocketSharp.WebSocket"/> that represents the interface.
            </value>
        </member>
        <member name="T:Sfs2X.WebSocketSharp.Server.HttpRequestEventArgs">
            <summary>
            Represents the event data for the HTTP request events of the
            <see cref="T:Sfs2X.WebSocketSharp.Server.HttpServer"/> class.
            </summary>
            <remarks>
              <para>
              An HTTP request event occurs when the <see cref="T:Sfs2X.WebSocketSharp.Server.HttpServer"/>
              instance receives an HTTP request.
              </para>
              <para>
              You should access the <see cref="P:Sfs2X.WebSocketSharp.Server.HttpRequestEventArgs.Request"/> property if you would
              like to get the request data sent from a client.
              </para>
              <para>
              And you should access the <see cref="P:Sfs2X.WebSocketSharp.Server.HttpRequestEventArgs.Response"/> property if you
              would like to get the response data to return to the client.
              </para>
            </remarks>
        </member>
        <member name="P:Sfs2X.WebSocketSharp.Server.HttpRequestEventArgs.Request">
            <summary>
            Gets the request data sent from a client.
            </summary>
            <value>
            A <see cref="T:Sfs2X.WebSocketSharp.Net.HttpListenerRequest"/> that provides the methods and
            properties for the request data.
            </value>
        </member>
        <member name="P:Sfs2X.WebSocketSharp.Server.HttpRequestEventArgs.Response">
            <summary>
            Gets the response data to return to the client.
            </summary>
            <value>
            A <see cref="T:Sfs2X.WebSocketSharp.Net.HttpListenerResponse"/> that provides the methods and
            properties for the response data.
            </value>
        </member>
        <member name="P:Sfs2X.WebSocketSharp.Server.HttpRequestEventArgs.User">
            <summary>
            Gets the information for the client.
            </summary>
            <value>
              <para>
              A <see cref="T:System.Security.Principal.IPrincipal"/> instance or <see langword="null"/>
              if not authenticated.
              </para>
              <para>
              That instance describes the identity, authentication scheme,
              and security roles for the client.
              </para>
            </value>
        </member>
        <member name="M:Sfs2X.WebSocketSharp.Server.HttpRequestEventArgs.ReadFile(System.String)">
            <summary>
            Reads the specified file from the document folder of the
            <see cref="T:Sfs2X.WebSocketSharp.Server.HttpServer"/> class.
            </summary>
            <returns>
              <para>
              An array of <see cref="T:System.Byte"/> or <see langword="null"/>
              if it fails.
              </para>
              <para>
              That array receives the contents of the file.
              </para>
            </returns>
            <param name="path">
            A <see cref="T:System.String"/> that specifies a virtual path to
            find the file from the document folder.
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="path"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
              <para>
              <paramref name="path"/> is an empty string.
              </para>
              <para>
              -or-
              </para>
              <para>
              <paramref name="path"/> contains "..".
              </para>
            </exception>
        </member>
        <member name="M:Sfs2X.WebSocketSharp.Server.HttpRequestEventArgs.TryReadFile(System.String,System.Byte[]@)">
            <summary>
            Tries to read the specified file from the document folder of
            the <see cref="T:Sfs2X.WebSocketSharp.Server.HttpServer"/> class.
            </summary>
            <returns>
            <c>true</c> if it succeeds to read; otherwise, <c>false</c>.
            </returns>
            <param name="path">
            A <see cref="T:System.String"/> that specifies a virtual path to find
            the file from the document folder.
            </param>
            <param name="contents">
              <para>
              When this method returns, an array of <see cref="T:System.Byte"/> or
              <see langword="null"/> if it fails.
              </para>
              <para>
              That array receives the contents of the file.
              </para>
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="path"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
              <para>
              <paramref name="path"/> is an empty string.
              </para>
              <para>
              -or-
              </para>
              <para>
              <paramref name="path"/> contains "..".
              </para>
            </exception>
        </member>
        <member name="T:Sfs2X.WebSocketSharp.Server.HttpServer">
            <summary>
            Provides a simple HTTP server.
            </summary>
            <remarks>
              <para>
              The server supports HTTP/1.1 version request and response.
              </para>
              <para>
              Also the server allows to accept WebSocket handshake requests.
              </para>
              <para>
              This class can provide multiple WebSocket services.
              </para>
            </remarks>
        </member>
        <member name="M:Sfs2X.WebSocketSharp.Server.HttpServer.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Sfs2X.WebSocketSharp.Server.HttpServer"/> class.
            </summary>
            <remarks>
            The new instance listens for incoming requests on
            <see cref="F:System.Net.IPAddress.Any"/> and port 80.
            </remarks>
        </member>
        <member name="M:Sfs2X.WebSocketSharp.Server.HttpServer.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Sfs2X.WebSocketSharp.Server.HttpServer"/> class with
            the specified port.
            </summary>
            <remarks>
              <para>
              The new instance listens for incoming requests on
              <see cref="F:System.Net.IPAddress.Any"/> and <paramref name="port"/>.
              </para>
              <para>
              It provides secure connections if <paramref name="port"/> is 443.
              </para>
            </remarks>
            <param name="port">
            An <see cref="T:System.Int32"/> that specifies the number of the port on which
            to listen.
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="port"/> is less than 1 or greater than 65535.
            </exception>
        </member>
        <member name="M:Sfs2X.WebSocketSharp.Server.HttpServer.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Sfs2X.WebSocketSharp.Server.HttpServer"/> class with
            the specified URL.
            </summary>
            <remarks>
              <para>
              The new instance listens for incoming requests on the IP address and
              port of <paramref name="url"/>.
              </para>
              <para>
              Either port 80 or 443 is used if <paramref name="url"/> includes
              no port. Port 443 is used if the scheme of <paramref name="url"/>
              is https; otherwise, port 80 is used.
              </para>
              <para>
              The new instance provides secure connections if the scheme of
              <paramref name="url"/> is https.
              </para>
            </remarks>
            <param name="url">
            A <see cref="T:System.String"/> that specifies the HTTP URL of the server.
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="url"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
              <para>
              <paramref name="url"/> is an empty string.
              </para>
              <para>
              -or-
              </para>
              <para>
              <paramref name="url"/> is invalid.
              </para>
            </exception>
        </member>
        <member name="M:Sfs2X.WebSocketSharp.Server.HttpServer.#ctor(System.Int32,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Sfs2X.WebSocketSharp.Server.HttpServer"/> class with
            the specified port and boolean if secure or not.
            </summary>
            <remarks>
            The new instance listens for incoming requests on
            <see cref="F:System.Net.IPAddress.Any"/> and <paramref name="port"/>.
            </remarks>
            <param name="port">
            An <see cref="T:System.Int32"/> that specifies the number of the port on which
            to listen.
            </param>
            <param name="secure">
            A <see cref="T:System.Boolean"/>: <c>true</c> if the new instance provides
            secure connections; otherwise, <c>false</c>.
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="port"/> is less than 1 or greater than 65535.
            </exception>
        </member>
        <member name="M:Sfs2X.WebSocketSharp.Server.HttpServer.#ctor(System.Net.IPAddress,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Sfs2X.WebSocketSharp.Server.HttpServer"/> class with
            the specified IP address and port.
            </summary>
            <remarks>
              <para>
              The new instance listens for incoming requests on
              <paramref name="address"/> and <paramref name="port"/>.
              </para>
              <para>
              It provides secure connections if <paramref name="port"/> is 443.
              </para>
            </remarks>
            <param name="address">
            A <see cref="T:System.Net.IPAddress"/> that specifies the local IP
            address on which to listen.
            </param>
            <param name="port">
            An <see cref="T:System.Int32"/> that specifies the number of the port on which
            to listen.
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="address"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="address"/> is not a local IP address.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="port"/> is less than 1 or greater than 65535.
            </exception>
        </member>
        <member name="M:Sfs2X.WebSocketSharp.Server.HttpServer.#ctor(System.Net.IPAddress,System.Int32,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Sfs2X.WebSocketSharp.Server.HttpServer"/> class with
            the specified IP address, port, and boolean if secure or not.
            </summary>
            <remarks>
            The new instance listens for incoming requests on
            <paramref name="address"/> and <paramref name="port"/>.
            </remarks>
            <param name="address">
            A <see cref="T:System.Net.IPAddress"/> that specifies the local IP
            address on which to listen.
            </param>
            <param name="port">
            An <see cref="T:System.Int32"/> that specifies the number of the port on which
            to listen.
            </param>
            <param name="secure">
            A <see cref="T:System.Boolean"/>: <c>true</c> if the new instance provides
            secure connections; otherwise, <c>false</c>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="address"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="address"/> is not a local IP address.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="port"/> is less than 1 or greater than 65535.
            </exception>
        </member>
        <member name="P:Sfs2X.WebSocketSharp.Server.HttpServer.Address">
            <summary>
            Gets the IP address of the server.
            </summary>
            <value>
            A <see cref="T:System.Net.IPAddress"/> that represents the local IP
            address on which to listen for incoming requests.
            </value>
        </member>
        <member name="P:Sfs2X.WebSocketSharp.Server.HttpServer.AuthenticationSchemes">
            <summary>
            Gets or sets the scheme used to authenticate the clients.
            </summary>
            <remarks>
            The set operation works if the current state of the server is
            Ready or Stop.
            </remarks>
            <value>
              <para>
              One of the <see cref="T:Sfs2X.WebSocketSharp.Net.AuthenticationSchemes"/>
              enum values.
              </para>
              <para>
              It represents the scheme used to authenticate the clients.
              </para>
              <para>
              The default value is
              <see cref="F:Sfs2X.WebSocketSharp.Net.AuthenticationSchemes.Anonymous"/>.
              </para>
            </value>
        </member>
        <member name="P:Sfs2X.WebSocketSharp.Server.HttpServer.DocumentRootPath">
            <summary>
            Gets or sets the path to the document folder of the server.
            </summary>
            <remarks>
            The set operation works if the current state of the server is
            Ready or Stop.
            </remarks>
            <value>
              <para>
              A <see cref="T:System.String"/> that represents a path to the folder
              from which to find the requested file.
              </para>
              <para>
              '/' or '\' is trimmed from the end of the value if present.
              </para>
              <para>
              The default value is "./Public".
              </para>
            </value>
            <exception cref="T:System.ArgumentNullException">
            The value specified for a set operation is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
              <para>
              The value specified for a set operation is an empty string.
              </para>
              <para>
              -or-
              </para>
              <para>
              The value specified for a set operation is an absolute root.
              </para>
              <para>
              -or-
              </para>
              <para>
              The value specified for a set operation is an invalid path string.
              </para>
            </exception>
        </member>
        <member name="P:Sfs2X.WebSocketSharp.Server.HttpServer.IsListening">
            <summary>
            Gets a value indicating whether the server has started.
            </summary>
            <value>
            <c>true</c> if the server has started; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Sfs2X.WebSocketSharp.Server.HttpServer.IsSecure">
            <summary>
            Gets a value indicating whether the server provides secure connections.
            </summary>
            <value>
            <c>true</c> if the server provides secure connections; otherwise,
            <c>false</c>.
            </value>
        </member>
        <member name="P:Sfs2X.WebSocketSharp.Server.HttpServer.KeepClean">
            <summary>
            Gets or sets a value indicating whether the server cleans up
            the inactive sessions periodically.
            </summary>
            <remarks>
            The set operation works if the current state of the server is
            Ready or Stop.
            </remarks>
            <value>
              <para>
              <c>true</c> if the server cleans up the inactive sessions
              every 60 seconds; otherwise, <c>false</c>.
              </para>
              <para>
              The default value is <c>true</c>.
              </para>
            </value>
        </member>
        <member name="P:Sfs2X.WebSocketSharp.Server.HttpServer.Log">
            <summary>
            Gets the logging function for the server.
            </summary>
            <remarks>
            The default logging level is <see cref="F:Sfs2X.WebSocketSharp.LogLevel.Error"/>.
            </remarks>
            <value>
            A <see cref="T:Sfs2X.WebSocketSharp.Logger"/> that provides the logging function.
            </value>
        </member>
        <member name="P:Sfs2X.WebSocketSharp.Server.HttpServer.Port">
            <summary>
            Gets the port of the server.
            </summary>
            <value>
            An <see cref="T:System.Int32"/> that represents the number of the port on which
            to listen for incoming requests.
            </value>
        </member>
        <member name="P:Sfs2X.WebSocketSharp.Server.HttpServer.Realm">
            <summary>
            Gets or sets the name of the realm associated with the server.
            </summary>
            <remarks>
            The set operation works if the current state of the server is
            Ready or Stop.
            </remarks>
            <value>
              <para>
              A <see cref="T:System.String"/> that represents the name of the realm.
              </para>
              <para>
              "SECRET AREA" is used as the name of the realm if the value is
              <see langword="null"/> or an empty string.
              </para>
              <para>
              The default value is <see langword="null"/>.
              </para>
            </value>
        </member>
        <member name="P:Sfs2X.WebSocketSharp.Server.HttpServer.ReuseAddress">
            <summary>
            Gets or sets a value indicating whether the server is allowed to
            be bound to an address that is already in use.
            </summary>
            <remarks>
              <para>
              You should set this property to <c>true</c> if you would like to
              resolve to wait for socket in TIME_WAIT state.
              </para>
              <para>
              The set operation works if the current state of the server is
              Ready or Stop.
              </para>
            </remarks>
            <value>
              <para>
              <c>true</c> if the server is allowed to be bound to an address
              that is already in use; otherwise, <c>false</c>.
              </para>
              <para>
              The default value is <c>false</c>.
              </para>
            </value>
        </member>
        <member name="P:Sfs2X.WebSocketSharp.Server.HttpServer.SslConfiguration">
            <summary>
            Gets the configuration for secure connection.
            </summary>
            <remarks>
            The configuration will be referenced when attempts to start,
            so it must be configured before the start method is called.
            </remarks>
            <value>
            A <see cref="T:Sfs2X.WebSocketSharp.Net.ServerSslConfiguration"/> that represents
            the configuration used to provide secure connections.
            </value>
            <exception cref="T:System.InvalidOperationException">
            The server does not provide secure connections.
            </exception>
        </member>
        <member name="P:Sfs2X.WebSocketSharp.Server.HttpServer.UserCredentialsFinder">
            <summary>
            Gets or sets the delegate used to find the credentials for an identity.
            </summary>
            <remarks>
            The set operation works if the current state of the server is
            Ready or Stop.
            </remarks>
            <value>
              <para>
              A <see cref="T:System.Func{IIdentity, NetworkCredential}"/>
              delegate.
              </para>
              <para>
              The delegate invokes the method called when the server finds
              the credentials used to authenticate a client.
              </para>
              <para>
              The method must return <see langword="null"/> if the credentials
              are not found.
              </para>
              <para>
              <see langword="null"/> if not necessary.
              </para>
              <para>
              The default value is <see langword="null"/>.
              </para>
            </value>
        </member>
        <member name="P:Sfs2X.WebSocketSharp.Server.HttpServer.WaitTime">
            <summary>
            Gets or sets the time to wait for the response to the WebSocket
            Ping or Close.
            </summary>
            <remarks>
            The set operation works if the current state of the server is
            Ready or Stop.
            </remarks>
            <value>
              <para>
              A <see cref="T:System.TimeSpan"/> that represents the time to wait for
              the response.
              </para>
              <para>
              The default value is the same as 1 second.
              </para>
            </value>
            <exception cref="T:System.ArgumentOutOfRangeException">
            The value specified for a set operation is zero or less.
            </exception>
        </member>
        <member name="P:Sfs2X.WebSocketSharp.Server.HttpServer.WebSocketServices">
            <summary>
            Gets the management function for the WebSocket services provided by
            the server.
            </summary>
            <value>
            A <see cref="T:Sfs2X.WebSocketSharp.Server.WebSocketServiceManager"/> that manages the WebSocket
            services provided by the server.
            </value>
        </member>
        <member name="E:Sfs2X.WebSocketSharp.Server.HttpServer.OnConnect">
            <summary>
            Occurs when the server receives an HTTP CONNECT request.
            </summary>
        </member>
        <member name="E:Sfs2X.WebSocketSharp.Server.HttpServer.OnDelete">
            <summary>
            Occurs when the server receives an HTTP DELETE request.
            </summary>
        </member>
        <member name="E:Sfs2X.WebSocketSharp.Server.HttpServer.OnGet">
            <summary>
            Occurs when the server receives an HTTP GET request.
            </summary>
        </member>
        <member name="E:Sfs2X.WebSocketSharp.Server.HttpServer.OnHead">
            <summary>
            Occurs when the server receives an HTTP HEAD request.
            </summary>
        </member>
        <member name="E:Sfs2X.WebSocketSharp.Server.HttpServer.OnOptions">
            <summary>
            Occurs when the server receives an HTTP OPTIONS request.
            </summary>
        </member>
        <member name="E:Sfs2X.WebSocketSharp.Server.HttpServer.OnPost">
            <summary>
            Occurs when the server receives an HTTP POST request.
            </summary>
        </member>
        <member name="E:Sfs2X.WebSocketSharp.Server.HttpServer.OnPut">
            <summary>
            Occurs when the server receives an HTTP PUT request.
            </summary>
        </member>
        <member name="E:Sfs2X.WebSocketSharp.Server.HttpServer.OnTrace">
            <summary>
            Occurs when the server receives an HTTP TRACE request.
            </summary>
        </member>
        <member name="M:Sfs2X.WebSocketSharp.Server.HttpServer.AddWebSocketService``1(System.String)">
            <summary>
            Adds a WebSocket service with the specified behavior and path.
            </summary>
            <param name="path">
              <para>
              A <see cref="T:System.String"/> that specifies an absolute path to
              the service to add.
              </para>
              <para>
              / is trimmed from the end of the string if present.
              </para>
            </param>
            <typeparam name="TBehavior">
              <para>
              The type of the behavior for the service.
              </para>
              <para>
              It must inherit the <see cref="T:Sfs2X.WebSocketSharp.Server.WebSocketBehavior"/> class.
              </para>
              <para>
              Also it must have a public parameterless constructor.
              </para>
            </typeparam>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="path"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
              <para>
              <paramref name="path"/> is an empty string.
              </para>
              <para>
              -or-
              </para>
              <para>
              <paramref name="path"/> is not an absolute path.
              </para>
              <para>
              -or-
              </para>
              <para>
              <paramref name="path"/> includes either or both
              query and fragment components.
              </para>
              <para>
              -or-
              </para>
              <para>
              <paramref name="path"/> is already in use.
              </para>
            </exception>
        </member>
        <member name="M:Sfs2X.WebSocketSharp.Server.HttpServer.AddWebSocketService``1(System.String,System.Action{``0})">
            <summary>
            Adds a WebSocket service with the specified behavior, path,
            and initializer.
            </summary>
            <param name="path">
              <para>
              A <see cref="T:System.String"/> that specifies an absolute path to
              the service to add.
              </para>
              <para>
              / is trimmed from the end of the string if present.
              </para>
            </param>
            <param name="initializer">
              <para>
              An <see cref="T:System.Action{TBehavior}"/> delegate.
              </para>
              <para>
              The delegate invokes the method called when the service
              initializes a new session instance.
              </para>
              <para>
              <see langword="null"/> if not necessary.
              </para>
            </param>
            <typeparam name="TBehavior">
              <para>
              The type of the behavior for the service.
              </para>
              <para>
              It must inherit the <see cref="T:Sfs2X.WebSocketSharp.Server.WebSocketBehavior"/> class.
              </para>
              <para>
              Also it must have a public parameterless constructor.
              </para>
            </typeparam>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="path"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
              <para>
              <paramref name="path"/> is an empty string.
              </para>
              <para>
              -or-
              </para>
              <para>
              <paramref name="path"/> is not an absolute path.
              </para>
              <para>
              -or-
              </para>
              <para>
              <paramref name="path"/> includes either or both
              query and fragment components.
              </para>
              <para>
              -or-
              </para>
              <para>
              <paramref name="path"/> is already in use.
              </para>
            </exception>
        </member>
        <member name="M:Sfs2X.WebSocketSharp.Server.HttpServer.RemoveWebSocketService(System.String)">
            <summary>
            Removes a WebSocket service with the specified path.
            </summary>
            <remarks>
            The service is stopped with close status 1001 (going away)
            if the current state of the service is Start.
            </remarks>
            <returns>
            <c>true</c> if the service is successfully found and removed;
            otherwise, <c>false</c>.
            </returns>
            <param name="path">
              <para>
              A <see cref="T:System.String"/> that specifies an absolute path to
              the service to remove.
              </para>
              <para>
              / is trimmed from the end of the string if present.
              </para>
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="path"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
              <para>
              <paramref name="path"/> is an empty string.
              </para>
              <para>
              -or-
              </para>
              <para>
              <paramref name="path"/> is not an absolute path.
              </para>
              <para>
              -or-
              </para>
              <para>
              <paramref name="path"/> includes either or both
              query and fragment components.
              </para>
            </exception>
        </member>
        <member name="M:Sfs2X.WebSocketSharp.Server.HttpServer.Start">
            <summary>
            Starts receiving incoming requests.
            </summary>
            <remarks>
            This method works if the current state of the server is Ready or Stop.
            </remarks>
            <exception cref="T:System.InvalidOperationException">
              <para>
              There is no server certificate for secure connection.
              </para>
              <para>
              -or-
              </para>
              <para>
              The underlying <see cref="T:Sfs2X.WebSocketSharp.Net.HttpListener"/> has failed to start.
              </para>
            </exception>
        </member>
        <member name="M:Sfs2X.WebSocketSharp.Server.HttpServer.Stop">
            <summary>
            Stops receiving incoming requests.
            </summary>
            <remarks>
            This method works if the current state of the server is Start.
            </remarks>
        </member>
        <member name="T:Sfs2X.WebSocketSharp.Server.IWebSocketSession">
            <summary>
            Exposes the access to the information in a WebSocket session.
            </summary>
        </member>
        <member name="P:Sfs2X.WebSocketSharp.Server.IWebSocketSession.ID">
            <summary>
            Gets the unique ID of the session.
            </summary>
            <value>
            A <see cref="T:System.String"/> that represents the unique ID of the session.
            </value>
        </member>
        <member name="P:Sfs2X.WebSocketSharp.Server.IWebSocketSession.StartTime">
            <summary>
            Gets the time that the session has started.
            </summary>
            <value>
            A <see cref="T:System.DateTime"/> that represents the time that the session
            has started.
            </value>
        </member>
        <member name="P:Sfs2X.WebSocketSharp.Server.IWebSocketSession.WebSocket">
            <summary>
            Gets the WebSocket interface for the session.
            </summary>
            <value>
            A <see cref="T:Sfs2X.WebSocketSharp.WebSocket"/> that represents the interface.
            </value>
        </member>
        <member name="T:Sfs2X.WebSocketSharp.Server.WebSocketBehavior">
            <summary>
            Exposes a set of methods and properties used to define the behavior of
            a WebSocket service provided by the <see cref="T:Sfs2X.WebSocketSharp.Server.WebSocketServer"/> or
            <see cref="T:Sfs2X.WebSocketSharp.Server.HttpServer"/> class.
            </summary>
            <remarks>
            This class is an abstract class.
            </remarks>
        </member>
        <member name="M:Sfs2X.WebSocketSharp.Server.WebSocketBehavior.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Sfs2X.WebSocketSharp.Server.WebSocketBehavior"/> class.
            </summary>
        </member>
        <member name="P:Sfs2X.WebSocketSharp.Server.WebSocketBehavior.Headers">
            <summary>
            Gets the HTTP headers for a session.
            </summary>
            <value>
            A <see cref="T:System.Collections.Specialized.NameValueCollection"/> that contains the headers
            included in the WebSocket handshake request.
            </value>
            <exception cref="T:System.InvalidOperationException">
            The session has not started yet.
            </exception>
        </member>
        <member name="P:Sfs2X.WebSocketSharp.Server.WebSocketBehavior.IsAlive">
            <summary>
            Gets a value indicating whether the communication is possible for
            a session.
            </summary>
            <value>
            <c>true</c> if the communication is possible; otherwise, <c>false</c>.
            </value>
            <exception cref="T:System.InvalidOperationException">
            The session has not started yet.
            </exception>
        </member>
        <member name="P:Sfs2X.WebSocketSharp.Server.WebSocketBehavior.QueryString">
            <summary>
            Gets the query string for a session.
            </summary>
            <value>
              <para>
              A <see cref="T:System.Collections.Specialized.NameValueCollection"/> that contains the query
              parameters included in the WebSocket handshake request.
              </para>
              <para>
              An empty collection if not included.
              </para>
            </value>
            <exception cref="T:System.InvalidOperationException">
            The session has not started yet.
            </exception>
        </member>
        <member name="P:Sfs2X.WebSocketSharp.Server.WebSocketBehavior.ReadyState">
            <summary>
            Gets the current state of the WebSocket interface for a session.
            </summary>
            <value>
              <para>
              One of the <see cref="T:Sfs2X.WebSocketSharp.WebSocketState"/> enum values.
              </para>
              <para>
              It indicates the current state of the interface.
              </para>
            </value>
            <exception cref="T:System.InvalidOperationException">
            The session has not started yet.
            </exception>
        </member>
        <member name="P:Sfs2X.WebSocketSharp.Server.WebSocketBehavior.Sessions">
            <summary>
            Gets the management function for the sessions in the service.
            </summary>
            <value>
            A <see cref="T:Sfs2X.WebSocketSharp.Server.WebSocketSessionManager"/> that manages the sessions in
            the service.
            </value>
            <exception cref="T:System.InvalidOperationException">
            The session has not started yet.
            </exception>
        </member>
        <member name="P:Sfs2X.WebSocketSharp.Server.WebSocketBehavior.User">
            <summary>
            Gets the client information for a session.
            </summary>
            <value>
              <para>
              A <see cref="T:System.Security.Principal.IPrincipal"/> instance that represents identity,
              authentication, and security roles for the client.
              </para>
              <para>
              <see langword="null"/> if the client is not authenticated.
              </para>
            </value>
            <exception cref="T:System.InvalidOperationException">
            The session has not started yet.
            </exception>
        </member>
        <member name="P:Sfs2X.WebSocketSharp.Server.WebSocketBehavior.UserEndPoint">
            <summary>
            Gets the client endpoint for a session.
            </summary>
            <value>
            A <see cref="T:System.Net.IPEndPoint"/> that represents the client
            IP address and port number.
            </value>
            <exception cref="T:System.InvalidOperationException">
            The session has not started yet.
            </exception>
        </member>
        <member name="P:Sfs2X.WebSocketSharp.Server.WebSocketBehavior.CookiesValidator">
            <summary>
            Gets or sets the delegate used to validate the HTTP cookies.
            </summary>
            <value>
              <para>
              A <see cref="T:System.Func{CookieCollection, CookieCollection, bool}"/>
              delegate.
              </para>
              <para>
              The delegate invokes the method called when the WebSocket interface
              for a session validates the handshake request.
              </para>
              <para>
              1st <see cref="T:Sfs2X.WebSocketSharp.Net.CookieCollection"/> parameter passed to the method
              contains the cookies to validate.
              </para>
              <para>
              2nd <see cref="T:Sfs2X.WebSocketSharp.Net.CookieCollection"/> parameter passed to the method
              receives the cookies to send to the client.
              </para>
              <para>
              The method must return <c>true</c> if the cookies are valid.
              </para>
              <para>
              <see langword="null"/> if not necessary.
              </para>
              <para>
              The default value is <see langword="null"/>.
              </para>
            </value>
        </member>
        <member name="P:Sfs2X.WebSocketSharp.Server.WebSocketBehavior.EmitOnPing">
            <summary>
            Gets or sets a value indicating whether the message event is emitted
            when the WebSocket interface for a session receives a ping.
            </summary>
            <value>
              <para>
              <c>true</c> if the interface emits the message event when receives
              a ping; otherwise, <c>false</c>.
              </para>
              <para>
              The default value is <c>false</c>.
              </para>
            </value>
        </member>
        <member name="P:Sfs2X.WebSocketSharp.Server.WebSocketBehavior.HostValidator">
            <summary>
            Gets or sets the delegate used to validate the Host header.
            </summary>
            <value>
              <para>
              A <see cref="T:System.Func{string, bool}"/> delegate.
              </para>
              <para>
              The delegate invokes the method called when the WebSocket interface
              for a session validates the handshake request.
              </para>
              <para>
              The <see cref="T:System.String"/> parameter passed to the method is the value
              of the Host header.
              </para>
              <para>
              The method must return <c>true</c> if the header value is valid.
              </para>
              <para>
              <see langword="null"/> if not necessary.
              </para>
              <para>
              The default value is <see langword="null"/>.
              </para>
            </value>
        </member>
        <member name="P:Sfs2X.WebSocketSharp.Server.WebSocketBehavior.ID">
            <summary>
            Gets the unique ID of a session.
            </summary>
            <value>
              <para>
              A <see cref="T:System.String"/> that represents the unique ID of the session.
              </para>
              <para>
              <see langword="null"/> if the session has not started yet.
              </para>
            </value>
        </member>
        <member name="P:Sfs2X.WebSocketSharp.Server.WebSocketBehavior.IgnoreExtensions">
            <summary>
            Gets or sets a value indicating whether the WebSocket interface for
            a session ignores the Sec-WebSocket-Extensions header.
            </summary>
            <value>
              <para>
              <c>true</c> if the interface ignores the extensions requested
              from the client; otherwise, <c>false</c>.
              </para>
              <para>
              The default value is <c>false</c>.
              </para>
            </value>
        </member>
        <member name="P:Sfs2X.WebSocketSharp.Server.WebSocketBehavior.OriginValidator">
            <summary>
            Gets or sets the delegate used to validate the Origin header.
            </summary>
            <value>
              <para>
              A <see cref="T:System.Func{string, bool}"/> delegate.
              </para>
              <para>
              The delegate invokes the method called when the WebSocket interface
              for a session validates the handshake request.
              </para>
              <para>
              The <see cref="T:System.String"/> parameter passed to the method is the value
              of the Origin header or <see langword="null"/> if the header is not
              present.
              </para>
              <para>
              The method must return <c>true</c> if the header value is valid.
              </para>
              <para>
              <see langword="null"/> if not necessary.
              </para>
              <para>
              The default value is <see langword="null"/>.
              </para>
            </value>
        </member>
        <member name="P:Sfs2X.WebSocketSharp.Server.WebSocketBehavior.Protocol">
            <summary>
            Gets or sets the name of the WebSocket subprotocol for a session.
            </summary>
            <value>
              <para>
              A <see cref="T:System.String"/> that represents the name of the subprotocol.
              </para>
              <para>
              The value specified for a set operation must be a token defined in
              <see href="http://tools.ietf.org/html/rfc2616#section-2.2">
              RFC 2616</see>.
              </para>
              <para>
              The default value is an empty string.
              </para>
            </value>
            <exception cref="T:System.InvalidOperationException">
            The set operation is not available if the session has already started.
            </exception>
            <exception cref="T:System.ArgumentException">
            The value specified for a set operation is not a token.
            </exception>
        </member>
        <member name="P:Sfs2X.WebSocketSharp.Server.WebSocketBehavior.StartTime">
            <summary>
            Gets the time that a session has started.
            </summary>
            <value>
              <para>
              A <see cref="T:System.DateTime"/> that represents the time that the session
              has started.
              </para>
              <para>
              <see cref="F:System.DateTime.MaxValue"/> if the session has not started yet.
              </para>
            </value>
        </member>
        <member name="M:Sfs2X.WebSocketSharp.Server.WebSocketBehavior.Close">
            <summary>
            Closes the WebSocket connection for a session.
            </summary>
            <remarks>
            This method does nothing if the current state of the WebSocket
            interface is Closing or Closed.
            </remarks>
            <exception cref="T:System.InvalidOperationException">
            The session has not started yet.
            </exception>
        </member>
        <member name="M:Sfs2X.WebSocketSharp.Server.WebSocketBehavior.Close(System.UInt16,System.String)">
            <summary>
            Closes the WebSocket connection for a session with the specified
            code and reason.
            </summary>
            <remarks>
            This method does nothing if the current state of the WebSocket
            interface is Closing or Closed.
            </remarks>
            <param name="code">
              <para>
              A <see cref="T:System.UInt16"/> that specifies the status code indicating
              the reason for the close.
              </para>
              <para>
              The status codes are defined in
              <see href="http://tools.ietf.org/html/rfc6455#section-7.4">
              Section 7.4</see> of RFC 6455.
              </para>
            </param>
            <param name="reason">
              <para>
              A <see cref="T:System.String"/> that specifies the reason for the close.
              </para>
              <para>
              Its size must be 123 bytes or less in UTF-8.
              </para>
            </param>
            <exception cref="T:System.InvalidOperationException">
            The session has not started yet.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
              <para>
              <paramref name="code"/> is less than 1000 or greater than 4999.
              </para>
              <para>
              -or-
              </para>
              <para>
              The size of <paramref name="reason"/> is greater than 123 bytes.
              </para>
            </exception>
            <exception cref="T:System.ArgumentException">
              <para>
              <paramref name="code"/> is 1010 (mandatory extension).
              </para>
              <para>
              -or-
              </para>
              <para>
              <paramref name="code"/> is 1005 (no status) and
              <paramref name="reason"/> is specified.
              </para>
              <para>
              -or-
              </para>
              <para>
              <paramref name="reason"/> could not be UTF-8-encoded.
              </para>
            </exception>
        </member>
        <member name="M:Sfs2X.WebSocketSharp.Server.WebSocketBehavior.Close(Sfs2X.WebSocketSharp.CloseStatusCode,System.String)">
            <summary>
            Closes the WebSocket connection for a session with the specified
            code and reason.
            </summary>
            <remarks>
            This method does nothing if the current state of the WebSocket
            interface is Closing or Closed.
            </remarks>
            <param name="code">
              <para>
              One of the <see cref="T:Sfs2X.WebSocketSharp.CloseStatusCode"/> enum values.
              </para>
              <para>
              It specifies the status code indicating the reason for the close.
              </para>
            </param>
            <param name="reason">
              <para>
              A <see cref="T:System.String"/> that specifies the reason for the close.
              </para>
              <para>
              Its size must be 123 bytes or less in UTF-8.
              </para>
            </param>
            <exception cref="T:System.InvalidOperationException">
            The session has not started yet.
            </exception>
            <exception cref="T:System.ArgumentException">
              <para>
              <paramref name="code"/> is <see cref="F:Sfs2X.WebSocketSharp.CloseStatusCode.MandatoryExtension"/>.
              </para>
              <para>
              -or-
              </para>
              <para>
              <paramref name="code"/> is <see cref="F:Sfs2X.WebSocketSharp.CloseStatusCode.NoStatus"/> and
              <paramref name="reason"/> is specified.
              </para>
              <para>
              -or-
              </para>
              <para>
              <paramref name="reason"/> could not be UTF-8-encoded.
              </para>
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            The size of <paramref name="reason"/> is greater than 123 bytes.
            </exception>
        </member>
        <member name="M:Sfs2X.WebSocketSharp.Server.WebSocketBehavior.CloseAsync">
            <summary>
            Closes the WebSocket connection for a session asynchronously.
            </summary>
            <remarks>
              <para>
              This method does not wait for the close to be complete.
              </para>
              <para>
              This method does nothing if the current state of the WebSocket
              interface is Closing or Closed.
              </para>
            </remarks>
            <exception cref="T:System.InvalidOperationException">
            The session has not started yet.
            </exception>
        </member>
        <member name="M:Sfs2X.WebSocketSharp.Server.WebSocketBehavior.CloseAsync(System.UInt16,System.String)">
            <summary>
            Closes the WebSocket connection for a session asynchronously with
            the specified code and reason.
            </summary>
            <remarks>
              <para>
              This method does not wait for the close to be complete.
              </para>
              <para>
              This method does nothing if the current state of the WebSocket
              interface is Closing or Closed.
              </para>
            </remarks>
            <param name="code">
              <para>
              A <see cref="T:System.UInt16"/> that specifies the status code indicating
              the reason for the close.
              </para>
              <para>
              The status codes are defined in
              <see href="http://tools.ietf.org/html/rfc6455#section-7.4">
              Section 7.4</see> of RFC 6455.
              </para>
            </param>
            <param name="reason">
              <para>
              A <see cref="T:System.String"/> that specifies the reason for the close.
              </para>
              <para>
              Its size must be 123 bytes or less in UTF-8.
              </para>
            </param>
            <exception cref="T:System.InvalidOperationException">
            The session has not started yet.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
              <para>
              <paramref name="code"/> is less than 1000 or greater than 4999.
              </para>
              <para>
              -or-
              </para>
              <para>
              The size of <paramref name="reason"/> is greater than 123 bytes.
              </para>
            </exception>
            <exception cref="T:System.ArgumentException">
              <para>
              <paramref name="code"/> is 1010 (mandatory extension).
              </para>
              <para>
              -or-
              </para>
              <para>
              <paramref name="code"/> is 1005 (no status) and
              <paramref name="reason"/> is specified.
              </para>
              <para>
              -or-
              </para>
              <para>
              <paramref name="reason"/> could not be UTF-8-encoded.
              </para>
            </exception>
        </member>
        <member name="M:Sfs2X.WebSocketSharp.Server.WebSocketBehavior.CloseAsync(Sfs2X.WebSocketSharp.CloseStatusCode,System.String)">
            <summary>
            Closes the WebSocket connection for a session asynchronously with
            the specified code and reason.
            </summary>
            <remarks>
              <para>
              This method does not wait for the close to be complete.
              </para>
              <para>
              This method does nothing if the current state of the WebSocket
              interface is Closing or Closed.
              </para>
            </remarks>
            <param name="code">
              <para>
              One of the <see cref="T:Sfs2X.WebSocketSharp.CloseStatusCode"/> enum values.
              </para>
              <para>
              It specifies the status code indicating the reason for the close.
              </para>
            </param>
            <param name="reason">
              <para>
              A <see cref="T:System.String"/> that specifies the reason for the close.
              </para>
              <para>
              Its size must be 123 bytes or less in UTF-8.
              </para>
            </param>
            <exception cref="T:System.InvalidOperationException">
            The session has not started yet.
            </exception>
            <exception cref="T:System.ArgumentException">
              <para>
              <paramref name="code"/> is <see cref="F:Sfs2X.WebSocketSharp.CloseStatusCode.MandatoryExtension"/>.
              </para>
              <para>
              -or-
              </para>
              <para>
              <paramref name="code"/> is <see cref="F:Sfs2X.WebSocketSharp.CloseStatusCode.NoStatus"/> and
              <paramref name="reason"/> is specified.
              </para>
              <para>
              -or-
              </para>
              <para>
              <paramref name="reason"/> could not be UTF-8-encoded.
              </para>
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            The size of <paramref name="reason"/> is greater than 123 bytes.
            </exception>
        </member>
        <member name="M:Sfs2X.WebSocketSharp.Server.WebSocketBehavior.OnClose(Sfs2X.WebSocketSharp.CloseEventArgs)">
            <summary>
            Called when the WebSocket connection for a session has been closed.
            </summary>
            <param name="e">
            A <see cref="T:Sfs2X.WebSocketSharp.CloseEventArgs"/> that represents the event data passed
            from a <see cref="E:Sfs2X.WebSocketSharp.WebSocket.OnClose"/> event.
            </param>
        </member>
        <member name="M:Sfs2X.WebSocketSharp.Server.WebSocketBehavior.OnError(Sfs2X.WebSocketSharp.ErrorEventArgs)">
            <summary>
            Called when the WebSocket interface for a session gets an error.
            </summary>
            <param name="e">
            A <see cref="T:Sfs2X.WebSocketSharp.ErrorEventArgs"/> that represents the event data passed
            from a <see cref="E:Sfs2X.WebSocketSharp.WebSocket.OnError"/> event.
            </param>
        </member>
        <member name="M:Sfs2X.WebSocketSharp.Server.WebSocketBehavior.OnMessage(Sfs2X.WebSocketSharp.MessageEventArgs)">
            <summary>
            Called when the WebSocket interface for a session receives a message.
            </summary>
            <param name="e">
            A <see cref="T:Sfs2X.WebSocketSharp.MessageEventArgs"/> that represents the event data passed
            from a <see cref="E:Sfs2X.WebSocketSharp.WebSocket.OnMessage"/> event.
            </param>
        </member>
        <member name="M:Sfs2X.WebSocketSharp.Server.WebSocketBehavior.OnOpen">
            <summary>
            Called when the WebSocket connection for a session has been established.
            </summary>
        </member>
        <member name="M:Sfs2X.WebSocketSharp.Server.WebSocketBehavior.Ping">
            <summary>
            Sends a ping to the client for a session.
            </summary>
            <returns>
            <c>true</c> if the send has successfully done and a pong has been
            received within a time; otherwise, <c>false</c>.
            </returns>
            <exception cref="T:System.InvalidOperationException">
            The session has not started yet.
            </exception>
        </member>
        <member name="M:Sfs2X.WebSocketSharp.Server.WebSocketBehavior.Ping(System.String)">
            <summary>
            Sends a ping with the specified message to the client for a session.
            </summary>
            <returns>
            <c>true</c> if the send has successfully done and a pong has been
            received within a time; otherwise, <c>false</c>.
            </returns>
            <param name="message">
              <para>
              A <see cref="T:System.String"/> that specifies the message to send.
              </para>
              <para>
              Its size must be 125 bytes or less in UTF-8.
              </para>
            </param>
            <exception cref="T:System.InvalidOperationException">
            The session has not started yet.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="message"/> could not be UTF-8-encoded.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            The size of <paramref name="message"/> is greater than 125 bytes.
            </exception>
        </member>
        <member name="M:Sfs2X.WebSocketSharp.Server.WebSocketBehavior.Send(System.Byte[])">
            <summary>
            Sends the specified data to the client for a session.
            </summary>
            <param name="data">
            An array of <see cref="T:System.Byte"/> that specifies the binary data to send.
            </param>
            <exception cref="T:System.InvalidOperationException">
              <para>
              The session has not started yet.
              </para>
              <para>
              -or-
              </para>
              <para>
              The current state of the WebSocket interface is not Open.
              </para>
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="data"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:Sfs2X.WebSocketSharp.Server.WebSocketBehavior.Send(System.IO.FileInfo)">
            <summary>
            Sends the specified file to the client for a session.
            </summary>
            <param name="fileInfo">
              <para>
              A <see cref="T:System.IO.FileInfo"/> that specifies the file to send.
              </para>
              <para>
              The file is sent as the binary data.
              </para>
            </param>
            <exception cref="T:System.InvalidOperationException">
              <para>
              The session has not started yet.
              </para>
              <para>
              -or-
              </para>
              <para>
              The current state of the WebSocket interface is not Open.
              </para>
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="fileInfo"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
              <para>
              The file does not exist.
              </para>
              <para>
              -or-
              </para>
              <para>
              The file could not be opened.
              </para>
            </exception>
        </member>
        <member name="M:Sfs2X.WebSocketSharp.Server.WebSocketBehavior.Send(System.String)">
            <summary>
            Sends the specified data to the client for a session.
            </summary>
            <param name="data">
            A <see cref="T:System.String"/> that specifies the text data to send.
            </param>
            <exception cref="T:System.InvalidOperationException">
              <para>
              The session has not started yet.
              </para>
              <para>
              -or-
              </para>
              <para>
              The current state of the WebSocket interface is not Open.
              </para>
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="data"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="data"/> could not be UTF-8-encoded.
            </exception>
        </member>
        <member name="M:Sfs2X.WebSocketSharp.Server.WebSocketBehavior.Send(System.IO.Stream,System.Int32)">
            <summary>
            Sends the data from the specified stream instance to the client for
            a session.
            </summary>
            <param name="stream">
              <para>
              A <see cref="T:System.IO.Stream"/> instance from which to read the data to send.
              </para>
              <para>
              The data is sent as the binary data.
              </para>
            </param>
            <param name="length">
            An <see cref="T:System.Int32"/> that specifies the number of bytes to send.
            </param>
            <exception cref="T:System.InvalidOperationException">
              <para>
              The session has not started yet.
              </para>
              <para>
              -or-
              </para>
              <para>
              The current state of the WebSocket interface is not Open.
              </para>
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="stream"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
              <para>
              <paramref name="stream"/> cannot be read.
              </para>
              <para>
              -or-
              </para>
              <para>
              <paramref name="length"/> is less than 1.
              </para>
              <para>
              -or-
              </para>
              <para>
              No data could be read from <paramref name="stream"/>.
              </para>
            </exception>
        </member>
        <member name="M:Sfs2X.WebSocketSharp.Server.WebSocketBehavior.SendAsync(System.Byte[],System.Action{System.Boolean})">
            <summary>
            Sends the specified data to the client for a session asynchronously.
            </summary>
            <remarks>
            This method does not wait for the send to be complete.
            </remarks>
            <param name="data">
            An array of <see cref="T:System.Byte"/> that specifies the binary data to send.
            </param>
            <param name="completed">
              <para>
              An <see cref="T:System.Action{bool}"/> delegate.
              </para>
              <para>
              The delegate invokes the method called when the send is complete.
              </para>
              <para>
              The <see cref="T:System.Boolean"/> parameter passed to the method is <c>true</c>
              if the send has successfully done; otherwise, <c>false</c>.
              </para>
              <para>
              <see langword="null"/> if not necessary.
              </para>
            </param>
            <exception cref="T:System.InvalidOperationException">
              <para>
              The session has not started yet.
              </para>
              <para>
              -or-
              </para>
              <para>
              The current state of the WebSocket interface is not Open.
              </para>
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="data"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:Sfs2X.WebSocketSharp.Server.WebSocketBehavior.SendAsync(System.IO.FileInfo,System.Action{System.Boolean})">
            <summary>
            Sends the specified file to the client for a session asynchronously.
            </summary>
            <remarks>
            This method does not wait for the send to be complete.
            </remarks>
            <param name="fileInfo">
              <para>
              A <see cref="T:System.IO.FileInfo"/> that specifies the file to send.
              </para>
              <para>
              The file is sent as the binary data.
              </para>
            </param>
            <param name="completed">
              <para>
              An <see cref="T:System.Action{bool}"/> delegate.
              </para>
              <para>
              The delegate invokes the method called when the send is complete.
              </para>
              <para>
              The <see cref="T:System.Boolean"/> parameter passed to the method is <c>true</c>
              if the send has successfully done; otherwise, <c>false</c>.
              </para>
              <para>
              <see langword="null"/> if not necessary.
              </para>
            </param>
            <exception cref="T:System.InvalidOperationException">
              <para>
              The session has not started yet.
              </para>
              <para>
              -or-
              </para>
              <para>
              The current state of the WebSocket interface is not Open.
              </para>
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="fileInfo"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
              <para>
              The file does not exist.
              </para>
              <para>
              -or-
              </para>
              <para>
              The file could not be opened.
              </para>
            </exception>
        </member>
        <member name="M:Sfs2X.WebSocketSharp.Server.WebSocketBehavior.SendAsync(System.String,System.Action{System.Boolean})">
            <summary>
            Sends the specified data to the client for a session asynchronously.
            </summary>
            <remarks>
            This method does not wait for the send to be complete.
            </remarks>
            <param name="data">
            A <see cref="T:System.String"/> that specifies the text data to send.
            </param>
            <param name="completed">
              <para>
              An <see cref="T:System.Action{bool}"/> delegate.
              </para>
              <para>
              The delegate invokes the method called when the send is complete.
              </para>
              <para>
              The <see cref="T:System.Boolean"/> parameter passed to the method is <c>true</c>
              if the send has successfully done; otherwise, <c>false</c>.
              </para>
              <para>
              <see langword="null"/> if not necessary.
              </para>
            </param>
            <exception cref="T:System.InvalidOperationException">
              <para>
              The session has not started yet.
              </para>
              <para>
              -or-
              </para>
              <para>
              The current state of the WebSocket interface is not Open.
              </para>
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="data"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="data"/> could not be UTF-8-encoded.
            </exception>
        </member>
        <member name="M:Sfs2X.WebSocketSharp.Server.WebSocketBehavior.SendAsync(System.IO.Stream,System.Int32,System.Action{System.Boolean})">
            <summary>
            Sends the data from the specified stream instance to the client for
            a session asynchronously.
            </summary>
            <remarks>
            This method does not wait for the send to be complete.
            </remarks>
            <param name="stream">
              <para>
              A <see cref="T:System.IO.Stream"/> instance from which to read the data to send.
              </para>
              <para>
              The data is sent as the binary data.
              </para>
            </param>
            <param name="length">
            An <see cref="T:System.Int32"/> that specifies the number of bytes to send.
            </param>
            <param name="completed">
              <para>
              An <see cref="T:System.Action{bool}"/> delegate.
              </para>
              <para>
              The delegate invokes the method called when the send is complete.
              </para>
              <para>
              The <see cref="T:System.Boolean"/> parameter passed to the method is <c>true</c>
              if the send has successfully done; otherwise, <c>false</c>.
              </para>
              <para>
              <see langword="null"/> if not necessary.
              </para>
            </param>
            <exception cref="T:System.InvalidOperationException">
              <para>
              The session has not started yet.
              </para>
              <para>
              -or-
              </para>
              <para>
              The current state of the WebSocket interface is not Open.
              </para>
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="stream"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
              <para>
              <paramref name="stream"/> cannot be read.
              </para>
              <para>
              -or-
              </para>
              <para>
              <paramref name="length"/> is less than 1.
              </para>
              <para>
              -or-
              </para>
              <para>
              No data could be read from <paramref name="stream"/>.
              </para>
            </exception>
        </member>
        <member name="P:Sfs2X.WebSocketSharp.Server.WebSocketBehavior.Sfs2X#WebSocketSharp#Server#IWebSocketSession#WebSocket">
            <summary>
            Gets the WebSocket interface for a session.
            </summary>
            <value>
              <para>
              A <see cref="T:Sfs2X.WebSocketSharp.WebSocket"/> that represents
              the interface.
              </para>
              <para>
              <see langword="null"/> if the session has not started yet.
              </para>
            </value>
        </member>
        <member name="T:Sfs2X.WebSocketSharp.Server.WebSocketServer">
            <summary>
            Provides a WebSocket protocol server.
            </summary>
            <remarks>
            This class can provide multiple WebSocket services.
            </remarks>
        </member>
        <member name="M:Sfs2X.WebSocketSharp.Server.WebSocketServer.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Sfs2X.WebSocketSharp.Server.WebSocketServer"/> class.
            </summary>
            <remarks>
            The new instance listens for incoming handshake requests on
            <see cref="F:System.Net.IPAddress.Any"/> and port 80.
            </remarks>
        </member>
        <member name="M:Sfs2X.WebSocketSharp.Server.WebSocketServer.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Sfs2X.WebSocketSharp.Server.WebSocketServer"/> class
            with the specified port.
            </summary>
            <remarks>
              <para>
              The new instance listens for incoming handshake requests on
              <see cref="F:System.Net.IPAddress.Any"/> and <paramref name="port"/>.
              </para>
              <para>
              It provides secure connections if <paramref name="port"/> is 443.
              </para>
            </remarks>
            <param name="port">
            An <see cref="T:System.Int32"/> that specifies the number of the port on which
            to listen.
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="port"/> is less than 1 or greater than 65535.
            </exception>
        </member>
        <member name="M:Sfs2X.WebSocketSharp.Server.WebSocketServer.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Sfs2X.WebSocketSharp.Server.WebSocketServer"/> class
            with the specified URL.
            </summary>
            <remarks>
              <para>
              The new instance listens for incoming handshake requests on
              the IP address and port of <paramref name="url"/>.
              </para>
              <para>
              Either port 80 or 443 is used if <paramref name="url"/> includes
              no port. Port 443 is used if the scheme of <paramref name="url"/>
              is wss; otherwise, port 80 is used.
              </para>
              <para>
              The new instance provides secure connections if the scheme of
              <paramref name="url"/> is wss.
              </para>
            </remarks>
            <param name="url">
            A <see cref="T:System.String"/> that specifies the WebSocket URL of the server.
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="url"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
              <para>
              <paramref name="url"/> is an empty string.
              </para>
              <para>
              -or-
              </para>
              <para>
              <paramref name="url"/> is invalid.
              </para>
            </exception>
        </member>
        <member name="M:Sfs2X.WebSocketSharp.Server.WebSocketServer.#ctor(System.Int32,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Sfs2X.WebSocketSharp.Server.WebSocketServer"/> class
            with the specified port and boolean if secure or not.
            </summary>
            <remarks>
            The new instance listens for incoming handshake requests on
            <see cref="F:System.Net.IPAddress.Any"/> and <paramref name="port"/>.
            </remarks>
            <param name="port">
            An <see cref="T:System.Int32"/> that specifies the number of the port on which
            to listen.
            </param>
            <param name="secure">
            A <see cref="T:System.Boolean"/>: <c>true</c> if the new instance provides
            secure connections; otherwise, <c>false</c>.
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="port"/> is less than 1 or greater than 65535.
            </exception>
        </member>
        <member name="M:Sfs2X.WebSocketSharp.Server.WebSocketServer.#ctor(System.Net.IPAddress,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Sfs2X.WebSocketSharp.Server.WebSocketServer"/> class
            with the specified IP address and port.
            </summary>
            <remarks>
              <para>
              The new instance listens for incoming handshake requests on
              <paramref name="address"/> and <paramref name="port"/>.
              </para>
              <para>
              It provides secure connections if <paramref name="port"/> is 443.
              </para>
            </remarks>
            <param name="address">
            A <see cref="T:System.Net.IPAddress"/> that specifies the local IP
            address on which to listen.
            </param>
            <param name="port">
            An <see cref="T:System.Int32"/> that specifies the number of the port on which
            to listen.
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="address"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="address"/> is not a local IP address.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="port"/> is less than 1 or greater than 65535.
            </exception>
        </member>
        <member name="M:Sfs2X.WebSocketSharp.Server.WebSocketServer.#ctor(System.Net.IPAddress,System.Int32,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Sfs2X.WebSocketSharp.Server.WebSocketServer"/> class
            with the specified IP address, port, and boolean if secure or not.
            </summary>
            <remarks>
            The new instance listens for incoming handshake requests on
            <paramref name="address"/> and <paramref name="port"/>.
            </remarks>
            <param name="address">
            A <see cref="T:System.Net.IPAddress"/> that specifies the local IP
            address on which to listen.
            </param>
            <param name="port">
            An <see cref="T:System.Int32"/> that specifies the number of the port on which
            to listen.
            </param>
            <param name="secure">
            A <see cref="T:System.Boolean"/>: <c>true</c> if the new instance provides
            secure connections; otherwise, <c>false</c>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="address"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="address"/> is not a local IP address.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="port"/> is less than 1 or greater than 65535.
            </exception>
        </member>
        <member name="P:Sfs2X.WebSocketSharp.Server.WebSocketServer.Address">
            <summary>
            Gets the IP address of the server.
            </summary>
            <value>
            A <see cref="T:System.Net.IPAddress"/> that represents the local IP
            address on which to listen for incoming handshake requests.
            </value>
        </member>
        <member name="P:Sfs2X.WebSocketSharp.Server.WebSocketServer.AuthenticationSchemes">
            <summary>
            Gets or sets the scheme used to authenticate the clients.
            </summary>
            <remarks>
            The set operation works if the current state of the server is
            Ready or Stop.
            </remarks>
            <value>
              <para>
              One of the <see cref="T:Sfs2X.WebSocketSharp.Net.AuthenticationSchemes"/>
              enum values.
              </para>
              <para>
              It represents the scheme used to authenticate the clients.
              </para>
              <para>
              The default value is
              <see cref="F:Sfs2X.WebSocketSharp.Net.AuthenticationSchemes.Anonymous"/>.
              </para>
            </value>
        </member>
        <member name="P:Sfs2X.WebSocketSharp.Server.WebSocketServer.IsListening">
            <summary>
            Gets a value indicating whether the server has started.
            </summary>
            <value>
            <c>true</c> if the server has started; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Sfs2X.WebSocketSharp.Server.WebSocketServer.IsSecure">
            <summary>
            Gets a value indicating whether the server provides secure connections.
            </summary>
            <value>
            <c>true</c> if the server provides secure connections; otherwise,
            <c>false</c>.
            </value>
        </member>
        <member name="P:Sfs2X.WebSocketSharp.Server.WebSocketServer.KeepClean">
            <summary>
            Gets or sets a value indicating whether the server cleans up
            the inactive sessions periodically.
            </summary>
            <remarks>
            The set operation works if the current state of the server is
            Ready or Stop.
            </remarks>
            <value>
              <para>
              <c>true</c> if the server cleans up the inactive sessions
              every 60 seconds; otherwise, <c>false</c>.
              </para>
              <para>
              The default value is <c>true</c>.
              </para>
            </value>
        </member>
        <member name="P:Sfs2X.WebSocketSharp.Server.WebSocketServer.Log">
            <summary>
            Gets the logging function for the server.
            </summary>
            <remarks>
            The default logging level is <see cref="F:Sfs2X.WebSocketSharp.LogLevel.Error"/>.
            </remarks>
            <value>
            A <see cref="T:Sfs2X.WebSocketSharp.Logger"/> that provides the logging function.
            </value>
        </member>
        <member name="P:Sfs2X.WebSocketSharp.Server.WebSocketServer.Port">
            <summary>
            Gets the port of the server.
            </summary>
            <value>
            An <see cref="T:System.Int32"/> that represents the number of the port on which
            to listen for incoming handshake requests.
            </value>
        </member>
        <member name="P:Sfs2X.WebSocketSharp.Server.WebSocketServer.Realm">
            <summary>
            Gets or sets the name of the realm associated with the server.
            </summary>
            <remarks>
            The set operation works if the current state of the server is
            Ready or Stop.
            </remarks>
            <value>
              <para>
              A <see cref="T:System.String"/> that represents the name of the realm.
              </para>
              <para>
              "SECRET AREA" is used as the name of the realm if the value is
              <see langword="null"/> or an empty string.
              </para>
              <para>
              The default value is <see langword="null"/>.
              </para>
            </value>
        </member>
        <member name="P:Sfs2X.WebSocketSharp.Server.WebSocketServer.ReuseAddress">
            <summary>
            Gets or sets a value indicating whether the server is allowed to
            be bound to an address that is already in use.
            </summary>
            <remarks>
              <para>
              You should set this property to <c>true</c> if you would like to
              resolve to wait for socket in TIME_WAIT state.
              </para>
              <para>
              The set operation works if the current state of the server is
              Ready or Stop.
              </para>
            </remarks>
            <value>
              <para>
              <c>true</c> if the server is allowed to be bound to an address
              that is already in use; otherwise, <c>false</c>.
              </para>
              <para>
              The default value is <c>false</c>.
              </para>
            </value>
        </member>
        <member name="P:Sfs2X.WebSocketSharp.Server.WebSocketServer.SslConfiguration">
            <summary>
            Gets the configuration for secure connection.
            </summary>
            <remarks>
            The configuration will be referenced when attempts to start,
            so it must be configured before the start method is called.
            </remarks>
            <value>
            A <see cref="T:Sfs2X.WebSocketSharp.Net.ServerSslConfiguration"/> that represents
            the configuration used to provide secure connections.
            </value>
            <exception cref="T:System.InvalidOperationException">
            The server does not provide secure connections.
            </exception>
        </member>
        <member name="P:Sfs2X.WebSocketSharp.Server.WebSocketServer.UserCredentialsFinder">
            <summary>
            Gets or sets the delegate used to find the credentials for an identity.
            </summary>
            <remarks>
            The set operation works if the current state of the server is
            Ready or Stop.
            </remarks>
            <value>
              <para>
              A <see cref="T:System.Func{IIdentity, NetworkCredential}"/>
              delegate.
              </para>
              <para>
              The delegate invokes the method called when the server finds
              the credentials used to authenticate a client.
              </para>
              <para>
              The method must return <see langword="null"/> if the credentials
              are not found.
              </para>
              <para>
              <see langword="null"/> if not necessary.
              </para>
              <para>
              The default value is <see langword="null"/>.
              </para>
            </value>
        </member>
        <member name="P:Sfs2X.WebSocketSharp.Server.WebSocketServer.WaitTime">
            <summary>
            Gets or sets the time to wait for the response to the WebSocket
            Ping or Close.
            </summary>
            <remarks>
            The set operation works if the current state of the server is
            Ready or Stop.
            </remarks>
            <value>
              <para>
              A <see cref="T:System.TimeSpan"/> that represents the time to wait for
              the response.
              </para>
              <para>
              The default value is the same as 1 second.
              </para>
            </value>
            <exception cref="T:System.ArgumentOutOfRangeException">
            The value specified for a set operation is zero or less.
            </exception>
        </member>
        <member name="P:Sfs2X.WebSocketSharp.Server.WebSocketServer.WebSocketServices">
            <summary>
            Gets the management function for the WebSocket services provided by
            the server.
            </summary>
            <value>
            A <see cref="T:Sfs2X.WebSocketSharp.Server.WebSocketServiceManager"/> that manages the WebSocket
            services provided by the server.
            </value>
        </member>
        <member name="M:Sfs2X.WebSocketSharp.Server.WebSocketServer.AddWebSocketService``1(System.String)">
            <summary>
            Adds a WebSocket service with the specified behavior and path.
            </summary>
            <param name="path">
              <para>
              A <see cref="T:System.String"/> that specifies an absolute path to
              the service to add.
              </para>
              <para>
              / is trimmed from the end of the string if present.
              </para>
            </param>
            <typeparam name="TBehavior">
              <para>
              The type of the behavior for the service.
              </para>
              <para>
              It must inherit the <see cref="T:Sfs2X.WebSocketSharp.Server.WebSocketBehavior"/> class.
              </para>
              <para>
              Also it must have a public parameterless constructor.
              </para>
            </typeparam>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="path"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
              <para>
              <paramref name="path"/> is an empty string.
              </para>
              <para>
              -or-
              </para>
              <para>
              <paramref name="path"/> is not an absolute path.
              </para>
              <para>
              -or-
              </para>
              <para>
              <paramref name="path"/> includes either or both
              query and fragment components.
              </para>
              <para>
              -or-
              </para>
              <para>
              <paramref name="path"/> is already in use.
              </para>
            </exception>
        </member>
        <member name="M:Sfs2X.WebSocketSharp.Server.WebSocketServer.AddWebSocketService``1(System.String,System.Action{``0})">
            <summary>
            Adds a WebSocket service with the specified behavior, path,
            and initializer.
            </summary>
            <param name="path">
              <para>
              A <see cref="T:System.String"/> that specifies an absolute path to
              the service to add.
              </para>
              <para>
              / is trimmed from the end of the string if present.
              </para>
            </param>
            <param name="initializer">
              <para>
              An <see cref="T:System.Action{TBehavior}"/> delegate.
              </para>
              <para>
              The delegate invokes the method called when the service
              initializes a new session instance.
              </para>
              <para>
              <see langword="null"/> if not necessary.
              </para>
            </param>
            <typeparam name="TBehavior">
              <para>
              The type of the behavior for the service.
              </para>
              <para>
              It must inherit the <see cref="T:Sfs2X.WebSocketSharp.Server.WebSocketBehavior"/> class.
              </para>
              <para>
              Also it must have a public parameterless constructor.
              </para>
            </typeparam>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="path"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
              <para>
              <paramref name="path"/> is an empty string.
              </para>
              <para>
              -or-
              </para>
              <para>
              <paramref name="path"/> is not an absolute path.
              </para>
              <para>
              -or-
              </para>
              <para>
              <paramref name="path"/> includes either or both
              query and fragment components.
              </para>
              <para>
              -or-
              </para>
              <para>
              <paramref name="path"/> is already in use.
              </para>
            </exception>
        </member>
        <member name="M:Sfs2X.WebSocketSharp.Server.WebSocketServer.RemoveWebSocketService(System.String)">
            <summary>
            Removes a WebSocket service with the specified path.
            </summary>
            <remarks>
            The service is stopped with close status 1001 (going away)
            if the current state of the service is Start.
            </remarks>
            <returns>
            <c>true</c> if the service is successfully found and removed;
            otherwise, <c>false</c>.
            </returns>
            <param name="path">
              <para>
              A <see cref="T:System.String"/> that specifies an absolute path to
              the service to remove.
              </para>
              <para>
              / is trimmed from the end of the string if present.
              </para>
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="path"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
              <para>
              <paramref name="path"/> is an empty string.
              </para>
              <para>
              -or-
              </para>
              <para>
              <paramref name="path"/> is not an absolute path.
              </para>
              <para>
              -or-
              </para>
              <para>
              <paramref name="path"/> includes either or both
              query and fragment components.
              </para>
            </exception>
        </member>
        <member name="M:Sfs2X.WebSocketSharp.Server.WebSocketServer.Start">
            <summary>
            Starts receiving incoming handshake requests.
            </summary>
            <remarks>
            This method works if the current state of the server is Ready or Stop.
            </remarks>
            <exception cref="T:System.InvalidOperationException">
              <para>
              There is no server certificate for secure connection.
              </para>
              <para>
              -or-
              </para>
              <para>
              The underlying <see cref="T:System.Net.Sockets.TcpListener"/> has failed to start.
              </para>
            </exception>
        </member>
        <member name="M:Sfs2X.WebSocketSharp.Server.WebSocketServer.Stop">
            <summary>
            Stops receiving incoming handshake requests.
            </summary>
            <remarks>
            This method works if the current state of the server is Start.
            </remarks>
        </member>
        <member name="T:Sfs2X.WebSocketSharp.Server.WebSocketServiceHost">
            <summary>
            Exposes the methods and properties used to access the information in
            a WebSocket service provided by the <see cref="T:Sfs2X.WebSocketSharp.Server.WebSocketServer"/> or
            <see cref="T:Sfs2X.WebSocketSharp.Server.HttpServer"/> class.
            </summary>
            <remarks>
            This class is an abstract class.
            </remarks>
        </member>
        <member name="M:Sfs2X.WebSocketSharp.Server.WebSocketServiceHost.#ctor(System.String,Sfs2X.WebSocketSharp.Logger)">
            <summary>
            Initializes a new instance of the <see cref="T:Sfs2X.WebSocketSharp.Server.WebSocketServiceHost"/>
            class with the specified path and logging function.
            </summary>
            <param name="path">
            A <see cref="T:System.String"/> that specifies the absolute path to
            the service.
            </param>
            <param name="log">
            A <see cref="T:Sfs2X.WebSocketSharp.Logger"/> that specifies the logging function for
            the service.
            </param>
        </member>
        <member name="P:Sfs2X.WebSocketSharp.Server.WebSocketServiceHost.Log">
            <summary>
            Gets the logging function for the service.
            </summary>
            <value>
            A <see cref="T:Sfs2X.WebSocketSharp.Logger"/> that provides the logging function.
            </value>
        </member>
        <member name="P:Sfs2X.WebSocketSharp.Server.WebSocketServiceHost.KeepClean">
            <summary>
            Gets or sets a value indicating whether the service cleans up
            the inactive sessions periodically.
            </summary>
            <remarks>
            The set operation works if the current state of the service is
            Ready or Stop.
            </remarks>
            <value>
            <c>true</c> if the service cleans up the inactive sessions every
            60 seconds; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Sfs2X.WebSocketSharp.Server.WebSocketServiceHost.Path">
            <summary>
            Gets the path to the service.
            </summary>
            <value>
            A <see cref="T:System.String"/> that represents the absolute path to
            the service.
            </value>
        </member>
        <member name="P:Sfs2X.WebSocketSharp.Server.WebSocketServiceHost.Sessions">
            <summary>
            Gets the management function for the sessions in the service.
            </summary>
            <value>
            A <see cref="T:Sfs2X.WebSocketSharp.Server.WebSocketSessionManager"/> that manages the sessions in
            the service.
            </value>
        </member>
        <member name="P:Sfs2X.WebSocketSharp.Server.WebSocketServiceHost.BehaviorType">
            <summary>
            Gets the type of the behavior of the service.
            </summary>
            <value>
            A <see cref="T:System.Type"/> that represents the type of the behavior of
            the service.
            </value>
        </member>
        <member name="P:Sfs2X.WebSocketSharp.Server.WebSocketServiceHost.WaitTime">
            <summary>
            Gets or sets the time to wait for the response to the WebSocket
            Ping or Close.
            </summary>
            <remarks>
            The set operation works if the current state of the service is
            Ready or Stop.
            </remarks>
            <value>
            A <see cref="T:System.TimeSpan"/> that represents the time to wait for
            the response.
            </value>
            <exception cref="T:System.ArgumentOutOfRangeException">
            The value specified for a set operation is zero or less.
            </exception>
        </member>
        <member name="M:Sfs2X.WebSocketSharp.Server.WebSocketServiceHost.CreateSession">
            <summary>
            Creates a new session for the service.
            </summary>
            <returns>
            A <see cref="T:Sfs2X.WebSocketSharp.Server.WebSocketBehavior"/> instance that represents
            the new session.
            </returns>
        </member>
        <member name="T:Sfs2X.WebSocketSharp.Server.WebSocketServiceManager">
            <summary>
            Provides the management function for the WebSocket services.
            </summary>
            <remarks>
            This class manages the WebSocket services provided by the
            <see cref="T:Sfs2X.WebSocketSharp.Server.WebSocketServer"/> or <see cref="T:Sfs2X.WebSocketSharp.Server.HttpServer"/> class.
            </remarks>
        </member>
        <member name="P:Sfs2X.WebSocketSharp.Server.WebSocketServiceManager.Count">
            <summary>
            Gets the number of the WebSocket services.
            </summary>
            <value>
            An <see cref="T:System.Int32"/> that represents the number of the services.
            </value>
        </member>
        <member name="P:Sfs2X.WebSocketSharp.Server.WebSocketServiceManager.Hosts">
            <summary>
            Gets the service host instances for the WebSocket services.
            </summary>
            <value>
              <para>
              An <c>IEnumerable&lt;WebSocketServiceHost&gt;</c> instance.
              </para>
              <para>
              It provides an enumerator which supports the iteration over
              the collection of the service host instances.
              </para>
            </value>
        </member>
        <member name="P:Sfs2X.WebSocketSharp.Server.WebSocketServiceManager.Item(System.String)">
            <summary>
            Gets the service host instance for a WebSocket service with
            the specified path.
            </summary>
            <value>
              <para>
              A <see cref="T:Sfs2X.WebSocketSharp.Server.WebSocketServiceHost"/> instance or
              <see langword="null"/> if not found.
              </para>
              <para>
              The service host instance provides the function to access
              the information in the service.
              </para>
            </value>
            <param name="path">
              <para>
              A <see cref="T:System.String"/> that specifies an absolute path to
              the service to find.
              </para>
              <para>
              / is trimmed from the end of the string if present.
              </para>
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="path"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
              <para>
              <paramref name="path"/> is an empty string.
              </para>
              <para>
              -or-
              </para>
              <para>
              <paramref name="path"/> is not an absolute path.
              </para>
              <para>
              -or-
              </para>
              <para>
              <paramref name="path"/> includes either or both
              query and fragment components.
              </para>
            </exception>
        </member>
        <member name="P:Sfs2X.WebSocketSharp.Server.WebSocketServiceManager.KeepClean">
            <summary>
            Gets or sets a value indicating whether the inactive sessions in
            the WebSocket services are cleaned up periodically.
            </summary>
            <remarks>
            The set operation works if the current state of the server is
            Ready or Stop.
            </remarks>
            <value>
              <para>
              <c>true</c> if the inactive sessions are cleaned up every 60
              seconds; otherwise, <c>false</c>.
              </para>
              <para>
              The default value is <c>true</c>.
              </para>
            </value>
        </member>
        <member name="P:Sfs2X.WebSocketSharp.Server.WebSocketServiceManager.Paths">
            <summary>
            Gets the paths for the WebSocket services.
            </summary>
            <value>
              <para>
              An <c>IEnumerable&lt;string&gt;</c> instance.
              </para>
              <para>
              It provides an enumerator which supports the iteration over
              the collection of the paths.
              </para>
            </value>
        </member>
        <member name="P:Sfs2X.WebSocketSharp.Server.WebSocketServiceManager.WaitTime">
            <summary>
            Gets or sets the time to wait for the response to the WebSocket
            Ping or Close.
            </summary>
            <remarks>
            The set operation works if the current state of the server is
            Ready or Stop.
            </remarks>
            <value>
              <para>
              A <see cref="T:System.TimeSpan"/> that represents the time to wait for
              the response.
              </para>
              <para>
              The default value is the same as 1 second.
              </para>
            </value>
            <exception cref="T:System.ArgumentOutOfRangeException">
            The value specified for a set operation is zero or less.
            </exception>
        </member>
        <member name="M:Sfs2X.WebSocketSharp.Server.WebSocketServiceManager.AddService``1(System.String,System.Action{``0})">
            <summary>
            Adds a WebSocket service with the specified behavior, path,
            and initializer.
            </summary>
            <param name="path">
              <para>
              A <see cref="T:System.String"/> that specifies an absolute path to
              the service to add.
              </para>
              <para>
              / is trimmed from the end of the string if present.
              </para>
            </param>
            <param name="initializer">
              <para>
              An <see cref="T:System.Action{TBehavior}"/> delegate.
              </para>
              <para>
              The delegate invokes the method called when the service
              initializes a new session instance.
              </para>
              <para>
              <see langword="null"/> if not necessary.
              </para>
            </param>
            <typeparam name="TBehavior">
              <para>
              The type of the behavior for the service.
              </para>
              <para>
              It must inherit the <see cref="T:Sfs2X.WebSocketSharp.Server.WebSocketBehavior"/> class.
              </para>
              <para>
              Also it must have a public parameterless constructor.
              </para>
            </typeparam>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="path"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
              <para>
              <paramref name="path"/> is an empty string.
              </para>
              <para>
              -or-
              </para>
              <para>
              <paramref name="path"/> is not an absolute path.
              </para>
              <para>
              -or-
              </para>
              <para>
              <paramref name="path"/> includes either or both
              query and fragment components.
              </para>
              <para>
              -or-
              </para>
              <para>
              <paramref name="path"/> is already in use.
              </para>
            </exception>
        </member>
        <member name="M:Sfs2X.WebSocketSharp.Server.WebSocketServiceManager.Clear">
            <summary>
            Removes all WebSocket services managed by the manager.
            </summary>
            <remarks>
            Each service is stopped with close status 1001 (going away)
            if the current state of the service is Start.
            </remarks>
        </member>
        <member name="M:Sfs2X.WebSocketSharp.Server.WebSocketServiceManager.RemoveService(System.String)">
            <summary>
            Removes a WebSocket service with the specified path.
            </summary>
            <remarks>
            The service is stopped with close status 1001 (going away)
            if the current state of the service is Start.
            </remarks>
            <returns>
            <c>true</c> if the service is successfully found and removed;
            otherwise, <c>false</c>.
            </returns>
            <param name="path">
              <para>
              A <see cref="T:System.String"/> that specifies an absolute path to
              the service to remove.
              </para>
              <para>
              / is trimmed from the end of the string if present.
              </para>
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="path"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
              <para>
              <paramref name="path"/> is an empty string.
              </para>
              <para>
              -or-
              </para>
              <para>
              <paramref name="path"/> is not an absolute path.
              </para>
              <para>
              -or-
              </para>
              <para>
              <paramref name="path"/> includes either or both
              query and fragment components.
              </para>
            </exception>
        </member>
        <member name="M:Sfs2X.WebSocketSharp.Server.WebSocketServiceManager.TryGetServiceHost(System.String,Sfs2X.WebSocketSharp.Server.WebSocketServiceHost@)">
            <summary>
            Tries to get the service host instance for a WebSocket service with
            the specified path.
            </summary>
            <returns>
            <c>true</c> if the service is successfully found; otherwise,
            <c>false</c>.
            </returns>
            <param name="path">
              <para>
              A <see cref="T:System.String"/> that specifies an absolute path to
              the service to find.
              </para>
              <para>
              / is trimmed from the end of the string if present.
              </para>
            </param>
            <param name="host">
              <para>
              When this method returns, a <see cref="T:Sfs2X.WebSocketSharp.Server.WebSocketServiceHost"/>
              instance or <see langword="null"/> if not found.
              </para>
              <para>
              The service host instance provides the function to access
              the information in the service.
              </para>
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="path"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
              <para>
              <paramref name="path"/> is an empty string.
              </para>
              <para>
              -or-
              </para>
              <para>
              <paramref name="path"/> is not an absolute path.
              </para>
              <para>
              -or-
              </para>
              <para>
              <paramref name="path"/> includes either or both
              query and fragment components.
              </para>
            </exception>
        </member>
        <member name="T:Sfs2X.WebSocketSharp.Server.WebSocketSessionManager">
            <summary>
            Provides the management function for the sessions in a WebSocket service.
            </summary>
            <remarks>
            This class manages the sessions in a WebSocket service provided by the
            <see cref="T:Sfs2X.WebSocketSharp.Server.WebSocketServer"/> or <see cref="T:Sfs2X.WebSocketSharp.Server.HttpServer"/> class.
            </remarks>
        </member>
        <member name="P:Sfs2X.WebSocketSharp.Server.WebSocketSessionManager.ActiveIDs">
            <summary>
            Gets the IDs for the active sessions in the WebSocket service.
            </summary>
            <value>
              <para>
              An <c>IEnumerable&lt;string&gt;</c> instance.
              </para>
              <para>
              It provides an enumerator which supports the iteration over
              the collection of the IDs for the active sessions.
              </para>
            </value>
        </member>
        <member name="P:Sfs2X.WebSocketSharp.Server.WebSocketSessionManager.Count">
            <summary>
            Gets the number of the sessions in the WebSocket service.
            </summary>
            <value>
            An <see cref="T:System.Int32"/> that represents the number of the sessions.
            </value>
        </member>
        <member name="P:Sfs2X.WebSocketSharp.Server.WebSocketSessionManager.IDs">
            <summary>
            Gets the IDs for the sessions in the WebSocket service.
            </summary>
            <value>
              <para>
              An <c>IEnumerable&lt;string&gt;</c> instance.
              </para>
              <para>
              It provides an enumerator which supports the iteration over
              the collection of the IDs for the sessions.
              </para>
            </value>
        </member>
        <member name="P:Sfs2X.WebSocketSharp.Server.WebSocketSessionManager.InactiveIDs">
            <summary>
            Gets the IDs for the inactive sessions in the WebSocket service.
            </summary>
            <value>
              <para>
              An <c>IEnumerable&lt;string&gt;</c> instance.
              </para>
              <para>
              It provides an enumerator which supports the iteration over
              the collection of the IDs for the inactive sessions.
              </para>
            </value>
        </member>
        <member name="P:Sfs2X.WebSocketSharp.Server.WebSocketSessionManager.Item(System.String)">
            <summary>
            Gets the session instance with the specified ID.
            </summary>
            <value>
              <para>
              A <see cref="T:Sfs2X.WebSocketSharp.Server.IWebSocketSession"/> instance or <see langword="null"/>
              if not found.
              </para>
              <para>
              The session instance provides the function to access the information
              in the session.
              </para>
            </value>
            <param name="id">
            A <see cref="T:System.String"/> that specifies the ID of the session to find.
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="id"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="id"/> is an empty string.
            </exception>
        </member>
        <member name="P:Sfs2X.WebSocketSharp.Server.WebSocketSessionManager.KeepClean">
            <summary>
            Gets or sets a value indicating whether the inactive sessions in
            the WebSocket service are cleaned up periodically.
            </summary>
            <remarks>
            The set operation works if the current state of the service is
            Ready or Stop.
            </remarks>
            <value>
            <c>true</c> if the inactive sessions are cleaned up every 60 seconds;
            otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Sfs2X.WebSocketSharp.Server.WebSocketSessionManager.Sessions">
            <summary>
            Gets the session instances in the WebSocket service.
            </summary>
            <value>
              <para>
              An <c>IEnumerable&lt;IWebSocketSession&gt;</c> instance.
              </para>
              <para>
              It provides an enumerator which supports the iteration over
              the collection of the session instances.
              </para>
            </value>
        </member>
        <member name="P:Sfs2X.WebSocketSharp.Server.WebSocketSessionManager.WaitTime">
            <summary>
            Gets or sets the time to wait for the response to the WebSocket
            Ping or Close.
            </summary>
            <remarks>
            The set operation works if the current state of the service is
            Ready or Stop.
            </remarks>
            <value>
            A <see cref="T:System.TimeSpan"/> that represents the time to wait for
            the response.
            </value>
            <exception cref="T:System.ArgumentOutOfRangeException">
            The value specified for a set operation is zero or less.
            </exception>
        </member>
        <member name="M:Sfs2X.WebSocketSharp.Server.WebSocketSessionManager.Broadcast(System.Byte[])">
            <summary>
            Sends the specified data to every client in the WebSocket service.
            </summary>
            <param name="data">
            An array of <see cref="T:System.Byte"/> that specifies the binary data to send.
            </param>
            <exception cref="T:System.InvalidOperationException">
            The current state of the service is not Start.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="data"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:Sfs2X.WebSocketSharp.Server.WebSocketSessionManager.Broadcast(System.String)">
            <summary>
            Sends the specified data to every client in the WebSocket service.
            </summary>
            <param name="data">
            A <see cref="T:System.String"/> that specifies the text data to send.
            </param>
            <exception cref="T:System.InvalidOperationException">
            The current state of the service is not Start.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="data"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="data"/> could not be UTF-8-encoded.
            </exception>
        </member>
        <member name="M:Sfs2X.WebSocketSharp.Server.WebSocketSessionManager.Broadcast(System.IO.Stream,System.Int32)">
            <summary>
            Sends the data from the specified stream instance to every client in
            the WebSocket service.
            </summary>
            <param name="stream">
              <para>
              A <see cref="T:System.IO.Stream"/> instance from which to read the data to send.
              </para>
              <para>
              The data is sent as the binary data.
              </para>
            </param>
            <param name="length">
            An <see cref="T:System.Int32"/> that specifies the number of bytes to send.
            </param>
            <exception cref="T:System.InvalidOperationException">
            The current state of the service is not Start.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="stream"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
              <para>
              <paramref name="stream"/> cannot be read.
              </para>
              <para>
              -or-
              </para>
              <para>
              <paramref name="length"/> is less than 1.
              </para>
              <para>
              -or-
              </para>
              <para>
              No data could be read from <paramref name="stream"/>.
              </para>
            </exception>
        </member>
        <member name="M:Sfs2X.WebSocketSharp.Server.WebSocketSessionManager.BroadcastAsync(System.Byte[],System.Action)">
            <summary>
            Sends the specified data to every client in the WebSocket service
            asynchronously.
            </summary>
            <remarks>
            This method does not wait for the send to be complete.
            </remarks>
            <param name="data">
            An array of <see cref="T:System.Byte"/> that specifies the binary data to send.
            </param>
            <param name="completed">
              <para>
              An <see cref="T:System.Action"/> delegate.
              </para>
              <para>
              The delegate invokes the method called when the send is complete.
              </para>
              <para>
              <see langword="null"/> if not necessary.
              </para>
            </param>
            <exception cref="T:System.InvalidOperationException">
            The current state of the service is not Start.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="data"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:Sfs2X.WebSocketSharp.Server.WebSocketSessionManager.BroadcastAsync(System.String,System.Action)">
            <summary>
            Sends the specified data to every client in the WebSocket service
            asynchronously.
            </summary>
            <remarks>
            This method does not wait for the send to be complete.
            </remarks>
            <param name="data">
            A <see cref="T:System.String"/> that specifies the text data to send.
            </param>
            <param name="completed">
              <para>
              An <see cref="T:System.Action"/> delegate.
              </para>
              <para>
              The delegate invokes the method called when the send is complete.
              </para>
              <para>
              <see langword="null"/> if not necessary.
              </para>
            </param>
            <exception cref="T:System.InvalidOperationException">
            The current state of the service is not Start.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="data"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="data"/> could not be UTF-8-encoded.
            </exception>
        </member>
        <member name="M:Sfs2X.WebSocketSharp.Server.WebSocketSessionManager.BroadcastAsync(System.IO.Stream,System.Int32,System.Action)">
            <summary>
            Sends the data from the specified stream instance to every client in
            the WebSocket service asynchronously.
            </summary>
            <remarks>
            This method does not wait for the send to be complete.
            </remarks>
            <param name="stream">
              <para>
              A <see cref="T:System.IO.Stream"/> instance from which to read the data to send.
              </para>
              <para>
              The data is sent as the binary data.
              </para>
            </param>
            <param name="length">
            An <see cref="T:System.Int32"/> that specifies the number of bytes to send.
            </param>
            <param name="completed">
              <para>
              An <see cref="T:System.Action"/> delegate.
              </para>
              <para>
              The delegate invokes the method called when the send is complete.
              </para>
              <para>
              <see langword="null"/> if not necessary.
              </para>
            </param>
            <exception cref="T:System.InvalidOperationException">
            The current state of the service is not Start.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="stream"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
              <para>
              <paramref name="stream"/> cannot be read.
              </para>
              <para>
              -or-
              </para>
              <para>
              <paramref name="length"/> is less than 1.
              </para>
              <para>
              -or-
              </para>
              <para>
              No data could be read from <paramref name="stream"/>.
              </para>
            </exception>
        </member>
        <member name="M:Sfs2X.WebSocketSharp.Server.WebSocketSessionManager.CloseSession(System.String)">
            <summary>
            Closes the session with the specified ID.
            </summary>
            <param name="id">
            A <see cref="T:System.String"/> that specifies the ID of the session to close.
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="id"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="id"/> is an empty string.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            The session could not be found.
            </exception>
        </member>
        <member name="M:Sfs2X.WebSocketSharp.Server.WebSocketSessionManager.CloseSession(System.String,System.UInt16,System.String)">
            <summary>
            Closes the session with the specified ID, code, and reason.
            </summary>
            <param name="id">
            A <see cref="T:System.String"/> that specifies the ID of the session to close.
            </param>
            <param name="code">
              <para>
              A <see cref="T:System.UInt16"/> that specifies the status code indicating
              the reason for the close.
              </para>
              <para>
              The status codes are defined in
              <see href="http://tools.ietf.org/html/rfc6455#section-7.4">
              Section 7.4</see> of RFC 6455.
              </para>
            </param>
            <param name="reason">
              <para>
              A <see cref="T:System.String"/> that specifies the reason for the close.
              </para>
              <para>
              Its size must be 123 bytes or less in UTF-8.
              </para>
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="id"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
              <para>
              <paramref name="id"/> is an empty string.
              </para>
              <para>
              -or-
              </para>
              <para>
              <paramref name="code"/> is 1010 (mandatory extension).
              </para>
              <para>
              -or-
              </para>
              <para>
              <paramref name="code"/> is 1005 (no status) and
              <paramref name="reason"/> is specified.
              </para>
              <para>
              -or-
              </para>
              <para>
              <paramref name="reason"/> could not be UTF-8-encoded.
              </para>
            </exception>
            <exception cref="T:System.InvalidOperationException">
            The session could not be found.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
              <para>
              <paramref name="code"/> is less than 1000 or greater than 4999.
              </para>
              <para>
              -or-
              </para>
              <para>
              The size of <paramref name="reason"/> is greater than 123 bytes.
              </para>
            </exception>
        </member>
        <member name="M:Sfs2X.WebSocketSharp.Server.WebSocketSessionManager.CloseSession(System.String,Sfs2X.WebSocketSharp.CloseStatusCode,System.String)">
            <summary>
            Closes the session with the specified ID, code, and reason.
            </summary>
            <param name="id">
            A <see cref="T:System.String"/> that specifies the ID of the session to close.
            </param>
            <param name="code">
              <para>
              One of the <see cref="T:Sfs2X.WebSocketSharp.CloseStatusCode"/> enum values.
              </para>
              <para>
              It specifies the status code indicating the reason for the close.
              </para>
            </param>
            <param name="reason">
              <para>
              A <see cref="T:System.String"/> that specifies the reason for the close.
              </para>
              <para>
              Its size must be 123 bytes or less in UTF-8.
              </para>
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="id"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
              <para>
              <paramref name="id"/> is an empty string.
              </para>
              <para>
              -or-
              </para>
              <para>
              <paramref name="code"/> is <see cref="F:Sfs2X.WebSocketSharp.CloseStatusCode.MandatoryExtension"/>.
              </para>
              <para>
              -or-
              </para>
              <para>
              <paramref name="code"/> is <see cref="F:Sfs2X.WebSocketSharp.CloseStatusCode.NoStatus"/> and
              <paramref name="reason"/> is specified.
              </para>
              <para>
              -or-
              </para>
              <para>
              <paramref name="reason"/> could not be UTF-8-encoded.
              </para>
            </exception>
            <exception cref="T:System.InvalidOperationException">
            The session could not be found.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            The size of <paramref name="reason"/> is greater than 123 bytes.
            </exception>
        </member>
        <member name="M:Sfs2X.WebSocketSharp.Server.WebSocketSessionManager.PingTo(System.String)">
            <summary>
            Sends a ping to the client using the specified session.
            </summary>
            <returns>
            <c>true</c> if the send has successfully done and a pong has been
            received within a time; otherwise, <c>false</c>.
            </returns>
            <param name="id">
            A <see cref="T:System.String"/> that specifies the ID of the session.
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="id"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="id"/> is an empty string.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            The session could not be found.
            </exception>
        </member>
        <member name="M:Sfs2X.WebSocketSharp.Server.WebSocketSessionManager.PingTo(System.String,System.String)">
            <summary>
            Sends a ping with the specified message to the client using
            the specified session.
            </summary>
            <returns>
            <c>true</c> if the send has successfully done and a pong has been
            received within a time; otherwise, <c>false</c>.
            </returns>
            <param name="message">
              <para>
              A <see cref="T:System.String"/> that specifies the message to send.
              </para>
              <para>
              Its size must be 125 bytes or less in UTF-8.
              </para>
            </param>
            <param name="id">
            A <see cref="T:System.String"/> that specifies the ID of the session.
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="id"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
              <para>
              <paramref name="id"/> is an empty string.
              </para>
              <para>
              -or-
              </para>
              <para>
              <paramref name="message"/> could not be UTF-8-encoded.
              </para>
            </exception>
            <exception cref="T:System.InvalidOperationException">
            The session could not be found.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            The size of <paramref name="message"/> is greater than 125 bytes.
            </exception>
        </member>
        <member name="M:Sfs2X.WebSocketSharp.Server.WebSocketSessionManager.SendTo(System.Byte[],System.String)">
            <summary>
            Sends the specified data to the client using the specified session.
            </summary>
            <param name="data">
            An array of <see cref="T:System.Byte"/> that specifies the binary data to send.
            </param>
            <param name="id">
            A <see cref="T:System.String"/> that specifies the ID of the session.
            </param>
            <exception cref="T:System.ArgumentNullException">
              <para>
              <paramref name="id"/> is <see langword="null"/>.
              </para>
              <para>
              -or-
              </para>
              <para>
              <paramref name="data"/> is <see langword="null"/>.
              </para>
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="id"/> is an empty string.
            </exception>
            <exception cref="T:System.InvalidOperationException">
              <para>
              The session could not be found.
              </para>
              <para>
              -or-
              </para>
              <para>
              The current state of the WebSocket interface is not Open.
              </para>
            </exception>
        </member>
        <member name="M:Sfs2X.WebSocketSharp.Server.WebSocketSessionManager.SendTo(System.String,System.String)">
            <summary>
            Sends the specified data to the client using the specified session.
            </summary>
            <param name="data">
            A <see cref="T:System.String"/> that specifies the text data to send.
            </param>
            <param name="id">
            A <see cref="T:System.String"/> that specifies the ID of the session.
            </param>
            <exception cref="T:System.ArgumentNullException">
              <para>
              <paramref name="id"/> is <see langword="null"/>.
              </para>
              <para>
              -or-
              </para>
              <para>
              <paramref name="data"/> is <see langword="null"/>.
              </para>
            </exception>
            <exception cref="T:System.ArgumentException">
              <para>
              <paramref name="id"/> is an empty string.
              </para>
              <para>
              -or-
              </para>
              <para>
              <paramref name="data"/> could not be UTF-8-encoded.
              </para>
            </exception>
            <exception cref="T:System.InvalidOperationException">
              <para>
              The session could not be found.
              </para>
              <para>
              -or-
              </para>
              <para>
              The current state of the WebSocket interface is not Open.
              </para>
            </exception>
        </member>
        <member name="M:Sfs2X.WebSocketSharp.Server.WebSocketSessionManager.SendTo(System.IO.Stream,System.Int32,System.String)">
            <summary>
            Sends the data from the specified stream instance to the client using
            the specified session.
            </summary>
            <param name="stream">
              <para>
              A <see cref="T:System.IO.Stream"/> instance from which to read the data to send.
              </para>
              <para>
              The data is sent as the binary data.
              </para>
            </param>
            <param name="length">
            An <see cref="T:System.Int32"/> that specifies the number of bytes to send.
            </param>
            <param name="id">
            A <see cref="T:System.String"/> that specifies the ID of the session.
            </param>
            <exception cref="T:System.ArgumentNullException">
              <para>
              <paramref name="id"/> is <see langword="null"/>.
              </para>
              <para>
              -or-
              </para>
              <para>
              <paramref name="stream"/> is <see langword="null"/>.
              </para>
            </exception>
            <exception cref="T:System.ArgumentException">
              <para>
              <paramref name="id"/> is an empty string.
              </para>
              <para>
              -or-
              </para>
              <para>
              <paramref name="stream"/> cannot be read.
              </para>
              <para>
              -or-
              </para>
              <para>
              <paramref name="length"/> is less than 1.
              </para>
              <para>
              -or-
              </para>
              <para>
              No data could be read from <paramref name="stream"/>.
              </para>
            </exception>
            <exception cref="T:System.InvalidOperationException">
              <para>
              The session could not be found.
              </para>
              <para>
              -or-
              </para>
              <para>
              The current state of the WebSocket interface is not Open.
              </para>
            </exception>
        </member>
        <member name="M:Sfs2X.WebSocketSharp.Server.WebSocketSessionManager.SendToAsync(System.Byte[],System.String,System.Action{System.Boolean})">
            <summary>
            Sends the specified data to the client using the specified session
            asynchronously.
            </summary>
            <remarks>
            This method does not wait for the send to be complete.
            </remarks>
            <param name="data">
            An array of <see cref="T:System.Byte"/> that specifies the binary data to send.
            </param>
            <param name="id">
            A <see cref="T:System.String"/> that specifies the ID of the session.
            </param>
            <param name="completed">
              <para>
              An <see cref="T:System.Action{bool}"/> delegate.
              </para>
              <para>
              The delegate invokes the method called when the send is complete.
              </para>
              <para>
              The <see cref="T:System.Boolean"/> parameter passed to the method is <c>true</c>
              if the send has successfully done; otherwise, <c>false</c>.
              </para>
              <para>
              <see langword="null"/> if not necessary.
              </para>
            </param>
            <exception cref="T:System.ArgumentNullException">
              <para>
              <paramref name="id"/> is <see langword="null"/>.
              </para>
              <para>
              -or-
              </para>
              <para>
              <paramref name="data"/> is <see langword="null"/>.
              </para>
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="id"/> is an empty string.
            </exception>
            <exception cref="T:System.InvalidOperationException">
              <para>
              The session could not be found.
              </para>
              <para>
              -or-
              </para>
              <para>
              The current state of the WebSocket interface is not Open.
              </para>
            </exception>
        </member>
        <member name="M:Sfs2X.WebSocketSharp.Server.WebSocketSessionManager.SendToAsync(System.String,System.String,System.Action{System.Boolean})">
            <summary>
            Sends the specified data to the client using the specified session
            asynchronously.
            </summary>
            <remarks>
            This method does not wait for the send to be complete.
            </remarks>
            <param name="data">
            A <see cref="T:System.String"/> that specifies the text data to send.
            </param>
            <param name="id">
            A <see cref="T:System.String"/> that specifies the ID of the session.
            </param>
            <param name="completed">
              <para>
              An <see cref="T:System.Action{bool}"/> delegate.
              </para>
              <para>
              The delegate invokes the method called when the send is complete.
              </para>
              <para>
              The <see cref="T:System.Boolean"/> parameter passed to the method is <c>true</c>
              if the send has successfully done; otherwise, <c>false</c>.
              </para>
              <para>
              <see langword="null"/> if not necessary.
              </para>
            </param>
            <exception cref="T:System.ArgumentNullException">
              <para>
              <paramref name="id"/> is <see langword="null"/>.
              </para>
              <para>
              -or-
              </para>
              <para>
              <paramref name="data"/> is <see langword="null"/>.
              </para>
            </exception>
            <exception cref="T:System.ArgumentException">
              <para>
              <paramref name="id"/> is an empty string.
              </para>
              <para>
              -or-
              </para>
              <para>
              <paramref name="data"/> could not be UTF-8-encoded.
              </para>
            </exception>
            <exception cref="T:System.InvalidOperationException">
              <para>
              The session could not be found.
              </para>
              <para>
              -or-
              </para>
              <para>
              The current state of the WebSocket interface is not Open.
              </para>
            </exception>
        </member>
        <member name="M:Sfs2X.WebSocketSharp.Server.WebSocketSessionManager.SendToAsync(System.IO.Stream,System.Int32,System.String,System.Action{System.Boolean})">
            <summary>
            Sends the data from the specified stream instance to the client using
            the specified session asynchronously.
            </summary>
            <remarks>
            This method does not wait for the send to be complete.
            </remarks>
            <param name="stream">
              <para>
              A <see cref="T:System.IO.Stream"/> instance from which to read the data to send.
              </para>
              <para>
              The data is sent as the binary data.
              </para>
            </param>
            <param name="length">
            An <see cref="T:System.Int32"/> that specifies the number of bytes to send.
            </param>
            <param name="id">
            A <see cref="T:System.String"/> that specifies the ID of the session.
            </param>
            <param name="completed">
              <para>
              An <see cref="T:System.Action{bool}"/> delegate.
              </para>
              <para>
              The delegate invokes the method called when the send is complete.
              </para>
              <para>
              The <see cref="T:System.Boolean"/> parameter passed to the method is <c>true</c>
              if the send has successfully done; otherwise, <c>false</c>.
              </para>
              <para>
              <see langword="null"/> if not necessary.
              </para>
            </param>
            <exception cref="T:System.ArgumentNullException">
              <para>
              <paramref name="id"/> is <see langword="null"/>.
              </para>
              <para>
              -or-
              </para>
              <para>
              <paramref name="stream"/> is <see langword="null"/>.
              </para>
            </exception>
            <exception cref="T:System.ArgumentException">
              <para>
              <paramref name="id"/> is an empty string.
              </para>
              <para>
              -or-
              </para>
              <para>
              <paramref name="stream"/> cannot be read.
              </para>
              <para>
              -or-
              </para>
              <para>
              <paramref name="length"/> is less than 1.
              </para>
              <para>
              -or-
              </para>
              <para>
              No data could be read from <paramref name="stream"/>.
              </para>
            </exception>
            <exception cref="T:System.InvalidOperationException">
              <para>
              The session could not be found.
              </para>
              <para>
              -or-
              </para>
              <para>
              The current state of the WebSocket interface is not Open.
              </para>
            </exception>
        </member>
        <member name="M:Sfs2X.WebSocketSharp.Server.WebSocketSessionManager.Sweep">
            <summary>
            Cleans up the inactive sessions in the WebSocket service.
            </summary>
        </member>
        <member name="M:Sfs2X.WebSocketSharp.Server.WebSocketSessionManager.TryGetSession(System.String,Sfs2X.WebSocketSharp.Server.IWebSocketSession@)">
            <summary>
            Tries to get the session instance with the specified ID.
            </summary>
            <returns>
            <c>true</c> if the session instance is successfully found; otherwise,
            <c>false</c>.
            </returns>
            <param name="id">
            A <see cref="T:System.String"/> that specifies the ID of the session to find.
            </param>
            <param name="session">
              <para>
              When this method returns, a <see cref="T:Sfs2X.WebSocketSharp.Server.IWebSocketSession"/>
              instance or <see langword="null"/> if not found.
              </para>
              <para>
              The session instance provides the function to access
              the information in the session.
              </para>
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="id"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="id"/> is an empty string.
            </exception>
        </member>
        <member name="M:ComponentAce.Compression.Libs.zlib.SupportClass.Identity(System.Int64)">
            <summary>
            This method returns the literal value received
            </summary>
            <param name="literal">The literal to return</param>
            <returns>The received value</returns>
        </member>
        <member name="M:ComponentAce.Compression.Libs.zlib.SupportClass.Identity(System.UInt64)">
            <summary>
            This method returns the literal value received
            </summary>
            <param name="literal">The literal to return</param>
            <returns>The received value</returns>
        </member>
        <member name="M:ComponentAce.Compression.Libs.zlib.SupportClass.Identity(System.Single)">
            <summary>
            This method returns the literal value received
            </summary>
            <param name="literal">The literal to return</param>
            <returns>The received value</returns>
        </member>
        <member name="M:ComponentAce.Compression.Libs.zlib.SupportClass.Identity(System.Double)">
            <summary>
            This method returns the literal value received
            </summary>
            <param name="literal">The literal to return</param>
            <returns>The received value</returns>
        </member>
        <member name="M:ComponentAce.Compression.Libs.zlib.SupportClass.URShift(System.Int32,System.Int32)">
            <summary>
            Performs an unsigned bitwise right shift with the specified number
            </summary>
            <param name="number">Number to operate on</param>
            <param name="bits">Ammount of bits to shift</param>
            <returns>The resulting number from the shift operation</returns>
        </member>
        <member name="M:ComponentAce.Compression.Libs.zlib.SupportClass.URShift(System.Int32,System.Int64)">
            <summary>
            Performs an unsigned bitwise right shift with the specified number
            </summary>
            <param name="number">Number to operate on</param>
            <param name="bits">Ammount of bits to shift</param>
            <returns>The resulting number from the shift operation</returns>
        </member>
        <member name="M:ComponentAce.Compression.Libs.zlib.SupportClass.URShift(System.Int64,System.Int32)">
            <summary>
            Performs an unsigned bitwise right shift with the specified number
            </summary>
            <param name="number">Number to operate on</param>
            <param name="bits">Ammount of bits to shift</param>
            <returns>The resulting number from the shift operation</returns>
        </member>
        <member name="M:ComponentAce.Compression.Libs.zlib.SupportClass.URShift(System.Int64,System.Int64)">
            <summary>
            Performs an unsigned bitwise right shift with the specified number
            </summary>
            <param name="number">Number to operate on</param>
            <param name="bits">Ammount of bits to shift</param>
            <returns>The resulting number from the shift operation</returns>
        </member>
        <member name="M:ComponentAce.Compression.Libs.zlib.SupportClass.ReadInput(System.IO.Stream,System.Byte[],System.Int32,System.Int32)">
            <summary>Reads a number of characters from the current source Stream and writes the data to the target array at the specified index.</summary>
            <param name="sourceStream">The source Stream to read from.</param>
            <param name="target">Contains the array of characteres read from the source Stream.</param>
            <param name="start">The starting index of the target array.</param>
            <param name="count">The maximum number of characters to read from the source Stream.</param>
            <returns>The number of characters read. The number will be less than or equal to count depending on the data available in the source Stream. Returns -1 if the end of the stream is reached.</returns>
        </member>
        <member name="M:ComponentAce.Compression.Libs.zlib.SupportClass.ReadInput(System.IO.TextReader,System.Byte[],System.Int32,System.Int32)">
            <summary>Reads a number of characters from the current source TextReader and writes the data to the target array at the specified index.</summary>
            <param name="sourceTextReader">The source TextReader to read from</param>
            <param name="target">Contains the array of characteres read from the source TextReader.</param>
            <param name="start">The starting index of the target array.</param>
            <param name="count">The maximum number of characters to read from the source TextReader.</param>
            <returns>The number of characters read. The number will be less than or equal to count depending on the data available in the source TextReader. Returns -1 if the end of the stream is reached.</returns>
        </member>
        <member name="M:ComponentAce.Compression.Libs.zlib.SupportClass.ToByteArray(System.String)">
            <summary>
            Converts a string to an array of bytes
            </summary>
            <param name="sourceString">The string to be converted</param>
            <returns>The new array of bytes</returns>
        </member>
        <member name="M:ComponentAce.Compression.Libs.zlib.SupportClass.ToCharArray(System.Byte[])">
            <summary>
            Converts an array of bytes to an array of chars
            </summary>
            <param name="byteArray">The array of bytes to convert</param>
            <returns>The new array of chars</returns>
        </member>
        <member name="P:ComponentAce.Compression.Libs.zlib.ZInputStream.TotalIn">
            <summary> Returns the total number of bytes input so far.</summary>
        </member>
        <member name="P:ComponentAce.Compression.Libs.zlib.ZInputStream.TotalOut">
            <summary> Returns the total number of bytes output so far.</summary>
        </member>
        <member name="P:ComponentAce.Compression.Libs.zlib.ZOutputStream.TotalIn">
            <summary> Returns the total number of bytes input so far.</summary>
        </member>
        <member name="P:ComponentAce.Compression.Libs.zlib.ZOutputStream.TotalOut">
            <summary> Returns the total number of bytes output so far.</summary>
        </member>
    </members>
</doc>
